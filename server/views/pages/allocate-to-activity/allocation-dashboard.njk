{% extends "layout.njk" %}

{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "components/searchBar.njk" import searchBar %}

{% set pageTitle = applicationName + " - Allocate" %}
{% set pageId = 'allocation-dashboard-page' %}
{% set backLinkHref = "/allocate/categories" %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <h1 class="govuk-heading-xl">You're allocating to {{ schedule.description }}</h1>
        </div>
    </div>

    <div class="govuk-grid-row govuk-!-margin-bottom-3">
        <div class="govuk-grid-column-two-thirds">
            <p>Check the requirements for this activity so that you can allocate suitable candidates.</p>
        </div>
        <div class="govuk-grid-column-one-third">
            <div class='related-tasks'>
                <a href="/allocate/categories" class="govuk-link">Find other activities with vacancies</a>
            </div>
        </div>
    </div>

    <div class="govuk-grid-row govuk-!-margin-bottom-6">
        <div class="govuk-grid-column-one-third">
            <div class="information-card">
                {{ govukTable({
                    caption: "Current allocation",
                    captionClasses: "govuk-table__caption--m",
                    firstCellIsHeader: true,
                    rows: [
                        [
                            {
                                text: "Vacancies:"
                            },
                            {
                                text: allocationSummaryView.vacancies
                            }
                        ],
                        [
                            {
                                text: "Allocated:"
                            },
                            {
                                text: allocationSummaryView.allocated
                            }
                        ],
                        [
                            {
                                text: "Capacity:"
                            },
                            {
                                text: allocationSummaryView.capacity
                            }
                        ]
                    ]
                }) }}
            </div>
        </div>
        <div class="govuk-grid-column-two-thirds">
            <div class="information-card">
                {{ govukTable({
                    caption: "Requirements",
                    captionClasses: "govuk-table__caption--m",
                    firstCellIsHeader: true,
                    rows: [
                        [
                            {
                                text: "Suitable for workplace risk assessment:"
                            },
                            {
                                text: suitableForWra
                            }
                        ],
                        [
                            {
                                text: "Suitable for incentive level:"
                            },
                            {
                                text: suitableForIep
                            }
                        ]
                    ]
                }) }}
            </div>
        </div>
    </div>

    {{ govukTabs({
        items: [
            {
                label: "Currently allocated",
                id: "currently-allocated-tab",
                panel: {
                    html: currentlyAllocatedHtml
                }
            },
            {
                label: "Candidates",
                id: "candidates-tab",
                panel: {
                    html: candidatesHtml
                }
            },
            {
                label: schedule.description + " schedule",
                id: "schedule-tab",
                panel: {
                    html: scheduleHtml
                }
            }
        ]
    }) }}
{% endblock %}

{% set currentlyAllocatedHtml %}
    {% set rows = [] %}
    {% for row in currentlyAllocated %}
        {% set otherAllocationsHtml %}
            <div>
                {% for allocation in row.otherAllocations %}
                    <div>{{ allocation.scheduleName }}</div>
                {% endfor %}
            </div>
        {% endset %}

        {% set rows = (rows.push([
            {
                html: '
                    <h2 class="govuk-heading-s govuk-!-margin-bottom-0">
                        <a href="' + dpsUrl + '/prisoner/' + row.prisonerNumber + '"
                           class="govuk-link govuk-link--no-visited-state" target="_blank" rel="noopener noreferrer">' + row.name | toTitleCase + '
                        </a>
                    </h2>
                    <div class="govuk-hint govuk-!-margin-bottom-1">' + row.prisonerNumber + '</div>
                    <div class="govuk-hint govuk-!-margin-bottom-1">' + row.cellLocation + '</div>
                ',
                attributes: {
                    "data-sort-value": row.name
                }
            },
            {
                text: row.dateAllocated | formatDate('do MMMM yyyy')
            },
            {
                html: otherAllocationsHtml
            },
            {
                text: row.releaseDate | formatDate('do MMMM yyyy') if row.releaseDate else 'TBC'
            }
        ]), rows) %}
    {% endfor %}

    <p>Review the list of people currently allocated to identify any non-associations.</p>
    {{ govukTable({
        attributes: {
            'data-module': 'moj-sortable-table'
        },
        caption: "Currently allocated",
        captionClasses: "govuk-visually-hidden",
        head: [
            {
                text: "Prisoner details",
                attributes: {
                    "aria-sort": "ascending"
                }
            },
            {
                text: "Date allocated"
            },
            {
                text: "Other allocations"
            },
            {
                text: "Earliest release date"
            }
        ],
        rows: rows
    }) }}
{% endset %}

{% set candidatesHtml %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop govuk-grid-column-one-half">
            <p>
                Your candidate list has been filtered to show people who match all the requirements for this activity.
                Use the filters to expand or reduce the list. You can also search for someone you want to allocate.
            </p>
        </div>
        <div class="govuk-grid-column-one-third-from-desktop govuk-grid-column-one-half">
            <form method='GET'>
                <label class="govuk-label" for="candidate-search-input">Search by name or prison number:</label>
                {{ searchBar({
                    inputParams: {
                        id: 'candidate-search-input',
                        name: 'candidateQuery',
                        value: filters.candidateQuery
                    },
                    buttonParams: {
                        text: 'Search'
                    }
                }) }}
            </form>
        </div>
    </div>
    <div class='filter'>
        <form method='GET'>
            <div class="filter__items">
                {% set riskLevelOptions = [
                    {
                        value: 'Low',
                        text: 'Low',
                        selected: filters.riskLevelFilter == 'Low'
                    },
                    {
                        value: 'Low or Medium',
                        text: 'Low or Medium',
                        selected: filters.riskLevelFilter == 'Low or Medium'
                    },
                    {
                        value: 'Low or Medium or High',
                        text: 'Low or Medium or High',
                        selected: filters.riskLevelFilter == 'Low or Medium or High'
                    },
                    {
                        value: 'No Workplace Risk Assessment',
                        text: 'No Workplace Risk Assessment',
                        selected: filters.riskLevelFilter == 'No Workplace Risk Assessment'
                    },
                    {
                        value: 'Any Workplace Risk Assessment',
                        text: 'Any Workplace Risk Assessment',
                        selected: filters.riskLevelFilter == 'Any Workplace Risk Assessment'
                    }
                ] %}
                {{ govukSelect({
                    id: "riskLevelFilter",
                    name: "riskLevelFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people whose workplace risk assessment is:"
                    },
                    items: riskLevelOptions
                }) }}

                {% set incentiveLevelOptions = [] %}
                {% for incentiveLevel in incentiveLevels %}
                    {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                        {
                            value: incentiveLevel.iepDescription,
                            text: incentiveLevel.iepDescription,
                            selected: filters.incentiveLevelFilter == incentiveLevel.iepDescription
                        }
                    ), incentiveLevelOptions) %}
                {% endfor %}
                {% for incentiveLevel in incentiveLevels %}
                    {% if loop.first or loop.last %}
                        {% set option = incentiveLevel.iepDescription %}
                    {% else %}
                        {% set option = option + ' or ' + incentiveLevel.iepDescription %}
                        {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                            {
                                value: option,
                                text: option,
                                selected: filters.incentiveLevelFilter == option
                            }
                        ), incentiveLevelOptions) %}
                    {% endif %}
                {% endfor %}
                {% for incentiveLevel in incentiveLevels | reverse %}
                    {% if loop.first or loop.last %}
                        {% set option = incentiveLevel.iepDescription %}
                    {% else %}
                        {% set option = incentiveLevel.iepDescription + ' or ' + option %}
                        {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                            {
                                value: option,
                                text: option,
                                selected: filters.incentiveLevelFilter == option
                            }
                        ), incentiveLevelOptions) %}
                    {% endif %}
                {% endfor %}
                {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                    {
                        value: 'All Incentive Levels',
                        text: 'All Incentive Levels',
                        selected: filters.incentiveLevelFilter == 'All Incentive Levels'
                    }
                ), incentiveLevelOptions) %}

                {{ govukSelect({
                    id: "incentiveLevelFilter",
                    name: "incentiveLevelFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people who have the following incentive level:"
                    },
                    items: incentiveLevelOptions
                }) }}
            </div>

            {{ govukButton({
                text: "Apply filters"
            }) }}
        </form>
    </div>

    {% set rows = [] %}
    {% for row in candidates %}
        {% set currentAllocationsHtml %}
            <div>
                {% for allocation in row.otherAllocations %}
                    <div>{{ allocation.scheduleName }}</div>
                {% endfor %}
            </div>
        {% endset %}
        {% set id = 'selectedAllocation' + (('-' + loop.index0) if loop.index0 else '') %}
        {% set rows = (rows.push([
            {
                html: '
                    <div class="govuk-radios govuk-radios--small" data-module="govuk-radios">
                        <div class="govuk-radios__item">
                            <input class="govuk-radios__input govuk-!-padding-top-3" id="' + id + '" name="selectedAllocation" type="radio" value="' + row.prisonerNumber + '">
                            <label class="govuk-label govuk-radios__label" for="' + id + '">
                                <h2 class="govuk-heading-s govuk-!-margin-bottom-1">
                                    <a href="' + dpsUrl + '/prisoner/' + row.prisonerNumber + '"
                                       class="govuk-link govuk-link--no-visited-state" target="_blank" rel="noopener noreferrer">' + row.name | toTitleCase + '
                                    </a>
                                </h2>
                                <div class="govuk-hint govuk-!-margin-bottom-1">' + row.prisonerNumber + '</div>
                                <div class="govuk-hint govuk-!-margin-bottom-1">' + row.cellLocation + '</div>
                            </label>
                        </div>
                    </div>
                '
            },
            {
                html: currentAllocationsHtml
            },
            {
                text: row.releaseDate | formatDate('do MMMM yyyy') if row.releaseDate else 'TBC'
            }
        ]), rows) %}
    {% endfor %}

    <form method='POST'>
        <input type="hidden" name="_csrf" value="{{ csrfToken }}" />
        {{ govukTable({
            caption: "Candidates",
            captionClasses: "govuk-visually-hidden",
            head: [
                {
                    text: "Candidate details"
                },
                {
                    text: "Current Allocation"
                },
                {
                    text: "Earliest release date"
                }
            ],
            rows: rows
        }) }}

        {% if rows.length > 0 %}
            {{ govukButton({
                text: "Select candidate"
            }) }}
        {% endif %}
    </form>
{% endset %}

{% set scheduleHtml %}
    {% set rows = [] %}

    {% for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
        {% set columns = [
            {
                text: day
            }
        ] %}

        {% for timeSlot in ['am', 'pm', 'ed'] %}
            {% set slotMatches = false %}
            {% for slot in schedule.slots %}
                {% set dayMatchesSlot = day | startsWithAny(slot.daysOfWeek) %}
                {% set slotMatches = dayMatchesSlot and (slotMatches or slot.startTime | getTimeSlotFromTime == timeSlot) %}
            {% endfor %}

            {% set columns = (columns.push(
                {
                    html: govukTag({
                        text: "Yes" if slotMatches else "No",
                        classes: "govuk-tag--grey" if not slotMatches
                    })
                }
            ), columns) %}
        {% endfor %}

        {% set rows = (rows.push(columns), rows) %}
    {% endfor %}

    <p>Check the activity schedule is compatible with any current allocations. 
    You can check individual schedules using the <a href="{{ dpsUrl }}/prisoner-search?keywords=&location={{ user.activeCaseLoad.caseLoadId }}") }}>prisoner profile</a></p>
    <p>This schedule {{ "runs" if schedule.runsOnBankHoliday else "does not run" }} on bank holidays.</p>

    {{ govukTable({
        caption: "Schedule",
        captionClasses: "govuk-visually-hidden",
        head: [ { text: "Days" }, { text: "AM" }, { text: "PM" }, { text: "ED" } ],
        rows: rows
    }) }}
{% endset %}
