{% extends "layout.njk" %}

{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "components/sticky-select.njk" import stickySelect %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/pagination/macro.njk" import govukPagination %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "components/searchBar.njk" import searchBar %}
{% from "partials/activities/waitlist-status-badge.njk" import waitlistStatusBadge %}

{% set pageTitle = applicationName + " - Allocate" %}
{% set pageId = 'allocation-dashboard-page' %}
{% set backLinkHref = "/activities/allocation-dashboard" %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <h1 class="govuk-heading-xl">You're allocating to {{ schedule.description }}</h1>
        </div>
    </div>

    <div class="govuk-grid-row govuk-!-margin-bottom-3">
        <div class="govuk-grid-column-two-thirds">
            <p>Check the requirements for this activity so that you can allocate suitable candidates.</p>
        </div>
        <div class="govuk-grid-column-one-third">
            <div class='related-tasks'>
                <ul class='govuk-list'>
                    <li><a href="/activities/allocation-dashboard?preserveHistory=true" class="govuk-link govuk-link--no-visited-state">Find other activities with vacancies</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="govuk-grid-row govuk-!-margin-bottom-6">
        <div class="govuk-grid-column-one-third">
            <div class="information-card">
                {{ govukTable({
                    caption: "Current allocation",
                    captionClasses: "govuk-table__caption--m",
                    firstCellIsHeader: true,
                    rows: [
                        [
                            {
                                text: "Vacancies:"
                            },
                            {
                                text: schedule.activity.capacity - schedule.activity.allocated
                            }
                        ],
                        [
                            {
                                text: "Allocated:"
                            },
                            {
                                text: schedule.activity.allocated
                            }
                        ],
                        [
                            {
                                text: "Capacity:"
                            },
                            {
                                text: schedule.activity.capacity
                            }
                        ],
                        [
                            {
                                text: "On waitlist:"
                            },
                            {
                                text: waitlistedPrisoners | length
                            }
                        ]
                    ]
                }) }}
            </div>
        </div>
        <div class="govuk-grid-column-two-thirds">
            <div class="information-card">
                {% set requiredEducationHtml %}
                    <div>
                        {% for education in schedule.activity.minimumEducationLevel %}
                            <div>{{ education.studyAreaDescription }}: {{ education.educationLevelDescription }}</div>
                        {% else %}
                            None required
                        {% endfor %}
                    </div>
                {% endset %}

                {% set suitableForIepHtml %}
                    <p>{{ suitableForIep }}</p>
                    <p class='govuk-hint'>You can control which incentive levels are suitable by <a class='govuk-link govuk-link--no-visited-state' href='/activities/schedule/activities/{{ schedule.id }}' target='_blank'>adding or removing corresponding pay rates.</a></p>
                {% endset %}

                {{ govukTable({
                    caption: "Requirements",
                    captionClasses: "govuk-table__caption--m",
                    firstCellIsHeader: true,
                    rows: [
                        [
                            {
                                text: "Suitable for workplace risk assessment:"
                            },
                            {
                                text: suitableForWra
                            }
                        ],
                        [
                            {
                                text: "Suitable for incentive level:"
                            },
                            {
                                html: suitableForIepHtml
                            }
                        ],
                        [
                            {
                                text: "Education level:"
                            },
                            {
                                html: requiredEducationHtml
                            }
                        ]
                    ]
                }) }}
            </div>
        </div>
    </div>

    {{ govukTabs({
        classes: "govuk-tabs--borderless",
        items: [
            {
                label: "Currently allocated",
                id: "currently-allocated-tab",
                panel: {
                    html: currentlyAllocatedHtml
                }
            },
            {
                label: "Waitlist",
                id: "waitlist-tab",
                panel: {
                    html: waitlistHtml
                }
            },
            {
                label: "Other people",
                id: "candidates-tab",
                panel: {
                    html: candidatesHtml
                }
            },
            {
                label: schedule.description + " schedule",
                id: "schedule-tab",
                panel: {
                    html: scheduleHtml
                }
            }
        ]
    }) }}
{% endblock %}

{% set currentlyAllocatedHtml %}
    {% set rows = [] %}
    {% for row in currentlyAllocated %}
        {% set otherAllocationsHtml %}
            <ul class='govuk-list'>
                {% for allocation in row.otherAllocations %}
                    <li><a href='/activities/allocation-dashboard/{{ allocation.id }}' class='govuk-link govuk-link--no-visited-state' target='_blank'>{{ allocation.scheduleName | escape }}</a></li>
                {% else %}
                    <li>None</li>
                {% endfor %}
            </ul>
        {% endset %}

        {% set currentlyAllocatedHtml %}
            <h2 class="govuk-heading-s govuk-!-margin-bottom-0">
                <a href= '{{ dpsUrl }}/prisoner/{{ row.prisonerNumber }}'
                   class="govuk-link govuk-link--no-visited-state" target="_blank" rel="noopener noreferrer"> {{ row.name | toTitleCase }}
                </a>
            </h2>
                <div class="govuk-hint govuk-!-margin-bottom-1"> {{ row.prisonerNumber }} </div>
            {% if row.cellLocation == 'CSWAP' %}
                <div class="govuk-hint govuk-!-margin-bottom-1"> -- </div>
            {% else %}
                <div class="govuk-hint govuk-!-margin-bottom-1"> {{ row.cellLocation }}</div>
            {% endif %}
        {% endset%}

        {% set suspendedTagHtml %}

            {% if row.status == 'SUSPENDED'%}
                {{ govukTag({
                    text: "Suspended",
                    classes: "govuk-tag--red"
                }) }}
            {% endif %}
         <div>
                {{ row.startDate | formatDate('d MMMM yyyy') + (' to ' + row.endDate | formatDate('d MMMM yyyy') if row.endDate) }}
         </div>
        {% endset %}

        {% set rows = (rows.push({
            visuallyHiddenText: 'Select ' + row.name | toTitleCase,
            value: row.prisonerNumber,
            selectable: true,
            items: [
                {
                    html: currentlyAllocatedHtml,
                    attributes: {
                        "data-sort-value": row.name
                    }
                },
                {

                    html: suspendedTagHtml

                },
                {
                    html: otherAllocationsHtml
                },
                {
                    text: row.releaseDate | formatDate('d MMMM yyyy') if row.releaseDate else 'TBC'
                }
            ]
        }), rows) %}
    {% endfor %}

    <form method='POST'>
        <input type="hidden" name="_csrf" value="{{ csrfToken }}">
        {{ stickySelect({
            idPrefix: 'allocated',
            type: 'check',
            caption: "Currently allocated",
            captionClasses: "govuk-visually-hidden",
            name: 'selectedAllocations',
            head: [
                {
                    text: "Prisoner details"
                },
                {
                    text: "Allocation start and end"
                },
                {
                    text: "Other allocations"
                },
                {
                    text: "Earliest release date"
                }
            ],
            rows: rows,
            actions: [
                {
                    text: 'Remove from activity',
                    formAction: schedule.id + '/deallocate'
                },
                {
                    text: 'Edit allocation',
                    formAction: schedule.id + '/check-allocation',
                    maxItems: 1
                }
            ],
            itemsDescription: 'person',
            itemsDescriptionPlural: 'people'
        }) }}
    </form>
{% endset %}

{% set waitlistHtml %}
    <div class='filter'>
        <form method='GET'>
            <div class="filter__items filter__items--quarters">
                {% set employmentOptions = [
                    {
                        value: 'Not in work',
                        text: 'Not in work',
                        selected: filters.employmentFilter == 'Not in work'
                    },
                    {
                        value: 'In work',
                        text: 'In work',
                        selected: filters.employmentFilter == 'In work'
                    },
                    {
                        value: 'Everyone',
                        text: 'Everyone',
                        selected: filters.employmentFilter == 'Everyone'
                    }
                ] %}
                {{ govukSelect({
                    name: "employmentFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people who are:"
                    },
                    items: employmentOptions
                }) }}

                {% set riskLevelOptions = [
                    {
                        value: 'Any Workplace Risk Assessment',
                        text: 'Any Workplace Risk Assessment',
                        selected: filters.riskLevelFilter == 'Any Workplace Risk Assessment'
                    },
                    {
                        value: 'Low',
                        text: 'Low',
                        selected: filters.riskLevelFilter == 'Low'
                    },
                    {
                        value: 'Low or Medium',
                        text: 'Low or Medium',
                        selected: filters.riskLevelFilter == 'Low or Medium'
                    },
                    {
                        value: 'Low or Medium or High',
                        text: 'Low or Medium or High',
                        selected: filters.riskLevelFilter == 'Low or Medium or High'
                    },
                    {
                        value: 'No Workplace Risk Assessment',
                        text: 'No Workplace Risk Assessment',
                        selected: filters.riskLevelFilter == 'No Workplace Risk Assessment'
                    }
                ] %}
                {{ govukSelect({
                    name: "riskLevelFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people whose workplace risk assessment is:"
                    },
                    items: riskLevelOptions
                }) }}

                {% set incentiveLevelOptions = [
                    {
                        value: suitableForIep,
                        text: 'Suitable incentive levels: ' + suitableForIep,
                        selected: filters.incentiveLevelFilter == suitableForIep
                    }
                ] %}
                {% for incentiveLevel in incentiveLevels %}
                    {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                        {
                            value: incentiveLevel.levelName,
                            text: incentiveLevel.levelName,
                            selected: filters.incentiveLevelFilter == incentiveLevel.levelName and incentiveLevel.levelName != suitableForIep
                        }
                    ), incentiveLevelOptions) %}
                {% endfor %}
                {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                    {
                        value: 'All Incentive Levels',
                        text: 'All Incentive Levels',
                        selected: filters.incentiveLevelFilter == 'All Incentive Levels'
                    }
                ), incentiveLevelOptions) %}
                {{ govukSelect({
                    name: "incentiveLevelFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people who have the following incentive level:"
                    },
                    items: incentiveLevelOptions
                }) }}

                {% set waitlistStatusOptions = [
                    {
                        value: 'Any',
                        text: 'Any',
                        selected: filters.waitlistStatusFilter == 'Any'
                    },
                    {
                        value: 'APPROVED',
                        text: 'Approved',
                        selected: filters.waitlistStatusFilter == 'APPROVED'
                    },
                    {
                        value: 'DECLINED',
                        text: 'Declined',
                        selected: filters.waitlistStatusFilter == 'DECLINED'
                    },
                    {
                        value: 'PENDING',
                        text: 'Pending',
                        selected: filters.waitlistStatusFilter == 'PENDING'
                    }
                ] %}
                {{ govukSelect({
                    name: "waitlistStatusFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people whose application is:"
                    },
                    items: waitlistStatusOptions
                }) }}
            </div>

            {{ govukButton({
                text: "Apply filters"
            }) }}
        </form>
    </div>

    {% set rows = [] %}
    {% for row in waitlistedPrisoners %}
        {% set currentAllocationsHtml %}
            <ul class='govuk-list'>
                {% for allocation in row.otherAllocations %}
                    <li><a href='/activities/allocation-dashboard/{{ allocation.scheduleId }}' class='govuk-link govuk-link--no-visited-state' target='_blank'>{{ allocation.scheduleName | escape }}</a></li>
                {% else %}
                    <li>None</li>
                {% endfor %}
            </ul>
        {% endset %}
        {% set rows = (rows.push({
            visuallyHiddenText: 'Select ' + row.name | toTitleCase,
            value: row.prisonerNumber,
            selectable: true,
            forbiddenActionId: 'waitlist-action-0' if row.status != 'APPROVED',
            items: [
                {
                    html: '
                        <h2 class="govuk-heading-s govuk-!-margin-bottom-0">
                            <a href="' + dpsUrl + '/prisoner/' + row.prisonerNumber + '"
                               class="govuk-link govuk-link--no-visited-state" target="_blank" rel="noopener noreferrer">' + row.name | toTitleCase + '
                            </a>
                        </h2>
                        <div class="govuk-hint govuk-!-margin-bottom-1">' + row.prisonerNumber + '</div>
                        <div class="govuk-hint govuk-!-margin-bottom-1">' + row.cellLocation + '</div>
                    ',
                    attributes: {
                        "data-sort-value": row.name
                    }
                },
                {
                    text: row.requestDate | formatDate('d MMMM yyyy')
                },
                {
                    text: row.requestedBy
                },
                {
                    html: currentAllocationsHtml
                },
                {
                    text: waitlistStatusBadge(row.status)
                }
            ]
        }), rows) %}
    {% endfor %}

    <form method='POST'>
        <input type="hidden" name="_csrf" value="{{ csrfToken }}" />
        {{ stickySelect({
            idPrefix: 'waitlist',
            type: 'radio',
            caption: "Waitlist applications",
            captionClasses: "govuk-visually-hidden",
            name: 'selectedAllocation',
            head: [
                {
                    text: "Name"
                },
                {
                    text: "Request date"
                },
                {
                    text: "Requester"
                },
                {
                    text: "Current allocations"
                },
                {
                    text: "Status"
                }
            ],
            rows: rows,
            actions: [
                {
                    text: 'Allocate',
                    formAction: schedule.id + '/allocate'
                }
            ],
            itemsDescription: 'person',
            itemsDescriptionPlural: 'people'
        }) }}
    </form>
{% endset %}

{% set candidatesHtml %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds-from-desktop govuk-grid-column-one-half">
            <p>
                Select the person you want to allocate. The list shows people who are not currently allocated or on the waitlist. People who have had an application declined are shown.
                Use the filters to identify candidates, or search for someone.
            </p>
        </div>
        <div class="govuk-grid-column-one-third-from-desktop govuk-grid-column-one-half">
            <form method='GET'>
                <label class="govuk-label" for="candidate-search-input">Search by name or prison number:</label>
                {{ searchBar({
                    inputParams: {
                        id: 'candidate-search-input',
                        name: 'candidateQuery',
                        value: filters.candidateQuery
                    },
                    buttonParams: {
                        text: 'Search'
                    }
                }) }}
            </form>
        </div>
    </div>
    <div class='filter'>
        <form method='GET'>
            <div class="filter__items">
                {% set employmentOptions = [
                    {
                        value: 'Not in work',
                        text: 'Not in work',
                        selected: filters.employmentFilter == 'Not in work'
                    },
                    {
                        value: 'In work',
                        text: 'In work',
                        selected: filters.employmentFilter == 'In work'
                    },
                    {
                        value: 'Everyone',
                        text: 'Everyone',
                        selected: filters.employmentFilter == 'Everyone'
                    }
                ] %}
                {{ govukSelect({
                    id: "employmentFilter",
                    name: "employmentFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people who are:"
                    },
                    items: employmentOptions
                }) }}

                {% set riskLevelOptions = [
                    {
                        value: 'Any Workplace Risk Assessment',
                        text: 'Any Workplace Risk Assessment',
                        selected: filters.riskLevelFilter == 'Any Workplace Risk Assessment'
                    },
                    {
                        value: 'Low',
                        text: 'Low',
                        selected: filters.riskLevelFilter == 'Low'
                    },
                    {
                        value: 'Low or Medium',
                        text: 'Low or Medium',
                        selected: filters.riskLevelFilter == 'Low or Medium'
                    },
                    {
                        value: 'Low or Medium or High',
                        text: 'Low or Medium or High',
                        selected: filters.riskLevelFilter == 'Low or Medium or High'
                    },
                    {
                        value: 'No Workplace Risk Assessment',
                        text: 'No Workplace Risk Assessment',
                        selected: filters.riskLevelFilter == 'No Workplace Risk Assessment'
                    }
                ] %}
                {{ govukSelect({
                    id: "riskLevelFilter",
                    name: "riskLevelFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people whose workplace risk assessment is:"
                    },
                    items: riskLevelOptions
                }) }}

                {% set incentiveLevelOptions = [
                    {
                        value: suitableForIep,
                        text: 'Suitable incentive levels: ' + suitableForIep,
                        selected: filters.incentiveLevelFilter == suitableForIep
                    }
                ] %}
                {% for incentiveLevel in incentiveLevels %}
                    {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                        {
                            value: incentiveLevel.levelName,
                            text: incentiveLevel.levelName,
                            selected: filters.incentiveLevelFilter == incentiveLevel.levelName and incentiveLevel.levelName != suitableForIep
                        }
                    ), incentiveLevelOptions) %}
                {% endfor %}
                {% set incentiveLevelOptions = (incentiveLevelOptions.push(
                    {
                        value: 'All Incentive Levels',
                        text: 'All Incentive Levels',
                        selected: filters.incentiveLevelFilter == 'All Incentive Levels'
                    }
                ), incentiveLevelOptions) %}

                {{ govukSelect({
                    id: "incentiveLevelFilter",
                    name: "incentiveLevelFilter",
                    classes: "govuk-!-width-full",
                    label: {
                        text: "Showing people who have the following incentive level:"
                    },
                    items: incentiveLevelOptions
                }) }}
            </div>

            {{ govukButton({
                id: 'apply-filters',
                text: "Apply filters"
            }) }}
        </form>
    </div>

    {% set rows = [] %}
    {% for row in pagedCandidates.content %}
        {% set currentAllocationsHtml %}
            <ul class='govuk-list'>
                {% for allocation in row.otherAllocations %}
                    <li><a href='/activities/allocation-dashboard/{{ allocation.scheduleId }}' class='govuk-link govuk-link--no-visited-state' target='_blank'>{{ allocation.activitySummary }}</a></li>
                {% else %}
                    <li>None</li>
                {% endfor %}
            </ul>
        {% endset %}
        {% set candidatesHtml %}
               <h2 class="govuk-heading-s govuk-!-margin-bottom-0">
                   <a href='{{ dpsUrl }}/prisoner/{{ row.prisonerNumber }}'
                      class="govuk-link govuk-link--no-visited-state" target="_blank" rel="noopener noreferrer"> {{ row.name | toTitleCase }}
                   </a>
               </h2>
                   <div class="govuk-hint govuk-!-margin-bottom-1"> {{ row.prisonerNumber }}</div>
                   {% if row.cellLocation == 'CSWAP' %}
                        <div class="govuk-hint govuk-!-margin-bottom-1"> --- </div>
                   {% else %}
                        <div class="govuk-hint govuk-!-margin-bottom-1">{{ row.cellLocation }}</div>
                   {% endif %}
        {% endset %}
        {% set rows = (rows.push({
            visuallyHiddenText: 'Select ' + row.name | toTitleCase,
            value: row.prisonerNumber,
            selectable: true,
            items: [
                {
                    html: candidatesHtml,
                    attributes: {
                        "data-sort-value": row.name
                    }
                },
                {
                    html: currentAllocationsHtml
                },
                {
                    text: row.releaseDate | formatDate('d MMMM yyyy') if row.releaseDate else 'TBC'
                }
            ]
        }), rows) %}
    {% endfor %}

    <form method='POST'>
        <input type="hidden" name="_csrf" value="{{ csrfToken }}" />
        {{ stickySelect({
            idPrefix: 'candidate',
            type: 'radio',
            caption: "Candidates",
            captionClasses: "govuk-visually-hidden",
            name: 'selectedAllocation',
            head: [
                {
                    text: "Candidate details"
                },
                {
                    text: "Current allocations"
                },
                {
                    text: "Earliest release date"
                }
            ],
            rows: rows,
            actions: [
                {
                    text: 'Select candidate',
                    formAction: schedule.id + '/allocate'
                }
            ],
            itemsDescription: 'person',
            itemsDescriptionPlural: 'people',
            pagination: {
                previous: {
                    title: 'Previous page',
                    label: pagedCandidates.number + ' of ' + pagedCandidates.totalPages,
                    href: '/page/' + (pagedCandidates.number - 1) + '?id=candidates-tab'
                } if not pagedCandidates.first,
                next: {
                    title: 'Next page',
                    label: (pagedCandidates.number + 2) + ' of ' + pagedCandidates.totalPages,
                    href: '/page/' + (pagedCandidates.number + 1) + '?id=candidates-tab'
                } if not pagedCandidates.last
            }
        }) }}
    </form>
{% endset %}

{% set scheduleHtml %}
    {% set rows = [] %}

    {% for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
        {% set columns = [
            {
                text: day
            }
        ] %}

        {% for timeSlot in ['am', 'pm', 'ed'] %}
            {% set slotMatches = false %}
            {% for slot in schedule.slots %}
                {% set dayMatchesSlot = day | startsWithAny(slot.daysOfWeek) %}
                {% set slotMatches = dayMatchesSlot and (slotMatches or slot.startTime | getTimeSlotFromTime == timeSlot) %}
            {% endfor %}

            {% set columns = (columns.push(
                {
                    html: govukTag({
                        text: "Yes" if slotMatches else "No",
                        classes: "govuk-tag--grey" if not slotMatches
                    })
                }
            ), columns) %}
        {% endfor %}

        {% set rows = (rows.push(columns), rows) %}
    {% endfor %}

    <p>Check the activity schedule is compatible with any current allocations. 
    You can check individual schedules using the <a href="{{ dpsUrl }}/prisoner-search?keywords=&location={{ user.activeCaseLoad.caseLoadId }}") }}
                                                    target='_blank' class='govuk-link--no-visited-state'>prisoner profile</a></p>
    <p>This schedule {{ "runs" if schedule.runsOnBankHoliday else "does not run" }} on bank holidays.</p>

    {{ govukTable({
        caption: "Schedule",
        captionClasses: "govuk-visually-hidden",
        head: [ { text: "Days" }, { text: "AM" }, { text: "PM" }, { text: "ED" } ],
        rows: rows
    }) }}
{% endset %}
