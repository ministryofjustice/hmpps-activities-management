{% extends "layout.njk" %}

{% from "components/searchBar.njk" import searchBar %}
{% from "components/sticky-select.njk" import stickySelect %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "partials/attendance/attendanceTag.njk" import attendanceTag %}
{% from "partials/attendance/incentiveLevelWarningTag.njk" import incentiveLevelWarningTag %}
{% from "partials/attendance/otherEventDisplay.njk" import otherEventDisplay %}
{% from "partials/formatSessions.njk" import formatSessions %}
{% from "partials/payStatus.njk" import payStatus %}
{% from "partials/showProfileLink.njk" import showProfileLink %}
{% from "partials/statusBasedCellLocation.njk" import statusBasedCellLocation %}

{% set pageTitle = applicationName %}
{% set pageId = 'attendance-list-page' %}
{% set activityDate = session.recordAttendanceJourney.activityDate | toDate | formatDate %}
{% set hardBackLinkText = 'Go back to activities for ' + activityDate + ' - ' + formatSessions(selectedSessions) %}
{% set hardBackLinkHref = '/activities/attendance/activities?date=' + session.recordAttendanceJourney.activityDate + '&sessionFilters=' + selectedSessions | join(",") %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">

            <h1 class="govuk-heading-xl govuk-!-margin-bottom-4">
                <span class="govuk-caption-l">Record activity attendance</span>
                {% if numActivities == 1 %}
                    {{ attendanceRows[0].instance.activitySchedule.activity.summary }}
                {% else %}
                    Record attendance at  {{  numActivities }} activities
                {% endif %}
                <span class="govuk-caption-l">
                    {{ formatSessions(selectedSessions) }}
                    {{- ' session' if selectedSessions | length == 1 else ' sessions' }}
                </span>

                <span class="govuk-caption-l">{{ activityDate }}</span>

                <h2 class="govuk-heading-m">{{ attendanceRows | length }} allocations</h2>
            </h1>
        </div>
    </div>

    <div class="govuk-grid-row govuk-!-margin-bottom-4">
        <div class="govuk-grid-column-two-thirds">
            <ul class="govuk-list">
                <li>
                    <span>Attended:</span>
                    {% if attendanceSummary.attendanceCount == 0 %}
                        -
                    {% else %}
                        <span class="govuk-!-font-weight-bold">{{ attendanceSummary.attended }}</span> ({{ attendanceSummary.attendedPercentage }}%)
                    {% endif %}
                </li>
                <li>
                    <span>Absent:</span>
                    {% if attendanceSummary.attendanceCount == 0 %}
                        -
                    {% else %}
                        <span class="govuk-!-font-weight-bold">{{ attendanceSummary.notAttended }}</span> ({{ attendanceSummary.notAttendedPercentage }}%)
                    {% endif %}
                </li>
                <li>
                    <span>Not recorded:</span>
                    {% if attendanceSummary.attendanceCount == 0 %}
                        -
                    {% else %}
                        <span class="govuk-!-font-weight-bold">{{ attendanceSummary.notRecorded }}</span> ({{ attendanceSummary.notRecordedPercentage }}%)
                    {% endif %}
                </li>
            </ul>
        </div>
    </div>

    <div class="govuk-grid-row govuk-!-margin-bottom-4">
        <div class="govuk-grid-column-two-thirds">
            <form method='GET'>
                {{ searchBar({
                    inputParams: {
                        id: 'searchTerm',
                        name: 'searchTerm',
                        label: {
                            text: 'Search by prisoner name or prison number',
                            classes: 'govuk-label--s'
                        },
                        type: 'search',
                        value: session.req.query.searchTerm
                    },
                    buttonParams: {
                        text: 'Search'
                    }
                }) }}
            </form>
        </div>
    </div>

    {% set rows = [] %}
    {% for attendee in attendanceRows | sort(false, false, 'location') %}
        {% set rows = (rows.push({
            visuallyHiddenText: 'Select ' + attendee.prisoner | formatName(NameFormatStyle.lastCommaFirst, false),
            value: attendee.instance.id + '-' + attendee.attendance.id + '-' + attendee.prisoner.prisonerNumber,
            selectable: attendee.attendance.status === "WAITING" and attendee.attendance.editable and attendee.instance.activitySchedule.activity.attendanceRequired,
            items: [
                {
                    html: showProfileLink({
                        firstName: attendee.prisoner.firstName,
                        middleNames: attendee.prisoner.middleNames,
                        lastName: attendee.prisoner.lastName,
                        prisonerNumber: attendee.prisoner.prisonerNumber,
                        inCaseLoad: attendee.prisoner.prisonId == user.activeCaseLoadId
                    }),
                    attributes: {
                        "data-qa": "prisoner-details",
                        "data-sort-value": attendee.prisoner | formatName(NameFormatStyle.lastCommaFirst, false)
                    }
                },
                {
                    text: statusBasedCellLocation(attendee.prisoner.cellLocation, attendee.prisoner.status, attendee.prisoner.prisonId == user.activeCaseLoadId),
                    attributes: {
                        "data-qa": "location"
                    }
                },
                {
                    text: attendee.instance.activitySchedule.activity.summary,
                    attributes: {
                        "data-qa": "activity"
                    }
                },
                {
                    text: attendee.instance.startTime + ' to ' + attendee.instance.endTime,
                    attributes: {
                        "data-qa": "time",
                        "data-sort-value": 'x' + attendee.instance.startTime + ' to ' + attendee.instance.endTime
                    }
                },
                {
                    html: renderOtherEvents(attendee.otherEvents),
                    attributes: {
                        "data-qa": "other-events"
                    }
                },
                {
                    html: attendanceTag(attendee.attendance.status, attendee.attendance.attendanceReason.code, instance.activitySchedule.activity.attendanceRequired) + ' ' + 
                    payStatus({ 
                        dataPresentCheck: attendee.attendance,
                        status: attendee.attendance.status,
                        issuePayment: attendee.attendance.issuePayment,
                        payable: attendee.instance.activitySchedule.activity.paid,
                        marginTagClass: true
                    }) + ' ' +
                    incentiveLevelWarningTag(attendee.attendance),
                    attributes: {
                        "data-qa": "attendance"
                    }
                },
                {
                    html: renderViewLink(attendee)
                }              
            ]
        }), rows) %}
    {% endfor %}

    <form method='POST'>
        <input type="hidden" name="_csrf" value="{{ csrfToken }}">
        {{ stickySelect({
            type: 'check',
            id: "attendanceList",
            caption: "Attendance list",
            captionClasses: "govuk-visually-hidden",
            classes: 'sticky-header',
            name: 'selectedAttendances',
            head: [
                {
                    text: "Name",
                    attributes: { "aria-sort": "none" }
                },
                {
                    text: "Cell location",
                    attributes: { "aria-sort": "none" }
                },
                {
                    text: "Activity",
                    attributes: { "aria-sort": "ascending" },
                    classes: 'hmpps-max-width-240'
                },
                {
                    text: "Time",
                    attributes: { "aria-sort": "ascending" }
                },
                {
                    text: "Clashing events"
                },
                {
                    text: "Attendance and pay",
                    colspan: 2,
                    attributes: { "aria-sort": "none" }
                }
            ],
            rows: rows,
            actions: [
                {
                    text: 'Mark as attended',
                    formAction: 'attended'
                },
                {
                    text: 'Mark as not attended',
                    formAction: 'not-attended'
                }
            ],
            itemsDescription: 'allocation',
            itemsDescriptionPlural: 'allocations'
        }) }}
    </form>
{% endblock %}

{% macro renderOtherEvents(otherEvents) %}
    {% for event in otherEvents %}
        {{ otherEventDisplay(event, true) }}
        {% if not loop.last %}<hr class="mid-grey-tint-20-hr dash-border">{% endif %}
    {% endfor %}
{% endmacro %}

{% macro renderViewLink(attendee) %}
    {% if attendee.attendance.status === 'COMPLETED' or attendee.attendance.attendanceHistory | length %}
        <a href="{{ attendee.instance.id }}/attendance-details/{{ attendee.attendance.id }}" class="govuk-link govuk-link--no-visited-state">
            {% if attendee.attendance.editable and attendee.instance.activitySchedule.activity.attendanceRequired %}
                View or Edit
            {% else %}
                View
            {% endif %}
        </a>
    {% endif %}
{% endmacro %}
