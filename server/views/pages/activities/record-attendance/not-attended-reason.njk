{% extends "layout.njk" %}

{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/warning-text/macro.njk" import govukWarningText %}
{% from "partials/attendance/otherEvent.njk" import otherEvent %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/character-count/macro.njk" import govukCharacterCount %}

{% set pageTitle = applicationName + " - Record attendance - Not Attended Reason" %}
{% set pageId = 'not-attended-reason-page' %}
{% set jsBackLink = true %}

{% macro nestedReasonData(index, reason, prisoner, validationErrors, formResponses) %}
    {% if reason.code === "SICK" %}
       {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Should they be paid?"
            },
            idPrefix: 'notAttendedData-' + index + "-sickPay",
            name: "notAttendedData[" + index + "][sickPay]",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-sickPay"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].sickPay == YesNo.YES
                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].sickPay == YesNo.NO
                }
            ]
        }) if isPayable }}
        {{ govukCharacterCount({
            label: {
                text: "Can you provide more detail? (optional)"
            },
            id: "notAttendedData-"  + index + "-moreDetail",
            name: "notAttendedData[" + index + "][moreDetail]",
            maxlength: 100,
            classes: "govuk-!-width-one-half",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-moreDetail"),
            value: formResponses.notAttendedData[index].moreDetail
        }) }}
    {% elseif reason.captureCaseNote %}
        {{ govukWarningText({
          text: (
            prisoner.prisonerName | toTitleCase + (" won't be paid because this is" if isPayable else "'s attendance will be recorded as") + " an unacceptable absence."
            ),
            iconFallbackText: "Warning"
        }) }}
        {{ govukCharacterCount({
            label: {
                text: "Add a case note"
            },
            id: "notAttendedData-"  + index + "-caseNote",
            name: "notAttendedData[" + index + "][caseNote]",
            classes: "govuk-!-width-one-half",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-caseNote"),
            value: formResponses.notAttendedData[index].caseNote,
            maxlength: 3800
        }) }}
       {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Should this be recorded as an incentive level warning?"
            },
            idPrefix: "notAttendedData-" + index + "-incentiveLevelWarningIssued",
            name: "notAttendedData[" + index + "][incentiveLevelWarningIssued]",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-incentiveLevelWarningIssued"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].incentiveLevelWarningIssued == YesNo.YES

                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].incentiveLevelWarningIssued == YesNo.NO
                }
            ]
        }) }}
    {% elseif reason.code === 'NOT_REQUIRED' %}
        <span class="govuk-label">
            {{ prisoner.prisonerName | toTitleCase + ("will be paid and their" if isPayable else "'s") + ' attendance will be recorded as an acceptable absence.' }}
        </span>
    {% elseif reason.code === "REST" %}
       {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Should they be paid?"
            },
            idPrefix: "notAttendedData-" + index + "-restPay",
            name: "notAttendedData["  + index + "][restPay]",
            errorMessage: validationErrors | findError("notAttendedData-"  + index + "-restPay"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].restPay == YesNo.YES
                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].restPay == YesNo.NO
                }
            ]
        }) if isPayable }}
    {% elseif reason.code === 'CLASH' %}
        <div class="govuk-!-margin-bottom-4">{{ renderOtherEvents(prisoner.otherEvents) }}</div>
        <p class="govuk-body">{{ prisoner.prisonerName | toTitleCase + (" will be paid and their" if isPayable else "'s") }} attendance will be recorded as an acceptable absence.</p>
    {% elseif reason.captureOtherText %}
        {{ govukCharacterCount({
            label: {
                text: "Add an absence reason"
            },
            maxlength: 100,
            id: "notAttendedData-"  + index + "-otherAbsenceReason",
            name: "notAttendedData["  + index + "][otherAbsenceReason]",
            classes: "govuk-!-width-one-half",
            errorMessage: validationErrors | findError("notAttendedData-"  + index + "-otherAbsenceReason"),
            value: formResponses.notAttendedData[index].otherAbsenceReason
        }) }}
        {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Was the absence acceptable? If it was, they will be paid."
            },
            idPrefix: "notAttendedData-"  + index + "-otherAbsencePay",
            name: "notAttendedData["  + index + "][otherAbsencePay]",
            errorMessage: validationErrors | findError("notAttendedData-"  + index + "-otherAbsencePay"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].otherAbsencePay == YesNo.YES
                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].otherAbsencePay == YesNo.NO

                }
            ]
        }) if isPayable }}
    {% endif %}
{% endmacro %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            {% if selectedPrisoners | length > 1 %}
                <h1 class="govuk-heading-l">Select a reason why {{ selectedPrisoners | length }} people did not attend</h1>
            {% endif %}
            <form method="POST">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}" />

                {% for prisoner in selectedPrisoners %}
                    {% set hasActivityClash = false %}
                    {% for event in prisoner.otherEvents %}
                        {% if event.eventType == "ACTIVITY" %}
                            {% set hasActivityClash = true %}
                        {% endif %}
                    {% endfor %}

                    {% set prisonerIndex = loop.index0 %}

                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][prisonerNumber]" }}" value="{{ prisoner.prisonerNumber }}" />
                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][prisonerName]" }}" value="{{ prisoner.prisonerName | toTitleCase }}" />
                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][isPayable]" }}" value="{{ isPayable }}" />

                    {% set notAttendedReasonOptions = [] %}
                     {% for notAttendedReason in notAttendedReasons %}
                        {% if (notAttendedReason.code != "CLASH") or (prisoner.otherEvents|length and not hasActivityClash) %}
                            {% set conditionalOptionsHtml = nestedReasonData(prisonerIndex, notAttendedReason, prisoner, validationErrors, formResponses) | trim %}
                            {% set notAttendedReasonOptions = (notAttendedReasonOptions.push(
                                 {
                                    value: notAttendedReason.code,
                                    text: notAttendedReason.description,
                                    conditional: {
                                        html: conditionalOptionsHtml if conditionalOptionsHtml | length
                                    },
                                    checked: formResponses.notAttendedData[prisonerIndex].notAttendedReason == notAttendedReason.code
                                 }
                            ), notAttendedReasonOptions) %}
                        {% endif %}
                    {% endfor %}
                    {% if selectedPrisoners | length > 1 %}
                        <hr class="govuk-!-margin-bottom-6" />
                        <h2 class="govuk-fieldset__legend--m govuk-!-margin-bottom-0">{{ prisoner.prisonerName | toTitleCase | prisonerName }}</h2>
                        <div class="govuk-hint">{{ prisoner.prisonerNumber }}</div>
                    {% else %}
                        <h1 class="govuk-fieldset__legend--l">Select a reason why {{ prisoner.prisonerName | toTitleCase }} did not attend</h1>
                    {% endif %}
                    {{ govukRadios({
                        fieldset: {
                            legend: {
                                text: "Why did " + prisoner.prisonerName | toTitleCase + " not attend?" if selectedPrisoners | length > 1,
                                classes: "govuk-label"
                            }
                        },
                        idPrefix: "notAttendedData-"  + prisonerIndex + "-notAttendedReason",
                        name: "notAttendedData[" + prisonerIndex + "][notAttendedReason]",
                        errorMessage: validationErrors | findError("notAttendedData-"  + prisonerIndex + "-notAttendedReason"),
                        items: notAttendedReasonOptions
                    }) }}
                {% endfor %}

                {{ govukButton({
                    text: "Confirm and record attendance"
                }) }}
            </form>
        </div>
    </div>
{% endblock %}

{% macro renderOtherEvents(otherEvents) %}
    {% for event in otherEvents %}
        <div class="govuk-body govuk-!-margin-0">
            {{ event.startTime }}{{ "to " + event.endTime if event.endTime }}:
            {% if event.eventType == 'ACTIVITY' and event.eventSource =='SAA' %}
                <a href="/activities/attendance/activities/{{ event.scheduledInstanceId }}/attendance-list">{{ event.summary }}</a>
            {% elseif event.eventType == 'APPOINTMENT' and event.eventSource =='SAA' %}
                <a href="/appointments/{{ event.appointmentId }}">{{ event.summary }}</a>
                {% if event.cancelled %}
                    <div>{{ govukTag({ text: 'Cancelled Appointment', classes: 'govuk-tag--small govuk-tag--red' }) }}</div>
                {% else %}
                    <div>{{ govukTag({ text: 'Appointment', classes: 'govuk-tag--small' }) }}</div>
                {% endif %}
            {% else %}
                {{ event.summary }}
            {% endif %}
            {% if event.eventType != 'EXTERNAL_TRANSFER' and event.eventType != 'COURT_HEARING' %}
                <div class="govuk-hint govuk-!-margin-0">{{ (event.internalLocationUserDescription or event.internalLocationDescription) | capitalize }}</div>
            {% endif %}
        </div>
    {% endfor %}
{% endmacro %}
