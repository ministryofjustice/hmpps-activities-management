{% extends "layout.njk" %}

{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/warning-text/macro.njk" import govukWarningText %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/character-count/macro.njk" import govukCharacterCount %}
{% from "partials/attendance/otherEvent.njk" import otherEvent %}

{% set pageTitle = applicationName + " - Record attendance - Not Attended Reason" %}
{% set pageId = 'not-attended-reason-page' %}
{% set jsBackLink = true %}

{% macro nestedReasonData(index, reason, row, validationErrors, formResponses) %}
    {% if reason.code === "SICK" %}
       {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Should they be paid?"
            },
            idPrefix: 'notAttendedData-' + index + "-sickPay",
            name: "notAttendedData[" + index + "][sickPay]",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-sickPay"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].sickPay == YesNo.YES
                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].sickPay == YesNo.NO
                }
            ]
        }) if row.isPayable }}
        {{ govukCharacterCount({
            label: {
                text: "Can you provide more detail? (optional)"
            },
            id: "notAttendedData-"  + index + "-moreDetail",
            name: "notAttendedData[" + index + "][moreDetail]",
            maxlength: 100,
            classes: "govuk-!-width-one-half",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-moreDetail"),
            value: formResponses.notAttendedData[index].moreDetail
        }) }}
    {% elseif reason.captureCaseNote %}
        {% set warningText = (row | formatName(NameFormatStyle.firstLast, false) + (" won't be paid because this is" if row.isPayable else "'s attendance will be recorded as") + " an unacceptable absence.") %}
        {{ govukCharacterCount({
            label: {
                text: "Add a case note"
            },
            id: "notAttendedData-"  + index + "-caseNote",
            name: "notAttendedData[" + index + "][caseNote]",
            classes: "govuk-!-width-one-half",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-caseNote"),
            value: formResponses.notAttendedData[index].caseNote,
            maxlength: 3800,
            hint: {
                html: '<div class="govuk-warning-text govuk-!-margin-bottom-0"><span class="govuk-warning-text__icon" aria-hidden="true">!</span><strong class="govuk-warning-text__text"><span class="govuk-visually-hidden">Warning</span>' + warningText +'</strong></div>'
            }
        }) }}

       {{ govukRadios({
            fieldset: {
                legend: {
                    html: "Should this be recorded as an incentive level warning?",
                    classes: 'grey-text'
                }
            },
            classes: "govuk-radios--inline",
            idPrefix: "notAttendedData-" + index + "-incentiveLevelWarningIssued",
            name: "notAttendedData[" + index + "][incentiveLevelWarningIssued]",
            errorMessage: validationErrors | findError("notAttendedData-" + index + "-incentiveLevelWarningIssued"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].incentiveLevelWarningIssued == YesNo.YES

                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].incentiveLevelWarningIssued == YesNo.NO
                }
            ]
        }) }}
    {% elseif reason.code === 'NOT_REQUIRED' %}
        <span class="govuk-label">
            {{ row | formatName(NameFormatStyle.firstLast, false) + ("will be paid and their" if row.isPayable else "'s") + ' attendance will be recorded as an acceptable absence.' }}
        </span>
    {% elseif reason.code === "REST" %}
       {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Should they be paid?"
            },
            idPrefix: "notAttendedData-" + index + "-restPay",
            name: "notAttendedData["  + index + "][restPay]",
            errorMessage: validationErrors | findError("notAttendedData-"  + index + "-restPay"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].restPay == YesNo.YES
                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].restPay == YesNo.NO
                }
            ]
        }) if row.isPayable }}
    {% elseif reason.code === 'CLASH' %}
        <div class="govuk-!-margin-bottom-4">
            {% for event in row.otherEvents %}
                {{ otherEvent(event, false) }}
            {% endfor %}
        </div>
        <p class="govuk-body">{{ row | formatName(NameFormatStyle.firstLast, false) + (" will be paid and their" if row.isPayable else "'s") }} attendance will be recorded as an acceptable absence.</p>
    {% elseif reason.captureOtherText %}
        {{ govukCharacterCount({
            label: {
                text: "Add an absence reason"
            },
            maxlength: 100,
            id: "notAttendedData-"  + index + "-otherAbsenceReason",
            name: "notAttendedData["  + index + "][otherAbsenceReason]",
            classes: "govuk-!-width-one-half",
            errorMessage: validationErrors | findError("notAttendedData-"  + index + "-otherAbsenceReason"),
            value: formResponses.notAttendedData[index].otherAbsenceReason
        }) }}
        {{ govukRadios({
            classes: "govuk-radios--inline",
            hint: {
                text: "Was the absence acceptable? If it was, they will be paid."
            },
            idPrefix: "notAttendedData-"  + index + "-otherAbsencePay",
            name: "notAttendedData["  + index + "][otherAbsencePay]",
            errorMessage: validationErrors | findError("notAttendedData-"  + index + "-otherAbsencePay"),
            items: [
                {
                    value: YesNo.YES,
                    text: "Yes",
                    checked: formResponses.notAttendedData[index].otherAbsencePay == YesNo.YES
                },
                {
                    value: YesNo.NO,
                    text: "No",
                    checked: formResponses.notAttendedData[index].otherAbsencePay == YesNo.NO

                }
            ]
        }) if row.isPayable }}
    {% endif %}
{% endmacro %}

{% macro getSpanContent(reason) %}
    {# We need a span so that VoiceOver can make users aware that there's some conditionally revealed content. The extra fullstop is to make sure Voiceover reads the content as two sentences, but we don't want to show it visually #}
    {% if reason.code === 'SICK' %}
        <span class="govuk-visually-hidden">. If sick, select if they should be paid</span>
    {% elif reason.code === 'REFUSED' %}
        <span class="govuk-visually-hidden">. If refused, add a case note</span>
    {% elif reason.code === 'REST' %}
        <span class="govuk-visually-hidden">. If resting, select if they should be paid</span>
    {% elif reason.captureOtherText %}
        <span class="govuk-visually-hidden">. If the absence reason is not listed, add a reason</span>
    {% endif %}
{% endmacro %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <span class="govuk-caption-l">Record activity attendance</span>
            {% set prisonerIndex = 0 %}
            <h1 class="govuk-heading-l">Select why {{ rows[prisonerIndex] | formatName(NameFormatStyle.firstLast, false) }} did not attend {{ rows[prisonerIndex].activityName }} - {{ rows[prisonerIndex].session }}</h1>
            <form method="POST">
                <input type="hidden" name="_csrf" value="{{ csrfToken }}" />

                {% for row in rows %}
                    {% set hasActivityClash = false %}
                    {% for event in row.otherEvents %}
                        {% if event.eventType == "ACTIVITY" %}
                            {% set hasActivityClash = true %}
                        {% endif %}
                    {% endfor %}

                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][prisonerNumber]" }}" value="{{ row.prisonerNumber }}" />
                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][prisonerName]" }}" value="{{ row | formatName(NameFormatStyle.firstLast, false) }}" />
                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][instanceId]" }}" value="{{ row.instanceId }}" />
                    <input type="hidden" name="{{ "notAttendedData[" + prisonerIndex + "][isPayable]" }}" value="{{ row.isPayable }}" />

                    {% set notAttendedReasonOptions = [] %}
                     {% for notAttendedReason in notAttendedReasons %}
                        {% if (notAttendedReason.code != "CLASH") or (row.otherEvents|length and not hasActivityClash) %}
                            {% set conditionalOptionsHtml = nestedReasonData(prisonerIndex, notAttendedReason, row, validationErrors, formResponses) | trim %}
                            {% set conditionalRevealExplanationText = getSpanContent(notAttendedReason) %}
                            {% set notAttendedReasonOptions = (notAttendedReasonOptions.push(
                                 {
                                    value: notAttendedReason.code,
                                    html: notAttendedReason.description + conditionalRevealExplanationText,
                                    conditional: {
                                        html: conditionalOptionsHtml if conditionalOptionsHtml | length
                                    },
                                    checked: formResponses.notAttendedData[prisonerIndex].notAttendedReason == notAttendedReason.code
                                 }
                            ), notAttendedReasonOptions) %}
                        {% endif %}
                    {% endfor %}

                    {{ govukRadios({
                        idPrefix: "notAttendedData-"  + prisonerIndex + "-notAttendedReason",
                        name: "notAttendedData[" + prisonerIndex + "][notAttendedReason]",
                        errorMessage: validationErrors | findError("notAttendedData-"  + prisonerIndex + "-notAttendedReason"),
                        items: notAttendedReasonOptions
                    }) }}
                {% endfor %}

                {{ govukButton({
                    text: "Confirm and record attendance",
                    preventDoubleClick: true
                }) }}
            </form>
        </div>
    </div>
{% endblock %}
