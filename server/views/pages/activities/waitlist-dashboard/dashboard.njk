{% extends "layout.njk" %}

{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "moj/components/pagination/macro.njk" import mojPagination %}
{% from "moj/components/filter/macro.njk" import mojFilter %}
{% from "components/sticky-select.njk" import stickySelect %}
{% from 'components/hmppsDatePicker.njk' import hmppsDatePicker %}
{% from "partials/showProfileLink.njk" import showProfileLink %}
{% from "partials/activities/waitlist-status-badge.njk" import waitlistStatusBadge %}
{% from "partials/statusBasedCellLocation.njk" import statusBasedCellLocation %}

{% set pageTitle = "Waitlist - Dashboard" %}
{% set jsBackLink = true %}

{% set editable = 'ROLE_ACTIVITY_HUB' in user.roles %}

{% block content %}
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h1 class="govuk-heading-xl govuk-!-margin-bottom-4">Waitlist dashboard</h1>
                {% if editable %}
                    <p class="govuk-body">Select an application to view or edit it, and to change the status.</p>
                    <p class="govuk-body">Where an application is ‘Approved’, select it to allocate the prisoner to the activity.</p>
                {% else %}
                    <p class="govuk-body">Select an application to view it.</p>
                {% endif %}
            </p>
        </div>
    </div>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            {% set filterOptionsHtml %}
                {{ govukInput({
                    id: 'query',
                    name: 'query',
                    value: query,
                    label: {
                        text: "Search by name or prison number",
                        classes: "govuk-label--s"
                    }
                }) }}

                {{ hmppsDatePicker({
                    id: 'dateFrom',
                    name: 'dateFrom',
                    label: {
                        text: "Application date from",
                        classes: "govuk-label--s"
                    },
                    errorMessage: validationErrors | findError('dateFrom'),
                    value: formResponses.dateFrom or (filters.applicationDateFrom | isoDateToDatePickerDate)
                }) }}

                {{ hmppsDatePicker({
                    id: 'dateTo',
                    name: 'dateTo',
                    label: {
                        text: "Application date to",
                        classes: "govuk-label--s"
                    },
                    errorMessage: validationErrors | findError('dateTo'),
                    value: formResponses.applicationDateTo or (filters.applicationDateTo | isoDateToDatePickerDate)
                }) }}

                {% set activityOptions = [{ value: "", text: "" }] %}
                {% for activity in activities %}
                    {% set activityOptions = (activityOptions.push({
                        text: activity.activityName,
                        value: activity.id
                    }), activityOptions) %}
                {% endfor %}
                {{ govukSelect({
                    id: "activity",
                    name: "activity",
                    label: {
                        text: "Activity",
                        classes: "govuk-label--s"
                    },
                    errorMessage: validationErrors | findError('activity'),
                    items: activityOptions,
                    value: filters.activityId
                }) }}

                {% set statusFilters = [] %}
                {% for name, status in WaitingListStatus %}
                    {% set statusFilters = (statusFilters.push({
                        value: status,
                        text: status | toTitleCase,
                        checked: status in filters.status
                    }), statusFilters) %}
                {% endfor %}
                {{ govukCheckboxes({
                    idPrefix: 'status',
                    name: 'status',
                    classes: "govuk-checkboxes--small",
                    fieldset: {
                        legend: {
                            text: 'Status',
                            classes: 'govuk-fieldset__legend--s'
                        }
                    },
                    errorMessage: validationErrors | findError('status'),
                    items: statusFilters
                }) }}

                <button class="govuk-button govuk-!-margin-top-7 govuk-!-margin-bottom-0" data-module="govuk-button">
                    Apply filters
                </button>
            {% endset %}

            <div class="moj-filter-layout govuk-!-margin-bottom-6" data-module="activities-list-filter" data-filter-start-shown="true">
                <div class="moj-filter-layout__filter moj-filter-layout__filter--small govuk-!-display-none-print">
                    <form method="POST">
                        <input type="hidden" name="_csrf" value="{{ csrfToken }}"/>
                        {{ mojFilter({
                            heading: {
                                text: 'Filter'
                            },
                            optionsHtml: filterOptionsHtml
                        }) }}
                    </form>
                </div>
                <div class="moj-filter-layout__content">
                    <div class="moj-action-bar govuk-!-display-none-print">
                        <div class="moj-action-bar__filter moj-action-bar__filter--no-actions"></div>
                    </div>

                    <form method="POST">
                    <input type="hidden" name="_csrf" value="{{ csrfToken }}" />
                    <h2 class="govuk-heading-s govuk-!-margin-0">{{ pageInfo.totalElements }} waitlist application{{ "s" if pageInfo.totalElements | length != 1 }}</h2>
                    {% set rows = [] %}
                    {% for application in applications %}
                        {% set rows = (rows.push({
                            visuallyHiddenText: 'Select ' + application.prisoner | fullName,
                            value: application.id,
                            selectable: true,
                            forbiddenActionId: 'waitlist-action-1' if application.status != 'APPROVED',
                            items: [
                                {
                                    html: showProfileLink({
                                        name: application.prisoner | fullName,
                                        prisonerNumber: application.prisoner.prisonerNumber,
                                        cellLocation: statusBasedCellLocation(application.prisoner.cellLocation, application.prisoner.status, application.prisoner.prisonId == user.activeCaseLoadId),
                                        inCaseLoad: application.prisoner.prisonId == user.activeCaseLoadId
                                    })
                                },
                                {
                                    text: application.activity.activityName
                                },
                                {
                                    text: application.requestedDate | formatDate('d MMMM yyyy')
                                },
                                {
                                    text: application.requestedBy
                                },
                                {
                                    html: waitlistStatusBadge(application.status)
                                }
                            ]
                        }), rows) %}
                    {% endfor %}

                    {{ stickySelect({
                        idPrefix: 'waitlist',
                        caption: "Waitlist applications",
                        captionClasses: "govuk-visually-hidden",
                        type: 'radio',
                        fixed: true,
                        name: 'selectedWaitlistApplication',
                        head: [
                            {
                                text: "Name"
                            },
                            {
                                text: "Activity"
                            },
                            {
                                text: "Request date"
                            },
                            {
                                text: "Requester"
                            },
                            {
                                text: "Status"
                            }
                        ],
                        rows: rows,
                        actions: [
                            {
                                text: 'View' + (' or edit' if editable) + ' application',
                                formAction: 'waitlist-dashboard/view-application'
                            },
                            {
                                text: 'Allocate',
                                formAction: 'waitlist-dashboard/allocate'
                            } if editable
                        ],
                        itemsDescription: 'application',
                        itemsDescriptionPlural: 'applications',
                        pagination: {
                            previous: {
                                title: 'Previous page',
                                label: pageInfo.pageNumber + ' of ' + pageInfo.totalPages,
                                href: '/page/' + (pageInfo.pageNumber - 1) + '?id=candidates-tab'
                            } if not pageInfo.first,
                            next: {
                                title: 'Next page',
                                label: (pageInfo.pageNumber + 2) + ' of ' + pageInfo.totalPages,
                                href: '/page/' + (pageInfo.pageNumber + 1) + '?id=candidates-tab'
                            } if not pageInfo.last
                        }
                    }) }}
                    <input type="hidden" name="dashboardUrl" value="{{ session.req.originalUrl }}" />
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block meta %}
    <meta name="autocompleteElements" content="activity"/>
{% endblock %}
