/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users/{username}/unlock-user': {
    /** Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    put: operations['unlockUser']
  }
  '/users/{username}/lock-user': {
    /** Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    put: operations['lockUser']
  }
  '/users/{username}/default-caseload/{defaultCaseloadId}': {
    /** Sets the default caseload. Caseload must already be present. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    put: operations['setDefaultCaseload']
  }
  '/users/{username}/change-password': {
    /** Change password of user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    put: operations['changePassword']
  }
  '/users/{username}/change-name': {
    /** Change staff name of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
    put: operations['changeName']
  }
  '/users/{username}/change-email': {
    /** Change email of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
    put: operations['changeEmail']
  }
  '/roles/{code}': {
    /** Information on a specific role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN */
    get: operations['getRoleDetails']
    /** Updates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN */
    put: operations['updateRole']
  }
  '/users/{username}/roles': {
    /** Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    get: operations['getUserRoles']
    /** Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    post: operations['addRoles']
  }
  '/users/{username}/roles/{roleCode}': {
    /** Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    post: operations['addRole']
    /** The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    delete: operations['removeRole']
  }
  '/users/{username}/caseloads': {
    /** Caseloads for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    get: operations['getUserCaseloads']
    /** Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
    post: operations['addCaseloads']
  }
  '/users/{username}/caseloads/{caseloadId}': {
    /** Adds a caseload to a user, caseload must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
    post: operations['addCaseload']
    /** The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
    delete: operations['removeCaseload']
  }
  '/users/{username}/authenticate': {
    post: operations['authenticate']
  }
  '/users/user': {
    /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    get: operations['findUsersByEmailAddress']
    /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    post: operations['findUsersByEmailAddressAndUsernames']
  }
  '/users/remove-roles/{roleCode}': {
    /** If the user does not have the role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are removed on the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    post: operations['bulkRemoveRoles']
  }
  '/users/local-admin-account': {
    /** Creates local admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER */
    post: operations['createLocalAdminUser']
  }
  '/users/link-local-admin-account/{linkedUsername}': {
    /** Can only be linked to an general account. Can only be linked to an account that doesn't already have one admin account. Requires role ROLE_CREATE_USER */
    post: operations['linkLocalAdminAccount']
  }
  '/users/link-general-account/{linkedUsername}': {
    /** Can only be linked to an admin account. Can only be linked to an account that doesn't already have one general account. Requires role ROLE_CREATE_USER */
    post: operations['linkGeneralAccount']
  }
  '/users/link-admin-account/{linkedUsername}': {
    /** Can only be linked to an general account. Can only be linked to an account that doesn't already have one Admin account. Requires role ROLE_CREATE_USER */
    post: operations['linkAdminAccount']
  }
  '/users/general-account': {
    /** Creates general user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER */
    post: operations['createGeneralUser']
  }
  '/users/admin-account': {
    /** Creates admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER */
    post: operations['createAdminUser']
  }
  '/users/add-roles/{roleCode}': {
    /** If the user has this role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are added to the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    post: operations['bulkAddRoles']
  }
  '/roles': {
    /** Information on a list of roles. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN, ROLE_MAINTAIN_ACCESS_ROLES or ROLES_ADMIN */
    get: operations['getAllRoles']
    /** Creates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN */
    post: operations['createRole']
  }
  '/users': {
    /** Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff. */
    get: operations['getUsers']
  }
  '/users/{username}': {
    /** Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    get: operations['getUserDetails']
  }
  '/users/staff': {
    /** Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH */
    get: operations['findUsersByFirstAndLastNames']
  }
  '/users/staff/{staffId}': {
    /** Will display general and admin user account if setup.  Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
    get: operations['getUserDetailsByStaffId']
  }
  '/users/emails': {
    /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
    get: operations['findUsersAndEmails']
  }
  '/users/download': {
    get: operations['downloadUsersByFilters']
  }
  '/reference-data/caseloads': {
    /** Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with */
    get: operations['getCaseload']
  }
  '/me': {
    /** Information on a specific user. */
    get: operations['getMyUserDetails']
  }
  '/me/roles': {
    /** Roles for a specific user in context */
    get: operations['getMyRoles']
  }
  '/me/caseloads': {
    /** Caseloads for the current user */
    get: operations['getMyCaseloads']
  }
}

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
    }
    /** @description Caseloads available for this user */
    PrisonCaseload: {
      /**
       * @description identify for caseload
       * @example WWI
       */
      id: string
      /**
       * @description name of caseload, typically prison name
       * @example WANDSWORTH (HMP)
       */
      name: string
    }
    /** @description User & Caseload Information */
    UserCaseloadDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description Caseloads available for this user */
      caseloads: components['schemas']['PrisonCaseload'][]
    }
    /** @description Staff Information */
    StaffDetail: {
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Status of staff account
       * @example Smith
       */
      status: string
      /**
       * @description Email addresses of staff
       * @example test@test.com
       */
      primaryEmail?: string
      generalAccount?: components['schemas']['UserCaseloadDetail']
      adminAccount?: components['schemas']['UserCaseloadDetail']
    }
    /** @description Role update */
    UpdateRoleRequest: {
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name?: string
      /**
       * Format: int32
       * @description Display Sequence
       * @example 99
       */
      sequence?: number
      /**
       * @description Parent Role Code
       * @example LICENCE_ADMIN
       */
      parentRoleCode?: string
      /**
       * @description Role Type
       * @example APP
       * @enum {string}
       */
      type?: 'APP' | 'INST' | 'COMM'
      /**
       * @description adminRoleOnly
       * @example true
       */
      adminRoleOnly?: boolean
    }
    /** @description Role Information */
    RoleDetail: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      code: string
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name: string
      /**
       * Format: int32
       * @description The listing order
       * @default 1
       * @example 1
       */
      sequence: number
      /**
       * @description Role Type
       * @default APP
       * @example APP
       * @enum {string}
       */
      type?: 'APP' | 'INST' | 'COMM'
      /**
       * @description If the role is for admin users only
       * @default false
       * @example true
       */
      adminRoleOnly: boolean
      parentRole?: components['schemas']['RoleDetail']
    }
    /** @description Roles in caseload information */
    CaseloadRoleDetail: {
      caseload: components['schemas']['PrisonCaseload']
      /** @description NOMIS Roles assigned to this user */
      roles: components['schemas']['RoleDetail'][]
    }
    /** @description User & Role Information */
    UserRoleDetail: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Indicates that the user is active
       * @example true
       */
      active: boolean
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      activeCaseload?: components['schemas']['PrisonCaseload']
      /** @description DPS Roles assigned to this user */
      dpsRoles: components['schemas']['RoleDetail'][]
      /** @description NOMIS Roles assigned to this user per caseload */
      nomisRoles?: components['schemas']['CaseloadRoleDetail'][]
    }
    /** @description Authentication Details */
    Authentication: {
      /**
       * @description Password
       * @example password123456
       */
      password: string
    }
    /** @description User Information */
    UserDetail: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Smith
       */
      lastName: string
      /**
       * @description Active Caseload of the user
       * @example BXI
       */
      activeCaseloadId?: string
      /**
       * @description Status of the user
       * @example OPEN
       * @enum {string}
       */
      accountStatus?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      /**
       * @description Type of user account
       * @example GENERAL
       * @enum {string}
       */
      accountType: 'GENERAL' | 'ADMIN'
      /**
       * @description Email addresses of user
       * @example test@test.com
       */
      primaryEmail?: string
      /** @description List of associated DPS Role Codes */
      dpsRoleCodes: string[]
      /** @description Account is not locked */
      accountNonLocked?: boolean
      /** @description Credentials are not expired flag */
      credentialsNonExpired?: boolean
      /** @description User is enabled flag */
      enabled: boolean
      /** @description User is admin flag */
      admin?: boolean
      /** @description User is active flag */
      active: boolean
      /**
       * @description Staff Status
       * @example ACTIVE
       */
      staffStatus?: string
    }
    /** @description Local Admin User Information creation */
    CreateLocalAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description First name of the user, required if linkedUsername is not set
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user, required if linkedUsername is not set
       * @example Smith
       */
      lastName: string
      /**
       * @description Email Address, required if linkedUsername is not set
       * @example test@justice.gov.uk
       */
      email: string
      /**
       * @description Default local admin group (prison) to manage users
       * @example MDI
       */
      localAdminGroup: string
    }
    /** @description Linking local admin account user creation */
    CreateLinkedLocalAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Default local admin group (prison) to manage users
       * @example MDI
       */
      localAdminGroup: string
    }
    /** @description Linking general account user creation */
    CreateLinkedGeneralUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description Default caseload (a.k.a Prison ID), not required for admin accounts
       * @example BXI
       */
      defaultCaseloadId: string
    }
    /** @description Linking admin account user creation */
    CreateLinkedAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
    }
    /** @description General User Information creation */
    CreateGeneralUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description First name of the user, required if linkedUsername is not set
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user, required if linkedUsername is not set
       * @example Smith
       */
      lastName: string
      /**
       * @description Default caseload (a.k.a Prison ID)
       * @example BXI
       */
      defaultCaseloadId: string
      /**
       * @description Email Address, required if linkedUsername is not set
       * @example test@justice.gov.uk
       */
      email: string
    }
    /** @description Admin User Information creation */
    CreateAdminUserRequest: {
      /**
       * @description Username
       * @example TESTUSER1
       */
      username: string
      /**
       * @description First name of the user, required if linkedUsername is not set
       * @example John
       */
      firstName: string
      /**
       * @description Last name of the user, required if linkedUsername is not set
       * @example Smith
       */
      lastName: string
      /**
       * @description Email Address, required if linkedUsername is not set
       * @example test@justice.gov.uk
       */
      email: string
    }
    /** @description Role Information creation */
    CreateRoleRequest: {
      /**
       * @description Role Code
       * @example GLOBAL_SEARCH
       */
      code: string
      /**
       * @description Role Name
       * @example Global Search Role
       */
      name: string
      /**
       * Format: int32
       * @description Display Sequence
       * @default 1
       * @example 99
       */
      sequence: number
      /**
       * @description Parent Role Code
       * @example LICENCE_ADMIN
       */
      parentRoleCode?: string
      /**
       * @description Role Type
       * @default APP
       * @example APP
       * @enum {string}
       */
      type: 'APP' | 'INST' | 'COMM'
      /**
       * @description Role Code
       * @default false
       * @example true
       */
      adminRoleOnly: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PageUserSummaryWithEmail: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['UserSummaryWithEmail'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      unpaged?: boolean
      /** Format: int32 */
      pageNumber?: number
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Summary User Information with Email Address */
    UserSummaryWithEmail: {
      /**
       * @description Username
       * @example testuser1
       */
      username: string
      /**
       * Format: int64
       * @description Staff ID
       * @example 324323
       */
      staffId: number
      /**
       * @description First name of the user
       * @example Mustafa
       */
      firstName: string
      /**
       * @description Last name of the user
       * @example Usmani
       */
      lastName: string
      /**
       * @description Account status indicator
       * @example true
       */
      active: boolean
      /**
       * @description Account status
       * @example OPEN
       * @enum {string}
       */
      status?:
        | 'OPEN'
        | 'EXPIRED'
        | 'EXPIRED_GRACE'
        | 'LOCKED_TIMED'
        | 'LOCKED'
        | 'EXPIRED_LOCKED_TIMED'
        | 'EXPIRED_GRACE_LOCKED_TIMED'
        | 'EXPIRED_LOCKED'
        | 'EXPIRED_GRACE_LOCKED'
      /**
       * @description Indicates that an account is locked.
       * @example false
       */
      locked: boolean
      /**
       * @description Indicates that an account is expired
       * @example false
       */
      expired: boolean
      activeCaseload?: components['schemas']['PrisonCaseload']
      /**
       * Format: int32
       * @description The count of DPS roles allocated to this staff member
       * @example 12
       */
      dpsRoleCount: number
      /**
       * @description Primary email address of user - normally justice.gov.uk one if available otherwise first one in list
       * @example joe.bloggs@justice.gov.uk
       */
      email?: string
      /**
       * @description Staff status
       * @example ACTIVE
       */
      staffStatus?: string
    }
    UserAndEmail: {
      username: string
      email?: string
    }
  }
}

export interface operations {
  /** Unlocks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  unlockUser: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User account unlocked */
      200: unknown
      /** Incorrect request to unlock user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to unlock a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Locks the user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  lockUser: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User account locked */
      200: unknown
      /** Incorrect request to lock user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to lock a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Sets the default caseload. Caseload must already be present. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  setDefaultCaseload: {
    parameters: {
      path: {
        /** Username to default caseload */
        username: string
        /** Default caseload Id */
        defaultCaseloadId: string
      }
    }
    responses: {
      /** User information with active caseload details */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** Incorrect request to set a default caseload on a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to set a default caseload on a user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Change password of user account. Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  changePassword: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User account password changed */
      200: unknown
      /** Incorrect request to change password of user. Some specific responses returns a different errorCode that can be checked by the client */
      400: {
        content: {
          'application/json': unknown
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to change the password a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
  }
  /** Change staff name of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
  changeName: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User account name changed */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Incorrect request to change name of user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to change the name a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
  }
  /** Change email of user account. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
  changeEmail: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User account email changed */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Incorrect request to change email of user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to change the email a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
  }
  /** Information on a specific role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN */
  getRoleDetails: {
    parameters: {
      path: {
        /** Role Code */
        code: string
      }
    }
    responses: {
      /** Role Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['RoleDetail']
        }
      }
      /** Incorrect request to get role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN */
  updateRole: {
    parameters: {
      path: {
        /** Role Code */
        code: string
      }
    }
    responses: {
      /** Role Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['RoleDetail']
        }
      }
      /** Incorrect request to update role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to update a role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleRequest']
      }
    }
  }
  /** Roles for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  getUserRoles: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
      query: {
        /** Include NOMIS roles */
        'include-nomis-roles'?: string
      }
    }
    responses: {
      /** User role list */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get roles for this user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  addRoles: {
    parameters: {
      path: {
        /** Username of the account to add roles */
        username: string
      }
      query: {
        /** Caseload Id */
        caseloadId?: string
      }
    }
    responses: {
      /** User information with role details */
      201: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** Incorrect request to add a role to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to add a role to this account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
  }
  /** Adds a role to a user, user must have caseload (if specified). Default caseload is DPS caseload (NWEB).  Cannot add an existing role to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  addRole: {
    parameters: {
      path: {
        /** Username of the account to add role */
        username: string
        /** Role Code */
        roleCode: string
      }
      query: {
        /** Caseload Id */
        caseloadId?: string
      }
    }
    responses: {
      /** User information with role details */
      201: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** Incorrect request to add a role to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to add a role to this account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The user must already have the role to be removed. Default role caseload is a DPS role unless specified. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  removeRole: {
    parameters: {
      path: {
        /** Username of the account to remove role */
        username: string
        /** Role Code */
        roleCode: string
      }
      query: {
        /** Caseload Id */
        caseloadId?: string
      }
    }
    responses: {
      /** User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** Incorrect request to remove a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to remove a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Caseloads for a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  getUserCaseloads: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User caseload list */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a caseload for a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Adds caseloads to a user, caseloads must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
  addCaseloads: {
    parameters: {
      path: {
        /** Username of the account to add caseloads */
        username: string
      }
    }
    responses: {
      /** User information with caseload details */
      201: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** Incorrect request to add caseloads to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to add caseloads to account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Adds a caseload to a user, caseload must exist. Cannot add an existing caseload to the same user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
  addCaseload: {
    parameters: {
      path: {
        /** Username of the account to add caseload */
        username: string
        /** Caseload Id */
        caseloadId: string
      }
    }
    responses: {
      /** User information with caseload details */
      201: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** Incorrect request to add a caseload to a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to add a caseload to account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The user must already have the caseload to be removed. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN */
  removeCaseload: {
    parameters: {
      path: {
        /** Username to remove caseload from */
        username: string
        /** Caseload ID to remove from this user */
        caseloadId: string
      }
    }
    responses: {
      /** User information with caseload details */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** Incorrect request to remove a caseload from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to remove a caseload this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  authenticate: {
    parameters: {
      path: {
        username: string
      }
    }
    responses: {
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Authentication failed. Either no access token was provided or the username / password combination is incorrect */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Authentication']
      }
    }
  }
  /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  findUsersByEmailAddress: {
    parameters: {
      query: {
        /** The email to match. Case insensitive */
        email: string
      }
    }
    responses: {
      /** List of matching users */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail'][]
        }
      }
    }
  }
  /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  findUsersByEmailAddressAndUsernames: {
    parameters: {
      query: {
        /** The email to match. Case insensitive */
        email: string
      }
    }
    responses: {
      /** List of matching users */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** If the user does not have the role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are removed on the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  bulkRemoveRoles: {
    parameters: {
      path: {
        /** Role Code */
        roleCode: string
      }
    }
    responses: {
      /** User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail'][]
        }
      }
      /** Incorrect request to remove a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to remove a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
  }
  /** Creates local admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER */
  createLocalAdminUser: {
    responses: {
      /** Local Admin user information returned */
      201: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Incorrect request to create user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to create a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLocalAdminUserRequest']
      }
    }
  }
  /** Can only be linked to an general account. Can only be linked to an account that doesn't already have one admin account. Requires role ROLE_CREATE_USER */
  linkLocalAdminAccount: {
    parameters: {
      path: {
        /** Attach account to an existing general user account */
        linkedUsername: string
      }
    }
    responses: {
      /** Staff local admin account information returned */
      201: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Incorrect request to link local admin account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to link a local admin account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedLocalAdminUserRequest']
      }
    }
  }
  /** Can only be linked to an admin account. Can only be linked to an account that doesn't already have one general account. Requires role ROLE_CREATE_USER */
  linkGeneralAccount: {
    parameters: {
      path: {
        /** Attach account to an existing admin user account */
        linkedUsername: string
      }
    }
    responses: {
      /** Staff account information returned */
      201: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Incorrect request to link general account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to link a general account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedGeneralUserRequest']
      }
    }
  }
  /** Can only be linked to an general account. Can only be linked to an account that doesn't already have one Admin account. Requires role ROLE_CREATE_USER */
  linkAdminAccount: {
    parameters: {
      path: {
        /** Attach account to an existing general account */
        linkedUsername: string
      }
    }
    responses: {
      /** Staff account information returned */
      201: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Incorrect request to link admin account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to link an admin account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLinkedAdminUserRequest']
      }
    }
  }
  /** Creates general user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER */
  createGeneralUser: {
    responses: {
      /** General user information returned */
      201: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Incorrect request to create user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to create a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGeneralUserRequest']
      }
    }
  }
  /** Creates admin user account, oracle schema and staff user information. Requires role ROLE_CREATE_USER */
  createAdminUser: {
    responses: {
      /** Admin user account information returned */
      201: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Incorrect request to create user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to create a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAdminUserRequest']
      }
    }
  }
  /** If the user has this role already it is ignored. Any users not found will also be ignored but will not be returned in the response. Only DPS roles are added to the DPS caseload (NWEB). Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  bulkAddRoles: {
    parameters: {
      path: {
        /** Role Code */
        roleCode: string
      }
    }
    responses: {
      /** User information with role details */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail'][]
        }
      }
      /** Incorrect request to add a role from a user account */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to add a role this user account */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
  }
  /** Information on a list of roles. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN, ROLE_MAINTAIN_ACCESS_ROLES or ROLES_ADMIN */
  getAllRoles: {
    parameters: {
      query: {
        /** Get all roles, which includes both DPS and NOMIS roles */
        'all-roles'?: boolean
        /** Include DPS roles that can only be allocated by Central Admin */
        'admin-roles'?: boolean
      }
    }
    responses: {
      /** Role Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['RoleDetail'][]
        }
      }
      /** Incorrect request to get role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a list of roles */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates a role. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLES_ADMIN */
  createRole: {
    responses: {
      /** Role Information Returned */
      201: {
        content: {
          'application/json': components['schemas']['RoleDetail']
        }
      }
      /** Incorrect request to create role information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to create a role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleRequest']
      }
    }
  }
  /** Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES. <br/>Get all users with filter.<br/> For local administrators this will implicitly filter users in the prisons they administer, therefore username is expected in the authorisation token. <br/>For users with role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN this allows access to all staff. */
  getUsers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by name (first name and/or last name in any order), username or email address. */
        nameFilter?: string
        /** Filter will match users that have all DPS role specified */
        accessRoles?: string[]
        /** Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates */
        nomisRole?: string
        /** Limit to active / inactive / show all users */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /** Filter results by user's currently active caseload i.e. the one they have currently selected */
        activeCaseload?: string
        /** Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not */
        caseload?: string
        /** Returns result inclusive of selected roles */
        inclusiveRoles?: boolean
        /** Returns all active LSAs */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** Pageable list of user summaries */
      200: {
        content: {
          'application/json': components['schemas']['PageUserSummaryWithEmail']
        }
      }
      /** Incorrect filter supplied */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Information on a specific user. Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES or ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  getUserDetails: {
    parameters: {
      path: {
        /** Username */
        username: string
      }
    }
    responses: {
      /** User Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Incorrect request to get user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role ROLE_USE_OF_FORCE or ROLE_STAFF_SEARCH */
  findUsersByFirstAndLastNames: {
    parameters: {
      query: {
        /** The first name to match. Case insensitive. */
        firstName: string
        /** The last name to match. Case insensitive */
        lastName: string
      }
    }
    responses: {
      /** List of matching users */
      200: {
        content: {
          'application/json': components['schemas']['UserSummaryWithEmail'][]
        }
      }
    }
  }
  /** Will display general and admin user account if setup.  Requires role ROLE_MAINTAIN_ACCESS_ROLES_ADMIN or ROLE_MAINTAIN_ACCESS_ROLES */
  getUserDetailsByStaffId: {
    parameters: {
      path: {
        /** Staff ID */
        staffId: string
      }
    }
    responses: {
      /** Staff Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Incorrect request to get staff information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a staff user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role ROLE_MANAGE_NOMIS_USER_ACCOUNT */
  findUsersAndEmails: {
    responses: {
      /** List of usernames and their email addresses */
      200: {
        content: {
          'application/json': components['schemas']['UserAndEmail'][]
        }
      }
    }
  }
  downloadUsersByFilters: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by name (first name and/or last name in any order), username or email address. */
        nameFilter?: string
        /** Filter will match users that have all DPS role specified */
        accessRoles?: string[]
        /** Filter will match users that have the NOMIS role specified, should be used with a caseloadId or will get duplicates */
        nomisRole?: string
        /** Limit to active / inactive / show all users */
        status?: 'ALL' | 'ACTIVE' | 'INACTIVE'
        /** Filter results by user's currently active caseload i.e. the one they have currently selected */
        activeCaseload?: string
        /** Filter results to include only those users that have access to the specified caseload (irrespective of whether it is currently active or not */
        caseload?: string
        /** Returns result inclusive of selected roles */
        inclusiveRoles?: boolean
        /** Returns all active LSAs */
        showOnlyLSAs?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserSummaryWithEmail'][]
        }
      }
    }
  }
  /** Retrieves all the current active general caseloads, these are effectively prisons that staff can be associated with */
  getCaseload: {
    responses: {
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Information on a specific user. */
  getMyUserDetails: {
    responses: {
      /** User Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Incorrect request to get user information */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Roles for a specific user in context */
  getMyRoles: {
    parameters: {
      query: {
        /** Include NOMIS roles */
        'include-nomis-roles'?: string
      }
    }
    responses: {
      /** User role list */
      200: {
        content: {
          'application/json': components['schemas']['UserRoleDetail']
        }
      }
      /** Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get roles for this user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Caseloads for the current user */
  getMyCaseloads: {
    responses: {
      /** User caseload list */
      200: {
        content: {
          'application/json': components['schemas']['UserCaseloadDetail']
        }
      }
      /** Incorrect request to get caseloads for a user */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to get a caseload for a user */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
