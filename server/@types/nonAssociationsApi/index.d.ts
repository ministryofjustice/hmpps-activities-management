/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/{id}/reopen': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Re-open a non-association
     * @description Requires REOPEN_NON_ASSOCIATIONS role with write scope.
     *     **Please note**: This is a special endpoint which should NOT be exposed to regular users, they should instead create a new non-association.
     */
    put: operations['reopenNonAssociation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/{id}/close': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Close a non-association
     * @description Requires WRITE_NON_ASSOCIATIONS role with write scope.
     */
    put: operations['closeNonAssociation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get non-associations, filtered and paged
     * @description Requires READ_NON_ASSOCIATIONS role
     */
    get: operations['getNonAssociations']
    put?: never
    /**
     * Creates a non-association between two prisoners.
     * @description Requires WRITE_NON_ASSOCIATIONS role with write scope.
     */
    post: operations['createNonAssociation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/{id}/delete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete a non-association
     * @description Requires DELETE_NON_ASSOCIATIONS role with write scope.
     *     **Please note**: This is a special endpoint which should NOT be exposed to regular users, they should instead close non-associations.
     */
    post: operations['deleteNonAssociation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/involving': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get non-associations involving any of the given prisoners. Either person in the non-association must be in the provided list.
     * @description Requires READ_NON_ASSOCIATIONS role.
     */
    post: operations['getNonAssociationsInvolvingPrisoners']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/between': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get non-associations between two or more prisoners by prisoner number. Both people in the non-associations must be in the provided list.
     * @description Requires READ_NON_ASSOCIATIONS role.
     */
    post: operations['getNonAssociationsBetweenPrisoners']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a non-association between two prisoners by ID.
     * @description Requires READ_NON_ASSOCIATIONS role.
     */
    get: operations['getNonAssociation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Partial update of a non-association by ID.
     * @description Requires WRITE_NON_ASSOCIATIONS role with write scope.
     */
    patch: operations['patchNonAssociation']
    trace?: never
  }
  '/subject-access-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Provides content for a prisoner to satisfy the needs of a subject access request on their behalf
     * @description Requires role SAR_DATA_ACCESS or additional role as specified by hmpps.sar.additionalAccessRole configuration.
     */
    get: operations['getSarContentByReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiDataset']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/{fieldId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiDynamicFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/tables/{tableId}/result': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the resulting rows of the executed statement in a paginated fashion which has been stored in a dedicated table. */
    get: operations['getQueryExecutionResult']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/tables/{tableId}/result/summary/{summaryId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns a summary of a request, which has been stored in a dedicated table. */
    get: operations['getSummaryQueryExecutionResult']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/statements/{statementId}/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the status of the statement execution based on the statement ID provided.The following status values can be returned:
     *     ABORTED - The query run was stopped by the user.
     *     ALL - A status value that includes all query statuses. This value can be used to filter results.
     *     FAILED - The query run failed.
     *     FINISHED - The query has finished running.
     *     PICKED - The query has been chosen to be run.
     *     STARTED - The query run has started.
     *     SUBMITTED - The query was submitted, but not yet processed.
     *     Note: When the status is FAILED the error field of the response will be populated.ResultRows is the number of rows returned from the SQL statement. A -1 indicates the value is null.ResultSize is the size in bytes of the returned results. A -1 indicates the value is null.
     *     For Athena:
     *     Athena automatically retries your queries in cases of certain transient errors. As a result, you may see the query state transition from STARTED or FAILED to SUBMITTED.
     *      */
    get: operations['getQueryExecutionStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query. */
    get: operations['configuredApiCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/metrics/{metricId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the metric dataset for the given data product definition ID. */
    get: operations['configuredApiDataset_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/report/tables/{tableId}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Returns the number of rows of the table which contains the result of a previously executed query. */
    get: operations['getExternalTableRowCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonerNumber}/non-associations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get non-associations by prisoner number
     * @description Requires READ_NON_ASSOCIATIONS role.
     */
    get: operations['getPrisonerNonAssociations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/legacy/api/non-associations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a non-association between two prisoners by ID in NOMIS/Prison API format
     * @description Requires NON_ASSOCIATIONS_SYNC role.
     */
    get: operations['getLegacyById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets summaries of all report definitions */
    get: operations['definitions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions/{reportId}/{variantId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets report definition containing a single variant. */
    get: operations['definition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions/{dataProductDefinitionId}/metrics/{metricId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets the metric definition. */
    get: operations['metricDefinition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/definitions/{dataProductDefinitionId}/dashboards/{dashboardId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Gets the metric dashboard definition. */
    get: operations['dashboardDefinition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/constants': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List codes and descriptions for enumerated field types */
    get: operations['constants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/async/reports/{reportId}/{reportVariantId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Executes asynchronously the dataset query for the given report and stores the result into an external table.The response returned contains the table ID and the execution ID. This is the asynchronous version of the /reports/{reportId}/{reportVariantId} API. */
    get: operations['asyncConfiguredApiExecuteQuery']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reports/{reportId}/{reportVariantId}/statements/{statementId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** @description Cancels the execution of a running query. */
    delete: operations['cancelQueryExecution']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Error response */
    ErrorResponse: {
      /** Format: int32 */
      status: number
      userMessage: string
      developerMessage: string
      /** Format: int32 */
      errorCode?: number
      moreInfo?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request to re-open a non-association */
    ReopenNonAssociationRequest: {
      reopenReason: string
      /** @example 2021-07-05T10:35:17 */
      reopenedAt?: string
      reopenedBy?: string
    }
    /** @description Non-association */
    NonAssociation: {
      /** Format: int64 */
      id: number
      firstPrisonerNumber: string
      /** @enum {string} */
      firstPrisonerRole: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      firstPrisonerRoleDescription: string
      secondPrisonerNumber: string
      /** @enum {string} */
      secondPrisonerRole: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      secondPrisonerRoleDescription: string
      /** @enum {string} */
      reason: 'BULLYING' | 'GANG_RELATED' | 'ORGANISED_CRIME' | 'LEGAL_REQUEST' | 'THREAT' | 'VIOLENCE' | 'OTHER'
      reasonDescription: string
      /** @enum {string} */
      restrictionType: 'CELL' | 'LANDING' | 'WING'
      restrictionTypeDescription: string
      comment: string
      /** @example 2021-07-05T10:35:17 */
      whenCreated: string
      /** @example 2021-07-05T10:35:17 */
      whenUpdated: string
      updatedBy: string
      isClosed: boolean
      closedBy?: string
      closedReason?: string
      /** @example 2021-07-05T10:35:17 */
      closedAt?: string
      isOpen: boolean
    }
    /** @description Request to close a non-association */
    CloseNonAssociationRequest: {
      closedReason: string
      /** @example 2021-07-05T10:35:17 */
      closedAt?: string
      closedBy?: string
    }
    /** @description Request format for creating a new, open, non-association between two prisoners */
    CreateNonAssociationRequest: {
      firstPrisonerNumber: string
      /** @enum {string} */
      firstPrisonerRole: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      secondPrisonerNumber: string
      /** @enum {string} */
      secondPrisonerRole: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      /** @enum {string} */
      reason: 'BULLYING' | 'GANG_RELATED' | 'ORGANISED_CRIME' | 'LEGAL_REQUEST' | 'THREAT' | 'VIOLENCE' | 'OTHER'
      /** @enum {string} */
      restrictionType: 'CELL' | 'LANDING' | 'WING'
      comment: string
    }
    /** @description Request to delete a non-association */
    DeleteNonAssociationRequest: {
      deletionReason: string
      staffUserNameRequestingDeletion: string
    }
    /** @description Request format for updating a non-association between two prisoners */
    PatchNonAssociationRequest: {
      /** @enum {string} */
      firstPrisonerRole?: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      /** @enum {string} */
      secondPrisonerRole?: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      /** @enum {string} */
      reason?: 'BULLYING' | 'GANG_RELATED' | 'ORGANISED_CRIME' | 'LEGAL_REQUEST' | 'THREAT' | 'VIOLENCE' | 'OTHER'
      /** @enum {string} */
      restrictionType?: 'CELL' | 'LANDING' | 'WING'
      comment?: string
    }
    HmppsSubjectAccessRequestContent: {
      content: Record<string, never>
    }
    StatementExecutionStatus: {
      status: string
      /** Format: int64 */
      duration: number
      /** Format: int64 */
      resultRows: number
      /** Format: int64 */
      resultSize?: number
      error?: string
      /** Format: int32 */
      errorCategory?: number
      stateChangeReason?: string
    }
    Count: {
      /** Format: int64 */
      count: number
    }
    MetricDataResponse: {
      id: string
      data: {
        [key: string]: Record<string, never> | undefined
      }[]
      /** @example 2021-07-05T10:35:17 */
      updated: string
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Other prisoner’s details for an item in a list of non-associations */
    OtherPrisonerDetails: {
      prisonerNumber: string
      /** @enum {string} */
      role: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      roleDescription: string
      firstName: string
      lastName: string
      prisonId?: string
      prisonName?: string
      cellLocation?: string
    }
    /** @description An item in a list of non-associations for a given prisoner */
    PrisonerNonAssociation: {
      /** Format: int64 */
      id: number
      /** @enum {string} */
      role: 'VICTIM' | 'PERPETRATOR' | 'NOT_RELEVANT' | 'UNKNOWN'
      roleDescription: string
      /** @enum {string} */
      reason: 'BULLYING' | 'GANG_RELATED' | 'ORGANISED_CRIME' | 'LEGAL_REQUEST' | 'THREAT' | 'VIOLENCE' | 'OTHER'
      reasonDescription: string
      /** @enum {string} */
      restrictionType: 'CELL' | 'LANDING' | 'WING'
      restrictionTypeDescription: string
      comment: string
      authorisedBy: string
      /** @example 2021-07-05T10:35:17 */
      whenCreated: string
      /** @example 2021-07-05T10:35:17 */
      whenUpdated: string
      updatedBy: string
      isClosed: boolean
      closedBy?: string
      closedReason?: string
      /** @example 2021-07-05T10:35:17 */
      closedAt?: string
      otherPrisonerDetails: components['schemas']['OtherPrisonerDetails']
      isOpen: boolean
    }
    /** @description List of non-associations for a given prisoner */
    PrisonerNonAssociations: {
      prisonerNumber: string
      firstName: string
      lastName: string
      prisonId?: string
      prisonName?: string
      cellLocation?: string
      /** Format: int32 */
      openCount: number
      /** Format: int32 */
      closedCount: number
      nonAssociations: components['schemas']['PrisonerNonAssociation'][]
    }
    PageNonAssociation: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['NonAssociation'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      direction?: string
      nullHandling?: string
      ascending?: boolean
      property?: string
      ignoreCase?: boolean
    }
    /** @description Non-association in NOMIS/Prison API format */
    LegacyNonAssociation: {
      /** Format: int64 */
      id: number
      offenderNo: string
      /** @enum {string} */
      reasonCode: 'BUL' | 'PER' | 'RIV' | 'VIC' | 'NOT_REL' | 'UNKNOWN'
      reasonDescription: string
      /** @enum {string} */
      typeCode: 'CELL' | 'LAND' | 'WING'
      typeDescription: string
      /** @example 2021-07-05T10:35:17 */
      effectiveDate: string
      /** @example 2021-07-05T10:35:17 */
      expiryDate?: string
      authorisedBy?: string
      comments: string
      offenderNonAssociation: components['schemas']['LegacyNonAssociationOtherPrisonerDetails']
    }
    /** @description Details about the other non-association person in NOMIS/Prison API format */
    LegacyNonAssociationOtherPrisonerDetails: {
      offenderNo: string
      /** @enum {string} */
      reasonCode: 'BUL' | 'PER' | 'RIV' | 'VIC' | 'NOT_REL' | 'UNKNOWN'
      reasonDescription: string
    }
    DashboardDefinition: {
      id: string
      name: string
      description: string
      metrics: components['schemas']['DashboardMetricDefinition'][]
    }
    DashboardMetricDefinition: {
      id: string
    }
    ReportDefinitionSummary: {
      id: string
      name: string
      description?: string
      variants: components['schemas']['VariantDefinitionSummary'][]
      dashboards?: components['schemas']['DashboardDefinition'][]
    }
    VariantDefinitionSummary: {
      id: string
      name: string
      description?: string
    }
    DynamicFilterOption: {
      /** Format: int32 */
      minimumLength?: number
      returnAsStaticOptions: boolean
      /** Format: int64 */
      maximumOptions?: number
      dataset?: string
      name?: string
      display?: string
    }
    FieldDefinition: {
      name: string
      display: string
      /** @enum {string} */
      wordWrap?: 'none' | 'normal' | 'break-words'
      filter?: components['schemas']['FilterDefinition']
      sortable: boolean
      defaultsort: boolean
      /** @enum {string} */
      type: 'boolean' | 'date' | 'double' | 'HTML' | 'long' | 'string' | 'time'
      mandatory: boolean
      visible: boolean
      calculated: boolean
    }
    FilterDefinition: {
      /** @enum {string} */
      type: 'Radio' | 'Select' | 'daterange' | 'autocomplete' | 'text' | 'date'
      mandatory: boolean
      pattern?: string
      staticOptions?: components['schemas']['FilterOption'][]
      dynamicOptions?: components['schemas']['DynamicFilterOption']
      defaultValue?: string
      min?: string
      max?: string
    }
    FilterOption: {
      name: string
      display: string
    }
    ReportSummary: {
      id: string
      /** @enum {string} */
      template: 'table-header' | 'table-footer' | 'section-header' | 'section-footer' | 'page-header' | 'page-footer'
      fields: components['schemas']['SummaryField'][]
    }
    SingleVariantReportDefinition: {
      id: string
      name: string
      description?: string
      variant: components['schemas']['VariantDefinition']
    }
    Specification: {
      /** @enum {string} */
      template: 'list' | 'list-section' | 'list-aggregate' | 'list-tab' | 'crosstab' | 'summary' | 'summary-section'
      fields: components['schemas']['FieldDefinition'][]
      sections: string[]
    }
    SummaryField: {
      name: string
      display?: string
      /** @enum {string} */
      type?: 'boolean' | 'date' | 'double' | 'HTML' | 'long' | 'string' | 'time'
    }
    VariantDefinition: {
      id: string
      name: string
      resourceName: string
      description?: string
      specification?: components['schemas']['Specification']
      classification?: string
      printable?: boolean
      summaries?: components['schemas']['ReportSummary'][]
    }
    MetricDefinition: {
      id: string
      name: string
      display: string
      description: string
      specification: components['schemas']['MetricSpecificationDefinition'][]
    }
    MetricSpecificationDefinition: {
      name: string
      display: string
      unit?: string
      chart?: ('doughnut' | 'bar' | 'line')[]
      group?: boolean
    }
    Constant: {
      code: string
      description: string
    }
    StatementExecutionResponse: {
      tableId: string
      executionId: string
    }
    StatementCancellationResponse: {
      cancellationSucceeded: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reopenNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The non-association ID
         * @example 42
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReopenNonAssociationRequest']
      }
    }
    responses: {
      /** @description Non-association re-opened */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the REOPEN_NON_ASSOCIATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  closeNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The non-association ID
         * @example 42
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CloseNonAssociationRequest']
      }
    }
    responses: {
      /** @description Non-association updated and returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociations: {
    parameters: {
      query?: {
        /**
         * @description Whether to include open non-associations or not
         * @example false
         */
        includeOpen?: string
        /**
         * @description Whether to include closed non-associations or not
         * @example true
         */
        includeClosed?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A page of non-associations are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageNonAssociation']
        }
      }
      /** @description When input parameters are not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the READ_NON_ASSOCIATIONS role. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNonAssociationRequest']
      }
    }
    responses: {
      /** @description Returns the created non-association */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation']
        }
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required privileges. Requires the NON_ASSOCIATIONS role with write scope */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Some of the prisoners were not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Open non-association already exists or some prisoner’s location is null. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The non-association ID
         * @example 42
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteNonAssociationRequest']
      }
    }
    responses: {
      /** @description Non-association deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the DELETE_NON_ASSOCIATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationsInvolvingPrisoners: {
    parameters: {
      query?: {
        /**
         * @description Whether to include open non-associations or not
         * @example false
         */
        includeOpen?: string
        /**
         * @description Whether to include closed non-associations or not
         * @example true
         */
        includeClosed?: string
        /**
         * @description When provided return only non-associations where both prisoners are in the given prison
         * @example MDI
         */
        prisonId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Returns the non-associations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation'][]
        }
      }
      /** @description When fewer than one distinct prisoner numbers are provided or neither open nor closed non-associations are included */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Any of the prisoners could not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationsBetweenPrisoners: {
    parameters: {
      query?: {
        /**
         * @description Whether to include open non-associations or not
         * @example false
         */
        includeOpen?: string
        /**
         * @description Whether to include closed non-associations or not
         * @example true
         */
        includeClosed?: string
        /**
         * @description When provided return only non-associations where both prisoners are in the given prison
         * @example MDI
         */
        prisonId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Returns the non-associations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation'][]
        }
      }
      /** @description When fewer than two distinct prisoner numbers are provided or neither open nor closed non-associations are included */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Any of the prisoners could not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The non-association ID
         * @example 42
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the non-association */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The non-association ID
         * @example 42
         */
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchNonAssociationRequest']
      }
    }
    responses: {
      /** @description Non-association updated and returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociation']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS role with write scope. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSarContentByReference: {
    parameters: {
      query?: {
        /** @description NOMIS Prison Reference Number */
        prn?: string
        /** @description nDelius Case Reference Number */
        crn?: string
        /** @description Optional parameter denoting minimum date of event occurrence which should be returned in the response */
        fromDate?: string
        /** @description Optional parameter denoting maximum date of event occurrence which should be returned in the response */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Request successfully processed - content found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HmppsSubjectAccessRequestContent']
        }
      }
      /** @description Request successfully processed - no content found */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Subject Identifier is not recognised by this service */
      209: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description The client does not have authorisation to make this request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error occurred */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  configuredApiDataset: {
    parameters: {
      query: {
        selectedPage?: number
        pageSize?: number
        sortColumn?: string
        sortedAsc?: boolean
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30"
         *     }
         */
        filters: {
          [key: string]: string | undefined
        }
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': {
            [key: string]: Record<string, never> | undefined
          }[]
        }
      }
    }
  }
  configuredApiDynamicFilter: {
    parameters: {
      query: {
        pageSize?: number
        sortedAsc?: boolean
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30"
         *     }
         */
        filters: {
          [key: string]: string | undefined
        }
        /**
         * @description The value to match the start of the fieldId
         * @example Lond
         */
        prefix: string
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
        /**
         * @description The name of the schema field which will be used as a dynamic filter.
         * @example name
         */
        fieldId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': string[]
        }
      }
    }
  }
  getQueryExecutionResult: {
    parameters: {
      query?: {
        dataProductDefinitionsPath?: string
        selectedPage?: number
        pageSize?: number
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
        tableId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': {
            [key: string]: Record<string, never> | undefined
          }[]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSummaryQueryExecutionResult: {
    parameters: {
      query?: {
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
        tableId: string
        summaryId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': {
            [key: string]: Record<string, never> | undefined
          }[]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getQueryExecutionStatus: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
        statementId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['StatementExecutionStatus']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  configuredApiCount: {
    parameters: {
      query: {
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30"
         *     }
         */
        filters: {
          [key: string]: string | undefined
        }
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Count']
        }
      }
    }
  }
  configuredApiDataset_1: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        metricId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['MetricDataResponse']
        }
      }
    }
  }
  getExternalTableRowCount: {
    parameters: {
      query?: never
      header?: never
      path: {
        tableId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['Count']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerNonAssociations: {
    parameters: {
      query?: {
        /**
         * @description Whether to include open non-associations or not
         * @example false
         */
        includeOpen?: string
        /**
         * @description Whether to include closed non-associations or not
         * @example true
         */
        includeClosed?: string
        /**
         * @description Whether to include non-associations with prisoners in other prisons
         * @example true
         */
        includeOtherPrisons?: string
        /**
         * @description Sort non-associations by
         * @example LAST_NAME
         */
        sortBy?:
          | 'WHEN_CREATED'
          | 'WHEN_UPDATED'
          | 'WHEN_CLOSED'
          | 'LAST_NAME'
          | 'FIRST_NAME'
          | 'PRISONER_NUMBER'
          | 'PRISON_ID'
          | 'PRISON_NAME'
          | 'CELL_LOCATION'
        /**
         * @description Sort direction (fallback depends on sortBy)
         * @example DESC
         */
        sortDirection?: 'ASC' | 'DESC'
      }
      header?: never
      path: {
        /**
         * @description The offender prisoner number
         * @example A1234BC
         */
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns non-association details for this prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerNonAssociations']
        }
      }
      /** @description Bad request; for example including neither open nor closed non-associations */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Any of the prisoners could not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLegacyById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The non-association ID
         * @example 42
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the non-association */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LegacyNonAssociation']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the NON_ASSOCIATIONS_SYNC role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  definitions: {
    parameters: {
      query?: {
        /**
         * @description Set this parameter to filter the list to only include reports for the given rendering method.
         * @example HTML
         */
        renderMethod?: 'HTML' | 'PDF' | 'SVG'
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ReportDefinitionSummary'][]
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  definition: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        /**
         * @description The ID of the report definition.
         * @example external-movements
         */
        reportId: string
        /**
         * @description The ID of the variant definition.
         * @example list
         */
        variantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['SingleVariantReportDefinition']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  metricDefinition: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        /**
         * @description The ID of the Data Product Definition.
         * @example external-movements
         */
        dataProductDefinitionId: string
        /**
         * @description The ID of the metric.
         * @example metricId
         */
        metricId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['MetricDefinition']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  dashboardDefinition: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        /**
         * @description The ID of the Data Product Definition.
         * @example external-movements
         */
        dataProductDefinitionId: string
        /**
         * @description The ID of the dashboard.
         * @example dashboardId
         */
        dashboardId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['DashboardDefinition']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  constants: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns codes and descriptions */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['Constant'][] | undefined
          }
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  asyncConfiguredApiExecuteQuery: {
    parameters: {
      query: {
        sortColumn?: string
        sortedAsc?: boolean
        /**
         * @description The filter query parameters have to start with the prefix "filters." followed by the name of the filter.
         *           For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.
         *          Note: For legacy nomis and bodmis reports, for filters deriving from DPD parameters(prompts),there is no need for these to be suffixed with .start and .end. For example, filters.start_date and filters.end_date are perfectly valid in this case.
         * @example {
         *       "filters.date.start": "2023-04-25",
         *       "filters.date.end": "2023-05-30"
         *     }
         */
        filters: {
          [key: string]: string | undefined
        }
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description default response */
      default: {
        headers: {
          /** @description Provides additional information about why no data has been returned. */
          'x-no-data-warning'?: string
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['StatementExecutionResponse']
        }
      }
    }
  }
  cancelQueryExecution: {
    parameters: {
      query?: {
        /**
         * @description This optional parameter sets the path of the directory of the data product definition files your application will use.
         *           "This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.
         * @example definitions/prisons/orphanage
         */
        dataProductDefinitionsPath?: string
      }
      header?: never
      path: {
        reportId: string
        reportVariantId: string
        statementId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['StatementCancellationResponse']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Too Many Requests */
      429: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
