/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/attendances': {
    /**
     * Updates attendance records.
     * @description Updates the given attendance records with the supplied update request details. Requires the 'ACTIVITY_ADMIN' role.
     */
    put: operations['markAttendances']
  }
  '/schedules/{scheduleId}/allocations': {
    /**
     * Get a list of activity schedule allocations
     * @description Returns zero or more activity schedule allocations.
     */
    get: operations['getAllocationsBy']
    /**
     * Allocate offender to schedule
     * @description Allocates the supplied offender allocation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    post: operations['allocate']
  }
  '/scheduled-events/prison/{prisonCode}': {
    /**
     * Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.
     * @description
     *       Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.
     *       Court hearings, appointments and visits always come from NOMIS (via prison API).
     *       Activities come from either NOMIS or the new Activities database, depending on whether the prison is
     *       marked as rolled-out in the activities database.
     *       (Intended usage: Prisoner calendar)
     */
    get: operations['getScheduledEventsByPrisonAndPrisonerAndDateRange']
    /**
     * Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot
     * @description
     *       Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.
     *       Court hearings, appointments and visits always come from NOMIS (via prison API).
     *       Activities come from either NOMIS or the new activities database, depending on whether the prison is
     *       marked as rolled-out in the activities database.
     *       (Intended usage: Unlock list)
     */
    post: operations['getScheduledEventsByPrisonAndPrisonersAndDateRange']
  }
  '/prisons/{prisonCode}/prisoner-allocations': {
    /**
     * Get all allocations for prisoners
     * @description Returns zero or more allocations for the supplied list of prisoners.
     */
    post: operations['prisonerAllocations']
  }
  '/job/create-scheduled-instances': {
    /**
     * Trigger the job to create the scheduled instances in advance for the active schedules on activities
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerCreateScheduledInstancesJob']
  }
  '/job/create-attendance-records': {
    /**
     * Trigger the job to create attendance records in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerCreateAttendanceRecordsJob']
  }
  '/appointments': {
    /**
     * Create an appointment or series of appointment occurrences
     * @description
     *     Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.
     *     Does not require any specific roles
     */
    post: operations['createAppointment']
  }
  '/activities': {
    /**
     * Create an activity
     * @description Create an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    post: operations['create']
  }
  '/activities/{activityId}/schedules': {
    /** Get the capacity and number of allocated slots in an activity */
    get: operations['getActivitySchedules']
    /**
     * Adds a new schedule to an existing activity
     * @description Adds a new schedule to an existing activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    post: operations['addSchedule']
  }
  '/schedules/{scheduleId}': {
    /**
     * Get an activity schedule by its id
     * @description Returns a single activity schedule by its unique identifier.
     */
    get: operations['getScheduleId']
  }
  '/schedules/{activityScheduleId}/capacity': {
    /** Get the capacity and number of allocated slots in an activity schedule */
    get: operations['getActivityScheduleCapacity']
  }
  '/scheduled-instances/{instanceId}': {
    /**
     * Get a scheduled instance by ID
     * @description Returns a scheduled instance.
     */
    get: operations['getScheduledInstanceById']
  }
  '/scheduled-instances/{instanceId}/attendances': {
    /**
     * Get a list of attendances for a scheduled instance
     * @description Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.
     */
    get: operations['getAttendancesByScheduledInstance']
  }
  '/rollout/{prisonCode}': {
    /**
     * Get a prison by its code
     * @description Returns a single prison and its details by its unique code.
     */
    get: operations['getPrisonByCode']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/prisons/{prisonCode}/scheduled-instances': {
    /**
     * Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)
     * @description Returns zero or more scheduled instances for a prison and date range (max 3 months).
     */
    get: operations['getActivityScheduleInstancesByDateRange']
  }
  '/prison/{prisonCode}/schedules': {
    /**
     * Get a list of activity schedules at a given prison
     * @description Returns zero or more activity schedules at a given prison.
     */
    get: operations['getSchedulesByPrisonCode']
  }
  '/prison/{prisonCode}/prison-pay-bands': {
    /**
     * Get a list of pay bands at a given prison
     * @description Returns the pay bands at a given prison or a default list of values if none present.
     */
    get: operations['getPrisonPayBands']
  }
  '/prison/{prisonCode}/locations': {
    /**
     * Get scheduled prison locations
     * @description Returns a list of zero or more scheduled prison locations for the supplied criteria.
     */
    get: operations['getScheduledPrisonLocations']
  }
  '/prison/{prisonCode}/activity-categories/{categoryId}/capacity': {
    /** Get the capacity and number of allocated slots in an activity category within a prison */
    get: operations['getActivityCategoryCapacity']
  }
  '/prison/{prisonCode}/activity-categories/{categoryId}/activities': {
    /** Get list of activities within a category at a specified prison */
    get: operations['getActivitiesInCategory']
  }
  '/prison/{prisonCode}/activities': {
    /** Get list of activities at a specified prison */
    get: operations['getActivities']
  }
  '/prison/prison-regime/{prisonCode}': {
    /**
     * Get a prison regime by its code
     * @description Returns a single prison regime and its details by its unique prison code.
     */
    get: operations['getPrisonRegimeByPrisonCode']
  }
  '/locations/prison/{prisonCode}': {
    /**
     * List of cell locations for a prison group supplied as a query parameter
     * @description List of cell locations for a prison group supplied as a query parameter
     */
    get: operations['getCellLocationsForGroup']
  }
  '/locations/prison/{prisonCode}/location-prefix': {
    /**
     * Get the location prefix for a location group supplied as a query parameter
     * @description Get location prefix for a location group name supplied as a query parameter
     */
    get: operations['getLocationPrefixForGroup']
  }
  '/locations/prison/{prisonCode}/location-groups': {
    /**
     * List of all available location groups defined at a prison
     * @description List of all available location groups defined at a prison
     */
    get: operations['getLocationGroups']
  }
  '/appointments/{appointmentId}': {
    /**
     * Get an appointment by its id
     * @description Returns an appointment and its details by its unique identifier.
     */
    get: operations['getAppointmentById']
  }
  '/appointment-details/{appointmentId}': {
    /**
     * Gets the top level appointment details for display purposes identified by the appointment's id
     * @description Returns the displayable details of an appointment by its unique identifier.
     */
    get: operations['getAppointmentDetailsById']
  }
  '/appointment-categories': {
    /** Get the list of top-level appointment categories */
    get: operations['getAppointmentCategories']
  }
  '/allocations/id/{allocationId}': {
    /**
     * Get an allocation by its id
     * @description Returns a single allocation and its details by its unique identifier.
     */
    get: operations['getAllocationById']
  }
  '/activity-categories': {
    /** Get the list of top-level activity categories */
    get: operations['getCategories']
  }
  '/activities/{activityId}': {
    /**
     * Get an activity by its id
     * @description Returns a single activity and its details by its unique identifier.
     */
    get: operations['getActivityById']
  }
  '/activities/{activityId}/capacity': {
    /** Get the capacity and number of allocated slots in an activity */
    get: operations['getActivityCapacity']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request object for updating an attendance record */
    AttendanceUpdateRequest: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * @description The reason codes- ABS, ACCAB, ATT, CANC, NREQ, SUS, UNACAB, REST
       * @example ATT
       */
      attendanceReason: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The prisoner allocation request details */
    PrisonerAllocationRequest: {
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner
       * @example 1
       */
      payBandId: number
    }
    /** @description Describes a prisoners scheduled events */
    PrisonerScheduledEvents: {
      /**
       * @description The prison code for these scheduled events
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The set of prisoner numbers for theses scheduled events
       * @example ['GF10101', 'GR123YI']
       */
      prisonerNumbers?: string[]
      /**
       * Format: date
       * @description The start date for this collection of scheduled events
       * @example 2022-11-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date (inclusive) for this collection of scheduled events
       * @example 2022-11-28
       */
      endDate?: string
      /** @description A list of scheduled appointments for this prisoner in this date range */
      appointments?: components['schemas']['ScheduledEvent'][]
      /** @description A list of (active) scheduled court hearings for this prisoner in this date range */
      courtHearings?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled visits for this prisoner in this date range */
      visits?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled activities for this prisoner in this date range */
      activities?: components['schemas']['ScheduledEvent'][]
    }
    /** @description Describes a scheduled event */
    ScheduledEvent: {
      /**
       * @description The prison code for this scheduled event
       * @example MDI
       */
      prisonCode?: string
      /**
       * Format: int64
       * @description The event id for this scheduled event
       * @example 10001
       */
      eventId?: number
      /**
       * Format: int64
       * @description The booking id for this scheduled event
       * @example 10001
       */
      bookingId?: number
      /**
       * @description The location of this scheduled event
       * @example INDUCTION CLASSROOM
       */
      location?: string
      /**
       * Format: int64
       * @description The location id of this scheduled event
       * @example 10001
       */
      locationId?: number
      /**
       * @description Scheduled event class
       * @example INT_MOV
       */
      eventClass?: string
      /**
       * @description Scheduled event status
       * @example SCH
       */
      eventStatus?: string
      /**
       * @description Scheduled event type
       * @example APP
       */
      eventType?: string
      /**
       * @description Scheduled event type description
       * @example Appointment
       */
      eventTypeDesc?: string
      /**
       * @description Scheduled event
       * @example GOVE
       */
      event?: string
      /**
       * @description Scheduled event description
       * @example Governor
       */
      eventDesc?: string
      /**
       * @description Details of this scheduled event
       * @example Dont be late
       */
      details?: string
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber?: string
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date?: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime?: string
      /**
       * Format: int32
       * @description The event priority
       */
      priority?: number
    }
    /** @description A prisoner who is allocated to an activity */
    Allocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this allocation
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The offender booking id
       * @example 10001
       */
      bookingId?: number
      activitySummary: string
      /** Format: int64 */
      scheduleId: number
      scheduleDescription: string
      /** @description Indicates whether this allocation is to an activity within the 'Not in work' category */
      isUnemployment: boolean
      prisonPayBand: components['schemas']['PrisonPayBand']
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was allocated to the activity
       */
      allocatedTime?: string
      /**
       * @description The person who allocated the prisoner to the activity
       * @example Mr Blogs
       */
      allocatedBy?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was deallocated from the activity
       */
      deallocatedTime?: string
      /**
       * @description The person who deallocated the prisoner from the activity
       * @example Mrs Blogs
       */
      deallocatedBy?: string
      /**
       * @description The descriptive reason why this prisoner was deallocated from the activity
       * @example Not attending regularly
       */
      deallocatedReason?: string
    }
    /** @description Describes one instance of a prison pay band */
    PrisonPayBand: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison pay band
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The order in which the pay band should be presented within a list e.g. dropdown
       * @example 1
       */
      displaySequence: number
      /**
       * @description The alternative text to use in place of the description e.g. Low, Medium, High
       * @example Low
       */
      alias: string
      /**
       * @description The description of pay band in this prison
       * @example Pay band 1
       */
      description: string
      /**
       * Format: int32
       * @description The pay band number this is associated with in NOMIS (1-10)
       * @example 1
       */
      nomisPayBand: number
      /**
       * @description The prison code for the pay band. Can also be 'DEFAULT' if none set up for prison
       * @example MDI
       */
      prisonCode: string
    }
    /** @description Describes a prisoners allocations */
    PrisonerAllocations: {
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /** @description The list of allocations for the prisoner */
      allocations: components['schemas']['Allocation'][]
    }
    /** @description The create request with the new appointment or series of appointment occurrences details */
    AppointmentCreateRequest: {
      /**
       * Format: int64
       * @description The category id for this appointment. Must exist and be active
       * @example 21
       */
      categoryId: number
      /**
       * @description The NOMIS prison code where this appointment takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * Format: int64
       * @description
       *     The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *     The internal location id must exist, must be within the prison specified by the prisonCode property and be active.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or first appointment occurrence in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or first appointment occurrence in the series
       * @example 10:30
       */
      endTime: string
      /**
       * @description
       *     Notes relating to the appointment.
       *     The default value if no notes are specified at the occurrence or instance levels
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
      /**
       * @description The prisoner or prisoners to allocate to the created appointment or series of appointment occurrences
       * @example [
       *   "A1234BC"
       * ]
       */
      prisonerNumbers: string[]
    }
    /**
     * @description
     *   The top level appointment containing the initial values for all appointment properties.
     *   Joins together one or more appointment occurrences and optionally a schedule if the appointment is recurring.
     *   The child appointment occurrences will by default have the same property values.
     *   The occurrence property values can be changed independently to support rescheduling, cancelling and altered
     *   attendee lists at an individual occurrence level.
     *   Editing a property at the appointment level will cascade the edit to all *future* child occurrences
     */
    Appointment: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 12345
       */
      id: number
      category: components['schemas']['AppointmentCategory']
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *     Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Should be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or first appointment occurrence in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or first appointment occurrence in the series
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to the appointment.
       *     The default value if no notes are specified at the occurrence or instance levels
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
      /**
       * Format: date-time
       * @description The date and time this appointment was created. Will not change
       */
      created: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that created the appointment.
       *     Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment was last changed.
       *     Will be null if the appointment has not been altered since it was created
       */
      updated?: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that edited the appointment.
       *     Usually a NOMIS username. Will be null if the appointment has not been altered since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
      schedule?: components['schemas']['AppointmentSchedule']
      /**
       * @description
       *     The individual occurrence or occurrences of this appointment. Non recurring appointments will have a single
       *     appointment occurrence containing the same property values as the parent appointment. The same start date, time
       *     and end time. Recurring appointments will have a series of occurrences. The first in the series will also
       *     contain the same property values as the parent appointment and subsequent occurrences will have start dates
       *     following on from the original start date incremented as specified by the appointment's schedule. Each occurrence
       *     can be edited independently of the parent. All properties of an occurrence override those of the parent appointment
       *     with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the
       *     schedule will be created in advance.
       */
      occurrences: components['schemas']['AppointmentOccurrence'][]
    }
    /**
     * @description
     *   Describes an appointment category. Categories can have a two level hierarchy, category and subcategory.
     *   Subcategory level categories will have a parent.
     *   Tables referencing appointment category should use the id primary key.
     *   Mapping to NOMIS is via the code property.
     *   The active property is a soft delete allowing categories that only exist in NOMIS to be maintained in the database
     *   but not supported when creating or editing appointments.
     *   Display order supports explicit ordering of categories and subcategories. Ordering will default to alphabetically
     *   by description of display order is not specified.
     */
    AppointmentCategory: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment category
       * @example 51
       */
      id: number
      parent?: components['schemas']['AppointmentCategory']
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      code: string
      /**
       * @description The description of the appointment category
       * @example Chaplaincy
       */
      description: string
      /**
       * @description Flag to indicate if this (sub)category) is active. Only active (sub)categories are valid for create and update requests
       * @example true
       */
      active: boolean
      /**
       * Format: int32
       * @description Override to the default of ordering alphabetically by description supporting explicit ordering
       * @example 1
       */
      displayOrder?: number
    }
    /**
     * @description
     *   Represents an appointment instance for a specific prisoner to attend at the specified location, date and time.
     *   The fully denormalised representation of the appointment occurrences and allocations.
     */
    AppointmentInstance: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment instance
       * @example 123456
       */
      id: number
      category: components['schemas']['AppointmentCategory']
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Should be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * Format: date
       * @description The date of the appointment instance
       */
      appointmentDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment instance
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to the appointment instance.
       *     Could support adding a note specific to an individual prisoner's attendance of a specific group appointment
       *     occurrence. Something that is supported within existing systems
       *
       * @example This appointment will help prisoner A1234BC adjust to life outside of prison
       */
      comment?: string
      /**
       * @description
       *     Simple attendance marking model. Expectation that this will be enhanced to support non attendance reasons in future
       *
       * @example false
       */
      attended?: boolean
      /**
       * @description Indicates that the parent appointment occurrence was cancelled
       * @example false
       */
      cancelled: boolean
    }
    /**
     * @description
     *   Represents a specific appointment occurrence. Non recurring appointments will have a single appointment occurrence
     *   containing the same property values as the parent appointment. The same start date, time and end time. Recurring
     *   appointments will have a series of occurrences. The first in the series will also contain the same property values
     *   as the parent appointment and subsequent occurrences will have start dates following on from the original start date
     *   incremented as specified by the appointment's schedule. Each occurrence can be edited independently of the parent.
     *   All properties of an occurrence override those of the parent appointment with a null coalesce back to the parent for
     *   nullable properties. The full series of occurrences specified by the schedule will be created in advance.
     */
    AppointmentOccurrence: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Should be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment occurrence is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment occurrence
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment occurrence
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to this appointment occurrence.
       *     The comment value from the parent appointment will be used if this is null
       *
       * @example This appointment occurrence has been rescheduled due to staff availability
       */
      comment?: string
      /**
       * @description
       *     Supports cancelling of this appointment occurrence. This is different from (soft) deleting the parent appointment
       *     and can be used to highlight where an appointment has been cancelled on unlock lists and similar
       *
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment occurrence was last changed.
       *     Will be null if the appointment occurrence has not been altered independently from the parent appointment
       *     since it was created
       */
      updated?: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that edited this appointment instance.
       *     Usually a NOMIS username. Will be null if the appointment occurrence has not been altered independently from the
       *     parent appointment since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
      /**
       * @description
       *     The prisoner or prisoners attending this appointment occurrence. Single appointments such as medical will have one
       *     allocation record. A group appointment e.g. gym or chaplaincy sessions will have more than one allocation record.
       *     Allocations are at the occurrence level supporting alteration of attendees in any future occurrence.
       *     When viewing or editing a recurring appointment, the allocations from the next appointment occurrence in the series
       *     will be used.
       */
      allocations: components['schemas']['AppointmentOccurrenceAllocation'][]
      /**
       * @description
       *     The instance or instances of this appointment occurrence. Single non recurring appointments such as medical will have one
       *     instance record. A group appointment e.g. gym or chaplaincy sessions will have more than one instance record.
       *     Instances are at the occurrence level supporting alteration of attendees in any future occurrence.
       */
      instances: components['schemas']['AppointmentInstance'][]
    }
    /**
     * @description
     *   The allocation of a prisoner to an appointment occurrence. Standard single appointments will have one prisoner
     *   allocated to its single appointment occurrence. More than one prisoner allocation record signifies the associated
     *   appointment is a group appointment. Group appointments support additional checks such as non-associations.
     */
    AppointmentOccurrenceAllocation: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment allocation
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
    }
    /**
     * @description
     *   Describes the recurrence of an appointment. The days of the week an occurrence of the appointment will be scheduled
     *   and the end date of the series.
     */
    AppointmentSchedule: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment schedule
       * @example 12345
       */
      id: number
      /**
       * Format: date
       * @description
       *     The date the series of appointment occurrences should end. The UI will provide options to specify an end date or
       *     a number of occurrences. The later case should be used to calculate the end date internally
       */
      endDate: string
      /**
       * @description Indicates the appointment reoccurs every Monday
       * @example false
       */
      mondayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Tuesday
       * @example true
       */
      tuesdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Wednesday
       * @example false
       */
      wednesdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Thursday
       * @example false
       */
      thursdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Friday
       * @example false
       */
      fridayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Saturday
       * @example false
       */
      saturdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Sunday
       * @example false
       */
      sundayFlag: boolean
    }
    /** @description The create request with the new activity details */
    ActivityCreateRequest: {
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession?: string
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      /**
       * Format: int64
       * @description The category id for this activity, one of the high-level categories
       */
      categoryId: number
      /**
       * Format: int64
       * @description The tier id for this activity, as defined by the Future Prison Regime team
       * @example 1
       */
      tierId?: number
      /**
       * @description A list of eligibility rules ids which apply to this activity.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      eligibilityRuleIds: number[]
      /** @description The list of pay rates that can apply to this activity */
      pay: components['schemas']['ActivityPayCreateRequest'][]
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel: string
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-12-23
       */
      startDate?: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-23
       */
      endDate?: string
      /** @description The list of minimum education levels that apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevelCreateRequest'][]
    }
    /** @description Describes the minimum education levels to be created for an activity */
    ActivityMinimumEducationLevelCreateRequest: {
      /**
       * @description The Education level code
       * @example 1
       */
      educationLevelCode: string
      /**
       * @description The Education level description
       * @example Reading Measure 1.0
       */
      educationLevelDescription: string
    }
    /** @description Describes the pay rates and bands to be created for an activity */
    ActivityPayCreateRequest: {
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description The id of the prison pay band used
       * @example 1
       */
      payBandId: number
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /** @description Describes a top-level activity */
    Activity: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      tier?: components['schemas']['ActivityTier']
      /**
       * @description A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)
       * @example [FEMALE_ONLY,AGED_18-25]
       */
      eligibilityRules: components['schemas']['ActivityEligibility'][]
      /** @description A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity. */
      schedules: components['schemas']['ActivitySchedule'][]
      /** @description A list of prisoners who are waiting for allocation to this activity. This list is held against the activity, though allocation is against particular schedules of the activity */
      waitingList: components['schemas']['PrisonerWaiting'][]
      /** @description The list of pay rates by incentive level and pay band that can apply to this activity */
      pay: components['schemas']['ActivityPay'][]
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-21
       */
      endDate?: string
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel: string
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description The person who created this activity
       * @example Adam Smith
       */
      createdBy: string
      /** @description The list of minimum education levels that can apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevel'][]
    }
    /** @description Describes a top-level activity category */
    ActivityCategory: {
      /**
       * Format: int64
       * @description The internally-generated identifier for this activity category
       * @example 1
       */
      id: number
      /**
       * @description The activity category code
       * @example LEISURE_SOCIAL
       */
      code: string
      /**
       * @description The name of the activity category
       * @example Leisure and social
       */
      name: string
      /**
       * @description The description of the activity category
       * @example Such as association, library time and social clubs, like music or art
       */
      description?: string
    }
    /**
     * @description Describes an eligibility rule as applied to an activity
     * @example [FEMALE_ONLY,AGED_18-25]
     */
    ActivityEligibility: {
      /**
       * Format: int64
       * @description The internal ID of the activity that these rules apply to
       * @example 123456
       */
      id: number
      eligibility: components['schemas']['EligibilityRule']
    }
    /** @description Describes a top-level activity */
    ActivityLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession: string
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel: string
      /** @description The list of minimum education levels that can apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevel'][]
    }
    /** @description Describes the minimum education levels which apply to an activity */
    ActivityMinimumEducationLevel: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity minimum education level
       * @example 123456
       */
      id: number
      /**
       * @description The education level code
       * @example Basic
       */
      educationLevelCode: string
      /**
       * @description The education level description
       * @example Basic
       */
      educationLevelDescription: string
    }
    /** @description Describes the pay rates and bands which apply to an activity */
    ActivityPay: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      prisonPayBand: components['schemas']['PrisonPayBand']
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     */
    ActivitySchedule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /** @description The planned instances associated with this activity schedule */
      instances: components['schemas']['ScheduledInstance'][]
      /** @description The list of allocated prisoners who are allocated to this schedule, at this time and location */
      allocations: components['schemas']['Allocation'][]
      /**
       * @description The description of this activity schedule
       * @example Entry level Maths 1
       */
      description: string
      /** @description Indicates the dates between which the schedule has been suspended */
      suspensions: components['schemas']['Suspension'][]
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
      /**
       * Format: date
       * @description The date on which this schedule will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this schedule will end. From this date, any schedules will be created as real, planned instances
       * @example 2022-10-21
       */
      endDate?: string
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
    }
    /**
     * @description
     *   Describes a slot for an activity schedule. There can be several of these defined for one activity schedule.
     *   An activity schedule slot describes when, during the week, an activity will be run.
     *   e.g. Tuesday PM on a Monday and Thursday.
     */
    ActivityScheduleSlot: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule slot
       * @example 123456
       */
      id: number
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will start
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will finish
       * @example 11:30
       */
      endTime: string
      /**
       * @description The days of the week on which the schedule slot takes place
       * @example [Mon,Tue,Wed]
       */
      daysOfWeek: string[]
      /**
       * @description Indicates whether the schedule slot takes place on a Monday
       * @example true
       */
      mondayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Tuesday
       * @example true
       */
      tuesdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Wednesday
       * @example true
       */
      wednesdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Thursday
       * @example false
       */
      thursdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Friday
       * @example false
       */
      fridayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Saturday
       * @example false
       */
      saturdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Sunday
       * @example false
       */
      sundayFlag: boolean
    }
    /**
     * @description An activity tier
     * @example Tier 1, Tier 2, Foundation
     */
    ActivityTier: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity tier
       * @example 123456
       */
      id: number
      /**
       * @description The code for this activity tier
       * @example Tier1
       */
      code: string
      /**
       * @description The detailed description for this activity tier
       * @example Work, education and maintenance
       */
      description: string
    }
    /** @description An attendance record for a prisoner, can be marked or unmarked */
    Attendance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * @description The prison number this attendance record is for
       * @example A1234AA
       */
      prisonerNumber: string
      attendanceReason?: components['schemas']['AttendanceReason']
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      posted: boolean
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime?: string
      /**
       * @description The person who updated the attendance
       * @example A.JONES
       */
      recordedBy?: string
      /**
       * @description SCHEDULED, COMPLETED, CANCELLED.
       * @example SCHEDULED
       */
      status: string
      /**
       * Format: int32
       * @description The amount in pence to pay the prisoner for the activity
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int32
       * @description The bonus amount in pence to pay the prisoner for the activity
       * @example 50
       */
      bonusAmount?: number
      /** Format: int32 */
      pieces?: number
    }
    /** @description The reason for attending or not */
    AttendanceReason: {
      /**
       * Format: int64
       * @description The internally-generated ID for this absence reason
       * @example 123456
       */
      id: number
      /**
       * @description The reason codes - ABS, ACCAB, ATT, CANC, NREQ, SUS, UNACAB, REST
       * @example ABS
       */
      code: string
      /**
       * @description The detailed description for this attendance reason
       * @example Unacceptable absence
       */
      description: string
    }
    /** @description Defines one eligibility rule */
    EligibilityRule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this eligibility rule
       * @example 123456
       */
      id: number
      /**
       * @description The code for this eligibility rule
       * @example OVER_21
       */
      code: string
      /**
       * @description The description for this eligibility rule
       * @example The prisoner must be over 21 to attend
       */
      description: string
    }
    /**
     * @description An internal NOMIS location for an activity to take place
     * @example 98877667
     */
    InternalLocation: {
      /**
       * Format: int32
       * @description The NOMIS internal location id for this schedule
       * @example 98877667
       */
      id: number
      /**
       * @description The NOMIS internal location code for this schedule
       * @example EDU-ROOM-1
       */
      code: string
      /**
       * @description The NOMIS internal location description for this schedule
       * @example Education - R1
       */
      description: string
    }
    /** @description Describes a person who is on a waiting list for an activity */
    PrisonerWaiting: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prisoner waiting
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (NomisId) of the person on the waiting list
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int32
       * @description The priority of this person in the waiting list. The lower the number, the higher the priority
       * @example 1
       */
      priority: number
      /**
       * Format: date-time
       * @description The date and time when this person was added to the waiting list
       */
      createdTime: string
      /**
       * @description The staff members name who added this person to the waiting list
       * @example Adam Smith
       */
      createdBy: string
    }
    /** @description Describes one instance of an activity schedule */
    ScheduledInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /** @description The attendance records for this scheduled instance */
      attendances: components['schemas']['Attendance'][]
    }
    /** @description Describes the period of time an activity schedule has been suspended */
    Suspension: {
      /**
       * Format: date
       * @description The date from which the activity schedule was suspended
       * @example 2022-09-02
       */
      suspendedFrom: string
      /**
       * Format: date
       * @description The date until which the activity schedule was suspended. If null, the schedule is suspended indefinitely
       * @example 2022-09-02
       */
      suspendedUntil?: string
    }
    /** @description The create request with the new activity schedule details */
    ActivityScheduleCreateRequest: {
      /**
       * @description The unique description of this activity schedule
       * @example Entry level Maths 1
       */
      description: string
      /**
       * Format: date
       * @description The date on which this activity scheduled will start. This cannot be before to the activity start date.
       * @example 2022-12-23
       */
      startDate: string
      /**
       * Format: date
       * @description The (optional) date on which this activity scheduled will end. If supplied this must be after to the start date.
       * @example 2023-12-23
       */
      endDate?: string
      /**
       * Format: int64
       * @description The optional NOMIS internal location id for this schedule
       * @example 98877667
       */
      locationId?: number
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity?: number
      /** @description The days and times an activity schedule can take place */
      slots: components['schemas']['Slot'][]
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
    }
    /**
     * @description
     *     Describes time slot and day (or days) the scheduled activity would run. At least one day must be specified.
     *
     *     e.g. 'AM, Monday, Wednesday and Friday' or 'PM Tuesday, Thursday, Sunday'
     */
    Slot: {
      /**
       * @description The time slot of the activity schedule, morning afternoon or evening e.g. AM, PM or ED
       * @example AM
       */
      timeSlot: string
      monday: boolean
      tuesday: boolean
      wednesday: boolean
      thursday: boolean
      friday: boolean
      saturday: boolean
      sunday: boolean
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     *   this 'lite' version of ActivitySchedule does not have allocated or instances.
     */
    ActivityScheduleLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /**
       * @description The description of this activity schedule
       * @example Monday AM Houseblock 3
       */
      description: string
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
      /**
       * Format: date
       * @description The date on which this schedule will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this schedule will end. From this date, any schedules will be created as real, planned instances
       * @example 2022-10-21
       */
      endDate?: string
    }
    /** @description Describes the capacity and allocated slots of an activity or category */
    CapacityAndAllocated: {
      /**
       * Format: int32
       * @description The maximum number of people who can attend the category or activity
       * @example 30
       */
      capacity: number
      /**
       * Format: int32
       * @description The number of slots currently filled in the activity or category
       * @example 27
       */
      allocated: number
    }
    /** @description Describes one instance of an activity schedule */
    ActivityScheduleInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /** @description The list of attendees */
      attendances: components['schemas']['Attendance'][]
      activitySchedule: components['schemas']['ActivityScheduleLite']
    }
    /** @description Describes one instance of a prison which may or may not be active (rolled out) */
    RolloutPrison: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison
       * @example 123456
       */
      id: number
      /**
       * @description The code for this prison
       * @example PVI
       */
      code: string
      /**
       * @description The description for this prison
       * @example HMP Pentonville
       */
      description: string
      /**
       * @description Flag to indicate if this prison is presently active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date rolled out
       * @example 2022-09-30
       */
      rolloutDate?: string
      /**
       * @description Whether appointments are being fetched from the activities service (as opposed to the Prison API)
       * @example true
       */
      isAppointmentsEnabled: boolean
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Describes a top-level activity */
    PrisonRegime: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison regime
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example MDI
       */
      prisonCode: string
      /**
       * Format: partial-time
       * @description The start time for the am slot
       * @example 09:00
       */
      amStart: string
      /**
       * Format: partial-time
       * @description The end time for the am slot
       * @example 12:00
       */
      amFinish: string
      /**
       * Format: partial-time
       * @description The start time for the pm slot
       * @example 13:00
       */
      pmStart: string
      /**
       * Format: partial-time
       * @description The end time for the pm slot
       * @example 16:30
       */
      pmFinish: string
      /**
       * Format: partial-time
       * @description The start time for the ed slot
       * @example 18:00
       */
      edStart: string
      /**
       * Format: partial-time
       * @description The end time for the ed slot
       * @example 20:00
       */
      edFinish: string
    }
    Location: {
      /**
       * Format: int64
       * @description Location identifier.
       * @example 721705
       */
      locationId: number
      /**
       * @description Location type.
       * @example CELL
       */
      locationType: string
      /**
       * @description Location description.
       * @example MDI-RES-HB1-ALE
       */
      description: string
      /**
       * @description Identifier of Agency this location is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * @description What events this room can be used for.
       * @example APP
       */
      locationUsage?: string
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       * @example 26960
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       * @example 10
       */
      currentOccupancy?: number
      /**
       * @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.
       * @example RES-HB1-ALE
       */
      locationPrefix?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       * @example 20
       */
      operationalCapacity?: number
      /**
       * @description User-friendly location description.
       * @example RES-HB1-ALE
       */
      userDescription?: string
      /** @description Internal location code */
      internalLocationCode?: string
    }
    /** @description Location prefix response */
    LocationPrefixDto: {
      /**
       * @description Location prefix translated from group name
       * @example MDI-1-
       */
      locationPrefix: string
    }
    LocationGroup: {
      /**
       * @description The name of the group
       * @example Block A
       */
      name: string
      /**
       * @description A key for the group
       * @example A
       */
      key: string
      /**
       * @description The child groups of this group
       * @example [
       *   {
       *     "name": "Landing A/1",
       *     "key": "1"
       *   },
       *   {
       *     "name": "Landing A/2",
       *     "key": "2"
       *   }
       * ]
       */
      children: components['schemas']['LocationGroup'][]
    }
    /**
     * @description
     *   Summarises an appointment category for display purposes. Contains only properties needed to make additional API calls
     *   and to display.
     */
    AppointmentCategorySummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment category
       * @example 51
       */
      id: number
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      code: string
      /**
       * @description The description of the appointment category
       * @example Chaplaincy
       */
      description: string
    }
    /**
     * @description
     *   The top level appointment details for display purposes. Contains only properties needed to make additional API calls
     *   and to display.
     */
    AppointmentDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 12345
       */
      id: number
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *     Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences
       *
       * @example SKI
       */
      prisonCode: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or first appointment occurrence in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or first appointment occurrence in the series
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to the appointment
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
      /**
       * Format: date-time
       * @description The date and time this appointment was created. Will not change
       */
      created: string
      createdBy: components['schemas']['UserSummary']
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment was last changed.
       *     Will be null if the appointment has not been edited since it was created
       */
      updated?: string
      updatedBy?: components['schemas']['UserSummary']
      /**
       * @description
       *     Summary of the individual occurrence or occurrences of this appointment. Non recurring appointments will have a single
       *     appointment occurrence containing the same property values as the parent appointment. The same start date, time
       *     and end time. Recurring appointments will have a series of occurrences. The first in the series will also
       *     contain the same property values as the parent appointment and subsequent occurrences will have start dates
       *     following on from the original start date incremented as specified by the appointment's schedule. Each occurrence
       *     can be edited independently of the parent. All properties of an occurrence override those of the parent appointment
       *     with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the
       *     schedule will be created in advance.
       */
      occurrences: components['schemas']['AppointmentOccurrenceSummary'][]
      /**
       * @description
       *     Summary of the prisoner or prisoners allocated to the first future occurrence (or most recent past occurrence if all
       *     occurrences are in the past) of this appointment. Prisoners are allocated at the occurrence level to allow for per
       *     occurrence allocation changes. The occurrence summary contains a count of allocated prisoners rather than the full
       *     list as the expected usage is to show a summary of the occurrences then a link to display the full occurrence details.
       */
      prisoners: components['schemas']['PrisonerSummary'][]
    }
    /**
     * @description
     *   Summarises an appointment location for display purposes. Contains only properties needed to make additional API calls
     *   and to display. NOMIS is the current system of record for appointment locations and they are managed there.
     */
    AppointmentLocationSummary: {
      /**
       * Format: int64
       * @description The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       * @example 27
       */
      id: number
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The description of the appointment location. Mapped from AGENCY_INTERNAL_LOCATIONS.USER_DESC
       * @example Chapel
       */
      description: string
    }
    /**
     * @description
     *   Summarises a specific appointment occurrence. Will contain copies of the parent appointment's properties unless they
     *   have been changed on this appointment occurrence.
     */
    AppointmentOccurrenceSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence
       * @example 123456
       */
      id: number
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment occurrence is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment occurrence
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment occurrence
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to this appointment occurrence. Can be different to the parent appointment if this occurrence has
       *     been edited.
       *
       * @example This appointment occurrence has been rescheduled due to staff availability
       */
      comment: string
      /**
       * @description
       *     Indicates that this appointment occurrence has been independently changed from the original state it was in when
       *     it was created as part of a recurring series
       *
       * @example false
       */
      isEdited: boolean
      /**
       * @description
       *     Indicates that this appointment occurrence has been cancelled
       *
       * @example false
       */
      isCancelled: boolean
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment occurrence was last edited.
       *     Will be null if the appointment occurrence has not been independently changed from the original state it was in when
       *     it was created as part of a recurring series
       */
      updated?: string
      updatedBy?: components['schemas']['UserSummary']
      /**
       * Format: int32
       * @description
       *     The number of prisoners allocated to this appointment occurrence
       *
       * @example 3
       */
      prisonerCount: number
    }
    /**
     * @description
     *     Summary of the prisoner or prisoners allocated to the first future occurrence (or most recent past occurrence if all
     *     occurrences are in the past) of this appointment. Prisoners are allocated at the occurrence level to allow for per
     *     occurrence allocation changes. The occurrence summary contains a count of allocated prisoners rather than the full
     *     list as the expected usage is to show a summary of the occurrences then a link to display the full occurrence details.
     */
    PrisonerSummary: {
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The prisoner's first name
       * @example Albert
       */
      firstName: string
      /**
       * @description The prisoner's first name
       * @example Abbot
       */
      lastName: string
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *     The prisoner's residential cell location when inside the prison.
       *
       * @example A-1-002
       */
      cellLocation: string
    }
    /**
     * @description
     *     The summary of the last user to edit this appointment occurrence. Will be null if the appointment occurrence has not
     *     been independently changed from the original state it was in when it was created as part of a recurring series
     */
    UserSummary: {
      /**
       * Format: int64
       * @description The NOMIS STAFF_MEMBERS.STAFF_ID value for mapping to NOMIS.
       * @example 36
       */
      id: number
      /**
       * @description The NOMIS STAFF_USER_ACCOUNTS.USERNAME value for mapping to NOMIS
       * @example AAA01U
       */
      username: string
      /**
       * @description The user's first name
       * @example Alice
       */
      firstName: string
      /**
       * @description The user's last name
       * @example Akbar
       */
      lastName: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  markAttendances: {
    /**
     * Updates attendance records.
     * @description Updates the given attendance records with the supplied update request details. Requires the 'ACTIVITY_ADMIN' role.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendanceUpdateRequest'][]
      }
    }
    responses: {
      /** @description The attendance records were updated. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationsBy: {
    /**
     * Get a list of activity schedule allocations
     * @description Returns zero or more activity schedule allocations.
     */
    parameters: {
      /** @description If true will only return active allocations. Defaults to true. */
      query?: {
        activeOnly?: boolean
      }
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description The allocations for an activity schedule */
      200: {
        content: {
          'application/json': components['schemas']['Allocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  allocate: {
    /**
     * Allocate offender to schedule
     * @description Allocates the supplied offender allocation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    parameters: {
      path: {
        scheduleId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAllocationRequest']
      }
    }
    responses: {
      /** @description The allocation was created and added to the schedule. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsByPrisonAndPrisonerAndDateRange: {
    /**
     * Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.
     * @description
     *       Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.
     *       Court hearings, appointments and visits always come from NOMIS (via prison API).
     *       Activities come from either NOMIS or the new Activities database, depending on whether the prison is
     *       marked as rolled-out in the activities database.
     *       (Intended usage: Prisoner calendar)
     */
    parameters: {
      /** @description Prisoner number (required). Format A9999AA. */
      /** @description Start date of query (required). Format YYYY-MM-DD. */
      /** @description End date of query (required). Format YYYY-MM-DD. The end date must be within 3 months of the start date) */
      /** @description Time slot for the events (optional). If supplied, one of AM, PM or ED. */
      query: {
        prisonerNumber: string
        startDate: string
        endDate: string
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      /** @description The 3-digit prison code. */
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsByPrisonAndPrisonersAndDateRange: {
    /**
     * Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot
     * @description
     *       Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.
     *       Court hearings, appointments and visits always come from NOMIS (via prison API).
     *       Activities come from either NOMIS or the new activities database, depending on whether the prison is
     *       marked as rolled-out in the activities database.
     *       (Intended usage: Unlock list)
     */
    parameters: {
      /** @description The exact date to return events for (required) in format YYYY-MM-DD */
      /** @description Time slot of the events (optional). If supplied, one of AM, PM or ED. */
      query: {
        date: string
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      /** @description The 3-character prison code. */
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  prisonerAllocations: {
    /**
     * Get all allocations for prisoners
     * @description Returns zero or more allocations for the supplied list of prisoners.
     */
    parameters: {
      /** @description If true will only return active allocations. Defaults to true. */
      query?: {
        activeOnly?: boolean
      }
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The allocations for the prisoners */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerAllocations'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  triggerCreateScheduledInstancesJob: {
    /**
     * Trigger the job to create the scheduled instances in advance for the active schedules on activities
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': string
        }
      }
    }
  }
  triggerCreateAttendanceRecordsJob: {
    /**
     * Trigger the job to create attendance records in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': string
        }
      }
    }
  }
  createAppointment: {
    /**
     * Create an appointment or series of appointment occurrences
     * @description
     *     Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.
     *     Does not require any specific roles
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentCreateRequest']
      }
    }
    responses: {
      /** @description The appointment or series of appointment occurrences was created. */
      201: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  create: {
    /**
     * Create an activity
     * @description Create an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityCreateRequest']
      }
    }
    responses: {
      /** @description The activity was created. */
      201: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitySchedules: {
    /** Get the capacity and number of allocated slots in an activity */
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity schedules */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleLite']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addSchedule: {
    /**
     * Adds a new schedule to an existing activity
     * @description Adds a new schedule to an existing activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    parameters: {
      path: {
        activityId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityScheduleCreateRequest']
      }
    }
    responses: {
      /** @description The schedule was created and added to the activity. */
      201: {
        content: {
          'application/json': components['schemas']['ActivityScheduleLite']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduleId: {
    /**
     * Get an activity schedule by its id
     * @description Returns a single activity schedule by its unique identifier.
     */
    parameters: {
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityScheduleCapacity: {
    /** Get the capacity and number of allocated slots in an activity schedule */
    parameters: {
      path: {
        activityScheduleId: number
      }
    }
    responses: {
      /** @description Activity schedule capacity */
      200: {
        content: {
          'application/json': components['schemas']['CapacityAndAllocated']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledInstanceById: {
    /**
     * Get a scheduled instance by ID
     * @description Returns a scheduled instance.
     */
    parameters: {
      path: {
        instanceId: number
      }
    }
    responses: {
      /** @description Scheduled instance found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendancesByScheduledInstance: {
    /**
     * Get a list of attendances for a scheduled instance
     * @description Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.
     */
    parameters: {
      path: {
        instanceId: number
      }
    }
    responses: {
      /** @description Attendance records found */
      200: {
        content: {
          'application/json': components['schemas']['Attendance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonByCode: {
    /**
     * Get a prison by its code
     * @description Returns a single prison and its details by its unique code.
     */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison found */
      200: {
        content: {
          'application/json': components['schemas']['RolloutPrison']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The prison for this code was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getActivityScheduleInstancesByDateRange: {
    /**
     * Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)
     * @description Returns zero or more scheduled instances for a prison and date range (max 3 months).
     */
    parameters: {
      /** @description Start date of query (required). Format YYYY-MM-DD. */
      /** @description End date of query (required). The end date must be within 3 months of the start date. */
      /** @description The time slot (optional). If supplied, one of AM, PM or ED. */
      query: {
        startDate: string
        endDate: string
        slot?: 'AM' | 'PM' | 'ED'
      }
      /** @description The 3-character prison code. */
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled instance records found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSchedulesByPrisonCode: {
    /**
     * Get a list of activity schedules at a given prison
     * @description Returns zero or more activity schedules at a given prison.
     */
    parameters: {
      /** @description Date of activity, default today */
      /** @description AM, PM or ED */
      /** @description The internal NOMIS location id of the activity */
      query?: {
        date?: string
        timeSlot?: 'AM' | 'PM' | 'ED'
        locationId?: number
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Activity schedules found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonPayBands: {
    /**
     * Get a list of pay bands at a given prison
     * @description Returns the pay bands at a given prison or a default list of values if none present.
     */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison pay bands found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonPayBand'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledPrisonLocations: {
    /**
     * Get scheduled prison locations
     * @description Returns a list of zero or more scheduled prison locations for the supplied criteria.
     */
    parameters: {
      /** @description Date of activity, default today */
      /** @description AM, PM or ED */
      query?: {
        date?: string
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Locations found */
      200: {
        content: {
          'application/json': components['schemas']['InternalLocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityCategoryCapacity: {
    /** Get the capacity and number of allocated slots in an activity category within a prison */
    parameters: {
      path: {
        prisonCode: string
        categoryId: number
      }
    }
    responses: {
      /** @description Activity category capacity */
      200: {
        content: {
          'application/json': components['schemas']['CapacityAndAllocated']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitiesInCategory: {
    /** Get list of activities within a category at a specified prison */
    parameters: {
      path: {
        prisonCode: string
        categoryId: number
      }
    }
    responses: {
      /** @description Activities within the category */
      200: {
        content: {
          'application/json': components['schemas']['ActivityLite'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivities: {
    /** Get list of activities at a specified prison */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Activities */
      200: {
        content: {
          'application/json': components['schemas']['ActivityLite'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonRegimeByPrisonCode: {
    /**
     * Get a prison regime by its code
     * @description Returns a single prison regime and its details by its unique prison code.
     */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison regime found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonRegime']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The prison regime for this prison code was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellLocationsForGroup: {
    /**
     * List of cell locations for a prison group supplied as a query parameter
     * @description List of cell locations for a prison group supplied as a query parameter
     */
    parameters: {
      query: {
        groupName: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more cell locations found */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationPrefixForGroup: {
    /**
     * Get the location prefix for a location group supplied as a query parameter
     * @description Get location prefix for a location group name supplied as a query parameter
     */
    parameters: {
      query: {
        groupName: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - Location prefix found */
      200: {
        content: {
          'application/json': components['schemas']['LocationPrefixDto']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroups: {
    /**
     * List of all available location groups defined at a prison
     * @description List of all available location groups defined at a prison
     */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more location groups found */
      200: {
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentById: {
    /**
     * Get an appointment by its id
     * @description Returns an appointment and its details by its unique identifier.
     */
    parameters: {
      path: {
        appointmentId: number
      }
    }
    responses: {
      /** @description Appointment found */
      200: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentDetailsById: {
    /**
     * Gets the top level appointment details for display purposes identified by the appointment's id
     * @description Returns the displayable details of an appointment by its unique identifier.
     */
    parameters: {
      path: {
        appointmentId: number
      }
    }
    responses: {
      /** @description Appointment found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentCategories: {
    /** Get the list of top-level appointment categories */
    parameters?: {
      /** @description If true will return all appointment categories otherwise only active categories will be returned. Defaults to false. */
      query?: {
        includeInactive?: boolean
      }
    }
    responses: {
      /** @description Appointment categories found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentCategory'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationById: {
    /**
     * Get an allocation by its id
     * @description Returns a single allocation and its details by its unique identifier.
     */
    parameters: {
      path: {
        allocationId: number
      }
    }
    responses: {
      /** @description allocation found */
      200: {
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The allocation for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCategories: {
    /** Get the list of top-level activity categories */
    responses: {
      /** @description Activity categories found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityCategory'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityById: {
    /**
     * Get an activity by its id
     * @description Returns a single activity and its details by its unique identifier.
     */
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityCapacity: {
    /** Get the capacity and number of allocated slots in an activity */
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity capacity */
      200: {
        content: {
          'application/json': components['schemas']['CapacityAndAllocated']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
