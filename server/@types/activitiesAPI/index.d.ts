/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/schedules/{scheduleId}/deallocate': {
    /**
     * Deallocate offenders
     * @description Deallocates offenders from an activity schedule on a future date. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    put: operations['deallocate']
  }
  '/scheduled-instances/{instanceId}/uncancel': {
    /**
     * Un-cancels a scheduled instance.
     * @description Un-cancels a previously cancelled scheduled instance.
     */
    put: operations['uncancelScheduledInstance']
  }
  '/scheduled-instances/{instanceId}/cancel': {
    /**
     * Cancel a scheduled instance
     * @description Cancels scheduled instance and associated attendance records
     */
    put: operations['cancelScheduledInstance']
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/attendances': {
    /**
     * Updates attendance records.
     * @description Updates the given attendance records with the supplied update request details. Requires the 'ACTIVITY_ADMIN' role.
     */
    put: operations['markAttendances']
  }
  '/appointment-occurrences/{appointmentOccurrenceId}/cancel': {
    /**
     * Cancel an appointment occurrence or series of appointment occurrences
     * @description
     *     Cancel an appointment occurrence or series of appointment occurrences based on the applyTo property.
     *     Does not require any specific roles
     */
    put: operations['cancelAppointmentOccurrence']
  }
  '/schedules/{scheduleId}/allocations': {
    /**
     * Get a list of activity schedule allocations
     * @description Returns zero or more activity schedule allocations.
     */
    get: operations['getAllocationsBy']
    /**
     * Allocate offender to schedule
     * @description Allocates the supplied offender allocation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    post: operations['allocate']
  }
  '/scheduled-events/prison/{prisonCode}': {
    /**
     * Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.
     * @description
     *       Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.
     *       Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).
     *       Activities and appointments come from either NOMIS or the local database depending on whether the prison is
     *       marked as active for appointments and/or activities.
     *       (Intended usage: Prisoner calendar / schedule)
     */
    get: operations['getScheduledEventsForSinglePrisoner']
    /**
     * Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot
     * @description
     *       Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.
     *       Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).
     *       Activities and appointments come from either NOMIS or the local database depending on whether the prison is
     *       marked as rolled-out for activities and/or appointments.
     *       (Intended usage: Unlock list)
     */
    post: operations['getScheduledEventsForMultiplePrisoners']
  }
  '/prisons/{prisonCode}/prisoner-allocations': {
    /**
     * Get all allocations for prisoners
     * @description Returns zero or more allocations for the supplied list of prisoners.
     */
    post: operations['prisonerAllocations']
  }
  '/migrate-appointment': {
    /**
     * Create an appointment or series of appointment occurrences
     * @description
     *     Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.
     *     Does not require any specific roles
     */
    post: operations['migrateAppointment']
  }
  '/job/manage-attendance-records': {
    /**
     * Trigger the job to manage attendance records in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerManageAttendanceRecordsJob']
  }
  '/job/manage-allocations': {
    /**
     * Trigger the job to manage allocations
     * @description
     *         One or more operations to trigger for managing allocations.
     *
     *         Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerManageAllocationsJob']
  }
  '/job/create-scheduled-instances': {
    /**
     * Trigger the job to create the scheduled instances in advance for the active schedules on activities
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerCreateScheduledInstancesJob']
  }
  '/event-review/prison/{prison}/acknowledge': {
    /**
     * Acknowledge a list of change of circumstance events in the prison.
     * @description Used to indicate that a subset of change events have been acknowledged.
     */
    post: operations['acknowledgeEvents']
  }
  '/bulk-appointments': {
    /**
     * Bulk create a set of appointments
     * @description
     *     Create a list of appointments and allocate the supplied prisoner or prisoners to them.
     *     Does not require any specific roles
     */
    post: operations['bulkCreateAppointment']
  }
  '/audit/search': {
    /**
     * Search for audit records
     * @description Returns all records that match the search criteria.
     */
    post: operations['getAuditRecords']
  }
  '/appointments': {
    /**
     * Create an appointment or series of appointment occurrences
     * @description
     *     Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.
     *     Does not require any specific roles
     */
    post: operations['createAppointment']
  }
  '/appointment-occurrences/{prisonCode}/search': {
    /**
     * Search for appointment occurrences within the specified prison
     * @description
     *     Uses the supplied prison code and search parameters to filter and return appointment occurrence search results.
     *     Does not require any specific roles
     */
    post: operations['searchAppointmentOccurrences']
  }
  '/allocations/{prisonCode}/waiting-list-application': {
    /**
     * Add a prisoner to an activity schedule waiting list
     * @description Adds the supplied waiting list creation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    post: operations['addToWaitingList']
  }
  '/activities': {
    /**
     * Create an activity
     * @description Create an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    post: operations['create']
  }
  '/appointment-occurrences/{appointmentOccurrenceId}': {
    /**
     * Update an appointment occurrence or series of appointment occurrences
     * @description
     *     Update an appointment occurrence or series of appointment occurrences based on the applyTo property.
     *     Does not require any specific roles
     */
    patch: operations['updateAppointmentOccurrence']
  }
  '/allocations/{prisonCode}/allocationId/{allocationId}': {
    /**
     * Update an allocation
     * @description Update an allocation. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    patch: operations['update']
  }
  '/activities/{prisonCode}/activityId/{activityId}': {
    /**
     * Update an activity
     * @description Update an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    patch: operations['update_1']
  }
  '/synchronisation/attendance/{attendanceId}': {
    /**
     * Retrieves Nomis synchronisation details
     * @description Retrieves all details required in order to synchronise an attendance with the Nomis database. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getAttendanceSync']
  }
  '/schedules/{scheduleId}': {
    /**
     * Get an activity schedule by its id
     * @description Returns a single activity schedule by its unique identifier.
     */
    get: operations['getScheduleId']
  }
  '/schedules/{scheduleId}/suitability': {
    /**
     * Gets the suitability details of a candidate for an activity
     * @description Returns candidate suitability details considering factors such as, workplace risk assessment, incentive level, education levels, earliest release date and non-associations Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    get: operations['allocationSuitability']
  }
  '/schedules/{scheduleId}/candidates': {
    /**
     * Get the suitable candidates for an activity
     * @description Returns a paginated view of the list of candidates suitable for a given activity schedule. Filterable by employment status, workplace risk assessment, and incentive level. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
     */
    get: operations['candidates']
  }
  '/scheduled-instances/{instanceId}': {
    /**
     * Get a scheduled instance by ID
     * @description Returns a scheduled instance.
     */
    get: operations['getScheduledInstanceById']
  }
  '/scheduled-instances/{instanceId}/attendances': {
    /**
     * Get a list of attendances for a scheduled instance
     * @description Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.
     */
    get: operations['getAttendancesByScheduledInstance']
  }
  '/rollout/{prisonCode}': {
    /**
     * Get a prison's rollout plan by prison code
     * @description Returns a single prison and its activities management service rollout plan by its unique code.
     */
    get: operations['getPrisonByCode']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/prisons/{prisonCode}/scheduled-instances': {
    /**
     * Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)
     * @description Returns zero or more scheduled instances for a prison and date range (max 3 months).
     */
    get: operations['getActivityScheduleInstancesByDateRange']
  }
  '/prison/{prisonCode}/schedules': {
    /**
     * Get a list of activity schedules at a given prison
     * @description Returns zero or more activity schedules at a given prison.
     */
    get: operations['getSchedulesByPrisonCode']
  }
  '/prison/{prisonCode}/prison-pay-bands': {
    /**
     * Get a list of pay bands at a given prison
     * @description Returns the pay bands at a given prison or a default list of values if none present.
     */
    get: operations['getPrisonPayBands']
  }
  '/prison/{prisonCode}/locations': {
    /**
     * Get scheduled prison locations
     * @description Returns a list of zero or more scheduled prison locations for the supplied criteria.
     */
    get: operations['getScheduledPrisonLocations']
  }
  '/prison/{prisonCode}/activity-categories/{categoryId}/activities': {
    /** Get list of activities within a category at a specified prison */
    get: operations['getActivitiesInCategory']
  }
  '/prison/{prisonCode}/activities': {
    /** Get list of activities running at a specified prison. Optionally and by default, only currently LIVE activities are returned */
    get: operations['getActivities']
  }
  '/prison/prison-regime/{prisonCode}': {
    /**
     * Get a prison regime by its code
     * @description Returns a single prison regime and its details by its unique prison code.
     */
    get: operations['getPrisonRegimeByPrisonCode']
  }
  '/locations/prison/{prisonCode}': {
    /**
     * List of cell locations for a prison group supplied as a query parameter
     * @description List of cell locations for a prison group supplied as a query parameter
     */
    get: operations['getCellLocationsForGroup']
  }
  '/locations/prison/{prisonCode}/location-prefix': {
    /**
     * Get the location prefix for a location group supplied as a query parameter
     * @description Get location prefix for a location group name supplied as a query parameter
     */
    get: operations['getLocationPrefixForGroup']
  }
  '/locations/prison/{prisonCode}/location-groups': {
    /**
     * List of all available location groups defined at a prison
     * @description List of all available location groups defined at a prison
     */
    get: operations['getLocationGroups']
  }
  '/event-review/prison/{prisonCode}': {
    /**
     * Get events for a prison which may indicate that a change of circumstances affecting allocations had occurred
     * @description Returns events in the prison which match the search criteria provided.
     */
    get: operations['getEventsForReview']
  }
  '/bulk-appointment-details/{bulkAppointmentId}': {
    /**
     * Gets the details of a set of appointments created as part of a single bulk operation for display purposes
     * @description Returns the displayable details of a set of appointments created as part of a single bulk operation by its unique identifier.
     */
    get: operations['getBulkAppointmentDetailsById']
  }
  '/attendances/{prisonCode}/{sessionDate}': {
    /**
     * Get a daily list of attendances
     * @description Returns an attendance list.
     */
    get: operations['getAttendanceByDate']
  }
  '/attendances/{attendanceId}': {
    /**
     * Get an attendance by ID
     * @description Returns an attendance.
     */
    get: operations['getAttendanceById']
  }
  '/attendance-reasons': {
    /** Get the list of attendance reasons */
    get: operations['getAttendanceReasons']
  }
  '/appointments/{appointmentId}': {
    /**
     * Get an appointment by its id
     * @description Returns an appointment and its details by its unique identifier.
     */
    get: operations['getAppointmentById']
  }
  '/appointment-occurrence-details/{appointmentOccurrenceId}': {
    /**
     * Gets the appointment occurrence details for display purposes identified by the appointment occurrence's id
     * @description Returns the displayable details of an appointment occurrence by its unique identifier.
     */
    get: operations['getAppointmentOccurrenceDetailsById']
  }
  '/appointment-locations/{prisonCode}': {
    /** Get the list of appointment locations */
    get: operations['getAppointmentLocations']
  }
  '/appointment-instances/{appointmentInstanceId}': {
    /**
     * Get an appointment instance by its id
     * @description Returns an appointment instance and its details by its unique identifier.
     */
    get: operations['getAppointmentInstanceById']
  }
  '/appointment-details/{appointmentId}': {
    /**
     * Gets the top level appointment details for display purposes identified by the appointment's id
     * @description Returns the displayable details of an appointment by its unique identifier.
     */
    get: operations['getAppointmentDetailsById']
  }
  '/appointment-categories': {
    /** Get the list of appointment categories */
    get: operations['getAppointmentCategories']
  }
  '/allocations/id/{allocationId}': {
    /**
     * Get an allocation by its id
     * @description Returns a single allocation and its details by its unique identifier.
     */
    get: operations['getAllocationById']
  }
  '/allocations/deallocation-reasons': {
    /** Get the list of deallocation reasons */
    get: operations['getDeallocationReasons']
  }
  '/activity-categories': {
    /** Get the list of top-level activity categories */
    get: operations['getCategories']
  }
  '/activities/{activityId}': {
    /**
     * Get an activity by its id
     * @description Returns a single activity and its details by its unique identifier.
     */
    get: operations['getActivityById']
  }
  '/activities/{activityId}/schedules': {
    /** Get the capacity and number of allocated slots in an activity */
    get: operations['getActivitySchedules']
  }
  '/activities/{activityId}/filtered': {
    /**
     * Get an activity by its ID with limited instances (by date)
     * @description Returns a single activity by activity ID with limited instances.
     */
    get: operations['getActivityByIdWithFilters']
  }
  '/activities/{activityId}/basic': {
    /**
     * DO NOT USE:  Get an activity key ids - testing only
     * @description DO NOT USEL: Returns keys ids - testing only
     */
    get: operations['getActivityKeyIds']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description The prisoner deallocation request details */
    PrisonerDeallocationRequest: {
      /** @description The prisoner or prisoners to be deallocated. Must be allocated to the schedule affected by the request. */
      prisonerNumbers: string[]
      /**
       * @description The reason code for the deallocation
       * @example RELEASED
       * @enum {string}
       */
      reasonCode:
        | 'OTHER'
        | 'PERSONAL'
        | 'PROBLEM'
        | 'REMOVED'
        | 'SECURITY'
        | 'UNACCEPTABLE_ATTENDANCE'
        | 'UNACCEPTABLE_BEHAVIOUR'
        | 'WITHDRAWN'
      /**
       * Format: date
       * @description The future date on which this allocation will end. Must not exceed the end date of the allocation, schedule or activity.
       * @example 2023-05-24
       */
      endDate: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The uncancel request with the user details */
    UncancelScheduledInstanceRequest: {
      /**
       * @description The username of the user performing the unschedule operation
       * @example RJ56DDE
       */
      username: string
      /**
       * @description The displayName of the user performing the unschedule operation
       * @example Bob Adams
       */
      displayName: string
    }
    /** @description The scheduled instance cancellation request */
    ScheduleInstanceCancelRequest: {
      /**
       * @description The reason for cancelling the schedule instance
       * @example No tutor available
       */
      reason: string
      /**
       * @description The username of the user cancelling the schedule instance
       * @example RJ56DDE
       */
      username: string
      /**
       * @description A field for any additional comments
       * @example Resume tomorrow
       */
      comment?: string
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request object for updating an attendance record */
    AttendanceUpdateRequest: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * @description The prison code
       * @example MDI
       */
      prisonCode: string
      /**
       * @description The status - WAITING, COMPLETED
       * @example WAITING
       * @enum {string}
       */
      status: 'WAITING' | 'COMPLETED'
      /**
       * @description The reason codes- SICK, REFUSED, NOT_REQUIRED, REST, CLASH, OTHER, SUSPENDED, CANCELLED, ATTENDED
       * @example ATTENDED
       */
      attendanceReason?: string
      /**
       * @description Comments such as more detail for SICK
       * @example Prisoner has COVID-19
       */
      comment?: string
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description Case note provided for REFUSED
       * @example Prisoner refused to attend the scheduled activity without reasonable excuse
       */
      caseNote?: string
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
      /**
       * @description The absence reason for OTHER
       * @example Prisoner has another reason for missing the activity
       */
      otherAbsenceReason?: string
    }
    /** @description The cancel request with the appointment occurrence details and how to apply the cancellation */
    AppointmentOccurrenceCancelRequest: {
      /**
       * Format: int64
       * @description
       *     Specifies the id of the reason for the cancellation. The cancellation reason, identified byt this ID, will determine
       *     whether the cancellation is also treated as a soft delete
       *
       * @example 1234
       */
      cancellationReasonId: number
      /**
       * @description
       *     Specifies which appointment occurrence or occurrences this cancellation should apply to.
       *     Defaults to THIS_OCCURRENCE meaning the cancellation will be applied to the appointment occurrence specified by the
       *     supplied id only.
       *
       * @example THIS_OCCURRENCE
       * @enum {string}
       */
      applyTo: 'THIS_OCCURRENCE' | 'THIS_AND_ALL_FUTURE_OCCURRENCES' | 'ALL_FUTURE_OCCURRENCES'
    }
    /**
     * @description
     *   The top level appointment containing the initial values for all appointment properties.
     *   Joins together one or more appointment occurrences and optionally a schedule if the appointment is recurring.
     *   The child appointment occurrences will by default have the same property values.
     *   The occurrence property values can be changed independently to support rescheduling, cancelling and altered
     *   attendee lists at an individual occurrence level.
     *   Editing a property at the appointment level will cascade the edit to all *future* child occurrences
     */
    Appointment: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 12345
       */
      id: number
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or first appointment occurrence in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or first appointment occurrence in the series
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to the appointment.
       *     The default value if no notes are specified at the occurrence or instance levels
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
      /**
       * Format: date-time
       * @description The date and time this appointment was created. Will not change
       */
      created: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that created the appointment.
       *     Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment was last changed.
       *     Will be null if the appointment has not been altered since it was created
       */
      updated?: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that edited the appointment.
       *     Will be null if the appointment has not been altered since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
      schedule?: components['schemas']['AppointmentSchedule']
      /**
       * @description
       *     The individual occurrence or occurrences of this appointment. Non recurring appointments will have a single
       *     appointment occurrence containing the same property values as the parent appointment. The same start date, time
       *     and end time. Recurring appointments will have a series of occurrences. The first in the series will also
       *     contain the same property values as the parent appointment and subsequent occurrences will have start dates
       *     following on from the original start date incremented as specified by the appointment's schedule. Each occurrence
       *     can be edited independently of the parent. All properties of an occurrence override those of the parent appointment
       *     with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the
       *     schedule will be created in advance.
       */
      occurrences: components['schemas']['AppointmentOccurrence'][]
    }
    /**
     * @description
     *   Represents a specific appointment occurrence. Non recurring appointments will have a single appointment occurrence
     *   containing the same property values as the parent appointment. The same start date, time and end time. Recurring
     *   appointments will have a series of occurrences. The first in the series will also contain the same property values
     *   as the parent appointment and subsequent occurrences will have start dates following on from the original start date
     *   incremented as specified by the appointment's schedule. Each occurrence can be edited independently of the parent.
     *   All properties of an occurrence override those of the parent appointment with a null coalesce back to the parent for
     *   nullable properties. The full series of occurrences specified by the schedule will be created in advance.
     */
    AppointmentOccurrence: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The sequence number of this appointment occurrence within the recurring appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment occurrence is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment occurrence
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment occurrence
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to this appointment occurrence.
       *     The comment value from the parent appointment will be used if this is null
       *
       * @example This appointment occurrence has been rescheduled due to staff availability
       */
      comment?: string
      /**
       * Format: date-time
       * @description
       *     The time at which this appointment occurrence was cancelled (if applicable).
       */
      cancelled?: string
      /**
       * Format: int64
       * @description
       *     The ID of the reason why this appointment occurrence was cancelled (if applicable).
       *
       * @example 12345
       */
      cancellationReasonId?: number
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that cancelled this appointment instance (if applicable).
       *     Usually a NOMIS username. Will be null if the appointment occurrence has not been altered independently from the
       *     parent appointment since it was created
       *
       * @example AAA01U
       */
      cancelledBy?: string
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment occurrence was last changed.
       *     Will be null if the appointment occurrence has not been altered independently from the parent appointment
       *     since it was created
       */
      updated?: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that edited this appointment instance.
       *     Usually a NOMIS username. Will be null if the appointment occurrence has not been altered independently from the
       *     parent appointment since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
      /**
       * @description
       *     The prisoner or prisoners attending this appointment occurrence. Single appointments such as medical will have one
       *     allocation record. A group appointment e.g. gym or chaplaincy sessions will have more than one allocation record.
       *     Allocations are at the occurrence level supporting alteration of attendees in any future occurrence.
       *     When viewing or editing a recurring appointment, the allocations from the next appointment occurrence in the series
       *     will be used.
       */
      allocations: components['schemas']['AppointmentOccurrenceAllocation'][]
      isCancelled: boolean
    }
    /**
     * @description
     *   The allocation of a prisoner to an appointment occurrence. Appointments of type INDIVIDUAL will have one prisoner
     *   allocated to each appointment occurrence. Appointments of type GROUP can have more than one prisoner allocated to each
     *   appointment occurrence
     */
    AppointmentOccurrenceAllocation: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence allocation
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
    }
    /**
     * @description
     *   Describes the recurrence of an appointment. The days of the week an occurrence of the appointment will be scheduled
     *   and the end date of the series.
     */
    AppointmentSchedule: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment schedule
       * @example 12345
       */
      id: number
      /**
       * Format: date
       * @description
       *     The date the series of appointment occurrences should end. The UI will provide options to specify an end date or
       *     a number of occurrences. The later case should be used to calculate the end date internally
       */
      endDate: string
      /**
       * @description Indicates the appointment reoccurs every Monday
       * @example false
       */
      mondayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Tuesday
       * @example true
       */
      tuesdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Wednesday
       * @example false
       */
      wednesdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Thursday
       * @example false
       */
      thursdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Friday
       * @example false
       */
      fridayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Saturday
       * @example false
       */
      saturdayFlag: boolean
      /**
       * @description Indicates the appointment reoccurs every Sunday
       * @example false
       */
      sundayFlag: boolean
    }
    /** @description The prisoner allocation request details */
    PrisonerAllocationRequest: {
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner
       * @example 1
       */
      payBandId: number
      /**
       * Format: date
       * @description The future date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
    }
    /** @description Describes a prisons scheduled events */
    PrisonerScheduledEvents: {
      /**
       * @description The prison code for these scheduled events
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The set of prisoner numbers for theses scheduled events
       * @example ['GF10101', 'GR123YI']
       */
      prisonerNumbers?: string[]
      /**
       * Format: date
       * @description The start date for this collection of scheduled events
       * @example 2022-11-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date (inclusive) for this collection of scheduled events
       * @example 2022-11-28
       */
      endDate?: string
      /** @description A list of scheduled appointments for this prisoner in this date range */
      appointments?: components['schemas']['ScheduledEvent'][]
      /** @description A list of (active) scheduled court hearings for this prisoner in this date range */
      courtHearings?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled visits for this prisoner in this date range */
      visits?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled activities for this prisoner in this date range */
      activities?: components['schemas']['ScheduledEvent'][]
      /** @description A list of external transfers for this prisoner in this date range */
      externalTransfers?: components['schemas']['ScheduledEvent'][]
      /** @description A list of adjudications for this prisoner in this date range */
      adjudications?: components['schemas']['ScheduledEvent'][]
    }
    /** @description Describes a scheduled event */
    ScheduledEvent: {
      /**
       * @description The prison code for this scheduled event
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The source of this event - valid values are NOMIS or SAA (scheduling activities and appointments)
       * @example NOMIS
       */
      eventSource?: string
      /**
       * @description The event type (APPOINTMENT, ACTIVITY, COURT_HEARING, EXTERNAL_TRANSFER, ADJUDICATION_HEARING, VISIT)
       * @example APPOINTMENT
       */
      eventType?: string
      /**
       * Format: int64
       * @description For activities from SAA the ID for the activity scheduled instance, or null when from NOMIS
       * @example 9999
       */
      scheduledInstanceId?: number
      /**
       * Format: int64
       * @description For appointments from SAA the ID for the appointment, or null when from NOMIS
       * @example 9999
       */
      appointmentId?: number
      /**
       * Format: int64
       * @description For appointments from SAA the ID for the appointment occurrence, or null when from NOMIS
       * @example 9999
       */
      appointmentOccurrenceId?: number
      /**
       * Format: int64
       * @description For appointments from SAA the ID for the appointment instance, or null when from NOMIS
       * @example 9999
       */
      appointmentInstanceId?: number
      /**
       * @description For appointments from SAA the optional appointment description
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      /**
       * Format: int64
       * @description For adjudication hearings from NOMIS the ID for the OIC hearing, or null for other types
       * @example 9999
       */
      oicHearingId?: number
      /**
       * Format: int64
       * @description The event ID for events from NOMIS, otherwise null if from SAA
       * @example 10001
       */
      eventId?: number
      /**
       * Format: int64
       * @description The booking id of the prisoner this event relates to.
       * @example 10001
       */
      bookingId?: number
      /**
       * Format: int64
       * @description The NOMIS internal location id where this event takes place
       * @example 10001
       */
      internalLocationId?: number
      /**
       * @description The NOMIS location code for this event
       * @example MDI-HB1-EDUCATION-RM1
       */
      internalLocationCode?: string
      /**
       * @description The NOMIS location description for this event
       * @example Education Room One
       */
      internalLocationDescription?: string
      /**
       * @description Event category code (e.g appointment category code, activity category code)
       * @example GOVE
       */
      categoryCode?: string
      /**
       * @description Event category description.
       * @example Governor
       */
      categoryDescription?: string
      /**
       * @description The event summary to show on unlock lists, schedules and calendars
       * @example Court hearing
       */
      summary?: string
      /**
       * @description Any comments supplied that relate to this event
       * @example Reception for 8am please.
       */
      comments?: string
      /**
       * @description Set to true if this event will take place in the prisoner's cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Set to true if this event takes place outside the prison
       * @example false
       */
      outsidePrison: boolean
      /**
       * @description Set to true if this event has been cancelled
       * @example false
       */
      cancelled: boolean
      /**
       * @description Set to true if this prisoner is suspended for this event (only applies to activities)
       * @example false
       */
      suspended: boolean
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber?: string
      /**
       * Format: date
       * @description The specific date for this event
       * @example 2022-09-30
       */
      date?: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime?: string
      /**
       * Format: int32
       * @description The event priority - configurable by prison, or via defaults.
       */
      priority: number
    }
    /** @description A prisoner who is allocated to an activity */
    Allocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this allocation
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The offender booking id
       * @example 10001
       */
      bookingId: number
      activitySummary: string
      /** Format: int64 */
      scheduleId: number
      scheduleDescription: string
      /** @description Indicates whether this allocation is to an activity within the 'Not in work' category */
      isUnemployment: boolean
      prisonPayBand: components['schemas']['PrisonPayBand']
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was allocated to the activity
       */
      allocatedTime?: string
      /**
       * @description The person who allocated the prisoner to the activity
       * @example Mr Blogs
       */
      allocatedBy?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was deallocated from the activity
       */
      deallocatedTime?: string
      /**
       * @description The person who deallocated the prisoner from the activity
       * @example Mrs Blogs
       */
      deallocatedBy?: string
      deallocatedReason?: components['schemas']['DeallocationReason']
      /**
       * Format: date-time
       * @description The date and time the allocation was suspended
       */
      suspendedTime?: string
      /**
       * @description The person who suspended the prisoner from the activity
       * @example Mrs Blogs
       */
      suspendedBy?: string
      /**
       * @description The descriptive reason why this prisoner was suspended from the activity
       * @example Temporarily released from prison
       */
      suspendedReason?: string
      /**
       * @description The status of the allocation
       * @example ACTIVE
       * @enum {string}
       */
      status: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'AUTO_SUSPENDED' | 'ENDED'
      plannedDeallocation?: components['schemas']['PlannedDeallocation']
    }
    /**
     * @description The code and descriptive reason why this prisoner was deallocated from the activity
     * @example PLANNED
     */
    DeallocationReason: {
      /**
       * @description The code for the deallocation reason
       * @example RELEASED
       */
      code: string
      /**
       * @description The description for the deallocation reason
       * @example Released from prison
       */
      description: string
    }
    /** @description Describes one instance of a planned deallocation */
    PlannedDeallocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this planned de-allocation
       * @example 24
       */
      id: number
      /**
       * Format: date
       * @description The planned de-allocation date
       * @example 2023-07-31
       */
      plannedDate: string
      /**
       * @description The person who planned the de-allocation
       * @example ADMIN
       */
      plannedBy: string
      plannedReason: components['schemas']['DeallocationReason']
      /**
       * Format: date-time
       * @description The system time when the de-allocation plan was made
       */
      plannedAt: string
    }
    /** @description Describes one instance of a prison pay band */
    PrisonPayBand: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison pay band
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The order in which the pay band should be presented within a list e.g. dropdown
       * @example 1
       */
      displaySequence: number
      /**
       * @description The alternative text to use in place of the description e.g. Low, Medium, High
       * @example Low
       */
      alias: string
      /**
       * @description The description of pay band in this prison
       * @example Pay band 1
       */
      description: string
      /**
       * Format: int32
       * @description The pay band number this is associated with in NOMIS (1-10)
       * @example 1
       */
      nomisPayBand: number
      /**
       * @description The prison code for the pay band. Can also be 'DEFAULT' if none set up for prison
       * @example MDI
       */
      prisonCode: string
    }
    /** @description Describes a prisoners allocations */
    PrisonerAllocations: {
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /** @description The list of allocations for the prisoner */
      allocations: components['schemas']['Allocation'][]
    }
    /** @description The migration request with the appointment details */
    AppointmentMigrateRequest: {
      /**
       * @description The NOMIS prison code where this appointment takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner to allocate to the appointment
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The NOMIS reference code for this appointment.
       * @example CHAP
       */
      categoryCode: string
      /**
       * Format: int64
       * @description
       *     The NOMIS internal location id within the specified prison.
       *
       * @example 123
       */
      internalLocationId: number
      /**
       * Format: date
       * @description The date of the appointment
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to the appointment.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment?: string
      /**
       * @description
       *     Indicates that this appointment has been cancelled
       *
       * @example false
       */
      isCancelled?: boolean
      /**
       * Format: date-time
       * @description The date and time this appointment was created
       */
      created: string
      /**
       * @description
       *     The username of the user authenticated via NOMIS/HMPPS auth that created the appointment
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment was last changed
       */
      updated?: string
      /**
       * @description
       *     The username of the user authenticated via NOMIS/HMPPS auth that modified the appointment
       *
       * @example AAA01U
       */
      updatedBy?: string
    }
    /** @description The prisoner allocation request details */
    EventAcknowledgeRequest: {
      /**
       * @description The list of IDs to acknowledge
       * @example [
       *   3,
       *   5,
       *   6
       * ]
       */
      eventReviewIds: number[]
    }
    /** @description The create request containing the new appointments */
    BulkAppointmentsRequest: {
      /**
       * @description The NOMIS prison code where these appointments takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The NOMIS reference code for these appointments. Must exist and be active
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description
       *     Free text description for these appointments.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      /**
       * Format: int64
       * @description
       *     The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *     The internal location id must exist, must be within the prison specified by the prisonCode property and be active.
       *
       * @example 123
       */
      internalLocationId: number
      /**
       * @description
       *     Flag to indicate if the location of the appointments is in cell rather than an internal prison location.
       *     Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointments
       */
      startDate: string
      /**
       * @description
       *     The list of appointments to create
       */
      appointments: components['schemas']['IndividualAppointment'][]
    }
    /**
     * @description
     *     The list of appointments to create
     */
    IndividualAppointment: {
      /**
       * @description The prisoner to allocate to the created appointment
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment
       * @example 10:30
       */
      endTime: string
      /**
       * @description
       *     Notes relating to the appointment.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
    }
    /** @description Describes a set of appointments created as part of a single bulk operation */
    BulkAppointment: {
      /**
       * Format: int64
       * @description The internally generated identifier for this set of appointments
       * @example 12345
       */
      id: number
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /** @description The set of appointments created in bulk */
      appointments: components['schemas']['Appointment'][]
      /**
       * Format: date-time
       * @description The date and time this set of appointment was created in bulk. Will not change
       */
      created: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that created this set of appointments in bulk.
       *     Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
    }
    /** @description Set of search filters for searching audit records */
    AuditRecordSearchFilters: {
      /**
       * @description The code of the prison
       * @example PVI
       */
      prisonCode?: string
      /**
       * @description The prisoner number
       * @example A1234AA
       */
      prisonerNumber?: string
      /**
       * @description The username of the logged-in user
       * @example JONESA
       */
      username?: string
      /**
       * @description The top-level audit category
       * @example ACTIVITY
       * @enum {string}
       */
      auditType?: 'PRISONER' | 'ACTIVITY'
      /**
       * @description The specific event type
       * @example ACTIVITY_CREATED
       * @enum {string}
       */
      auditEventType?:
        | 'ACTIVITY_CREATED'
        | 'ACTIVITY_UPDATED'
        | 'BONUS_PAYMENT_MADE_FOR_ACTIVITY_ATTENDANCE'
        | 'INCENTIVE_LEVEL_WARNING_GIVEN_FOR_ACTIVITY_ATTENDANCE'
        | 'PRISONER_ACCEPTED_FROM_WAITING_LIST'
        | 'PRISONER_ADDED_TO_WAITING_LIST'
        | 'PRISONER_ALLOCATED'
        | 'PRISONER_DEALLOCATED'
        | 'PRISONER_REJECTED_FROM_WAITING_LIST'
        | 'PRISONER_SUSPENDED_FROM_ACTIVITY'
        | 'PRISONER_UNSUSPENDED_FROM_ACTIVITY'
      /**
       * Format: date-time
       * @description The date and time on or after which to search for events
       */
      startTime?: string
      /**
       * Format: date-time
       * @description The date and time on or before which to search for events
       */
      endTime?: string
      /**
       * Format: int64
       * @description The ID of the activity
       * @example 123456
       */
      activityId?: number
      /**
       * Format: int64
       * @description The ID of the activity schedule
       * @example 123456
       */
      scheduleId?: number
    }
    /** @description Describes a system even that has been recorded for audit purposes */
    LocalAuditRecord: {
      /**
       * Format: int64
       * @description The internally-generated ID for this audit record
       * @example 123456
       */
      localAuditId: number
      /**
       * @description The username of the logg-in user that triggered this event
       * @example JONESA
       */
      username: string
      /**
       * @description The top-level audit category
       * @example ACTIVITY
       * @enum {string}
       */
      auditType: 'PRISONER' | 'ACTIVITY'
      /**
       * @description The specific event type
       * @example ACTIVITY_CREATED
       * @enum {string}
       */
      auditEventType:
        | 'ACTIVITY_CREATED'
        | 'ACTIVITY_UPDATED'
        | 'BONUS_PAYMENT_MADE_FOR_ACTIVITY_ATTENDANCE'
        | 'INCENTIVE_LEVEL_WARNING_GIVEN_FOR_ACTIVITY_ATTENDANCE'
        | 'PRISONER_ACCEPTED_FROM_WAITING_LIST'
        | 'PRISONER_ADDED_TO_WAITING_LIST'
        | 'PRISONER_ALLOCATED'
        | 'PRISONER_DEALLOCATED'
        | 'PRISONER_REJECTED_FROM_WAITING_LIST'
        | 'PRISONER_SUSPENDED_FROM_ACTIVITY'
        | 'PRISONER_UNSUSPENDED_FROM_ACTIVITY'
      /**
       * Format: date-time
       * @description The date and time at which this event occurred
       */
      recordedTime: string
      /**
       * @description The code of the prison to which the event relates
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner number (if any) to which the event relates
       * @example A1234AA
       */
      prisonerNumber?: string
      /**
       * Format: int64
       * @description The ID of the activity (if any) to which the event relates
       * @example 123456
       */
      activityId?: number
      /**
       * Format: int64
       * @description The ID of the activity schedule (if any) to which the event relates
       * @example 123456
       */
      activityScheduleId?: number
      /**
       * @description A descriptive message of the event
       * @example An activity called 'Some Activity'(1) with category C and starting on 2023-03-23 at prison PBI was created. Event created on 2023-03-22 at 09:00:03 by Bob.
       */
      message: string
    }
    /** @description The result of an audit record search */
    LocalAuditSearchResults: {
      /** @description The matching records */
      content: components['schemas']['LocalAuditRecord'][]
      /**
       * Format: int32
       * @description The current page number
       * @example 0
       */
      pageNumber: number
      /**
       * Format: int32
       * @description The total number of pages
       * @example 5
       */
      totalPages: number
    }
    /** @description The create request with the new appointment or series of appointment occurrences details */
    AppointmentCreateRequest: {
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS prison code where this appointment takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner or prisoners to allocate to the created appointment or series of appointment occurrences
       * @example [
       *   "A1234BC"
       * ]
       */
      prisonerNumbers: string[]
      /**
       * @description The NOMIS reference code for this appointment. Must exist and be active
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      /**
       * Format: int64
       * @description
       *     The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *     The internal location id must exist, must be within the prison specified by the prisonCode property and be active.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or first appointment occurrence in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or first appointment occurrence in the series
       * @example 10:30
       */
      endTime: string
      repeat?: components['schemas']['AppointmentRepeat']
      /**
       * @description
       *     Notes relating to the appointment.
       *     The default value if no notes are specified at the occurrence or instance levels
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
    }
    /**
     * @description
     *   Describes how an appointment will repeat. The period or frequency of those occurrences and how many occurrences there
     *   will be in total in the series.
     */
    AppointmentRepeat: {
      /**
       * @description
       *     The period or frequency of the occurrences in the repeating appointment series. When they will repeat and how often
       *
       * @example WEEKLY
       * @enum {string}
       */
      period: 'WEEKDAY' | 'DAILY' | 'WEEKLY' | 'FORTNIGHTLY' | 'MONTHLY'
      /**
       * Format: int32
       * @description
       *     The total number of occurrences in the appointment series
       *
       * @example 6
       */
      count: number
    }
    /** @description The search parameters to use to filter appointment occurrences */
    AppointmentOccurrenceSearchRequest: {
      /**
       * @description
       *     The appointment type (INDIVIDUAL or GROUP) match with the parent appointments. Will restrict the search results to
       *     appointment occurrences that have a parent appointment with the matching type when this search parameter is supplied.
       *
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType?: 'INDIVIDUAL' | 'GROUP'
      /**
       * Format: date
       * @description
       *     The start date to match with the appointment occurrences. Will restrict the search results to appointment
       *     occurrences that have the matching start date when this search parameter is supplied but no end date is supplied.
       *     When an end date is also supplied, the search uses a date range and will restrict the search results to appointment
       *     occurrences that have a start date within the date range.
       */
      startDate: string
      /**
       * Format: date
       * @description
       *     The end date of the date range to match with the appointment occurrences. Start date must be supplied if an end date
       *     is specified. Will restrict the search results to appointment occurrences that have a start date within the date range.
       */
      endDate?: string
      /**
       * @description
       *     The time slot to match with the appointment occurrences. Will restrict the search results to appointment occurrences
       *     that have a start time between the times defined by the prison for that time slot when this search parameter is
       *     supplied.
       *
       * @example PM
       * @enum {string}
       */
      timeSlot?: 'AM' | 'PM' | 'ED'
      /**
       * @description
       *     The NOMIS reference code to match with the parent appointments. Will restrict the search results to appointment
       *     occurrences that have a parent appointment with the matching category code when this search parameter is supplied.
       *
       * @example GYMW
       */
      categoryCode?: string
      /**
       * Format: int64
       * @description
       *     The NOMIS internal location id to match with the appointment occurrences. Will restrict the search results to
       *     appointment occurrences that have the matching internal location id when this search parameter is supplied.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     The in cell flag value to match with the appointment occurrences. Will restrict the search results to appointment
       *     occurrences that have the matching in cell value when this search parameter is supplied.
       *
       * @example false
       */
      inCell?: boolean
      /**
       * @description
       *     The allocated prisoner or prisoners to match with the appointment occurrences. Will restrict the search results to
       *     appointment occurrences that have the at least one of the supplied prisoner numbers allocated to them when this
       *     search parameter is supplied.
       *
       * @example [
       *   "A1234BC"
       * ]
       */
      prisonerNumbers?: string[]
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth to match with the parent appointments. Will restrict the
       *     search results to appointment occurrences that have a parent appointment created by this username when this search
       *     parameter is supplied.
       *
       * @example AAA01U
       */
      createdBy?: string
    }
    /**
     * @description
     *   Summarises an appointment category for display purposes. Contains only properties needed to make additional API calls
     *   and to display.
     */
    AppointmentCategorySummary: {
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      code: string
      /**
       * @description The description of the appointment category
       * @example Chaplaincy
       */
      description: string
    }
    /**
     * @description
     *   Summarises an appointment location for display purposes. Contains only properties needed to make additional API calls
     *   and to display. NOMIS is the current system of record for appointment locations and they are managed there.
     */
    AppointmentLocationSummary: {
      /**
       * Format: int64
       * @description The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       * @example 27
       */
      id: number
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The description of the appointment location. Mapped from AGENCY_INTERNAL_LOCATIONS.USER_DESC
       * @example Chapel
       */
      description: string
    }
    /**
     * @description
     *   Summary search result details of a specific appointment occurrence found via search. Will contain copies of the parent
     *   appointment's properties unless they have been changed on this appointment occurrence. Contains properties needed to
     *   make additional API calls and to populate a table of search results.
     */
    AppointmentOccurrenceSearchResult: {
      /**
       * Format: int64
       * @description The internally generated identifier for the parent appointment
       * @example 12345
       */
      appointmentId: number
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence
       * @example 123456
       */
      appointmentOccurrenceId: number
      /**
       * @description The parent appointment's type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *     Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *     The appointment name
       */
      appointmentName: string
      /**
       * @description
       *     The prisoner or prisoners attending this appointment occurrence. Appointments of type INDIVIDUAL will have one
       *     prisoner allocated to each appointment occurrence. Appointments of type GROUP can have more than one prisoner
       *     allocated to each appointment occurrence
       */
      allocations: components['schemas']['AppointmentOccurrenceAllocation'][]
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment occurrence is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment occurrence
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment occurrence
       * @example 13:30
       */
      endTime?: string
      /**
       * @description Indicates whether the parent appointment was specified to repeat
       * @example false
       */
      isRepeat: boolean
      /**
       * Format: int32
       * @description The sequence number of this appointment occurrence within the recurring appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * Format: int32
       * @description The sequence number of the final appointment occurrence within the recurring appointment series
       * @example 6
       */
      maxSequenceNumber: number
      /**
       * @description Indicates whether this appointment occurrence has been changed from its original state
       * @example false
       */
      isEdited: boolean
      /**
       * @description Indicates whether this appointment occurrence has been cancelled
       * @example false
       */
      isCancelled: boolean
      /**
       * @description Indicates whether this appointment occurrence has expired
       * @example false
       */
      isExpired: boolean
    }
    /** @description The request with the prisoner waiting list details */
    WaitingListApplicationRequest: {
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule (assumes 1-2-1 with activity)
       * @example 7654321
       */
      activityScheduleId: number
      /**
       * Format: date
       * @description The past or present date on which the waitlist application was requested
       * @example 2023-06-23
       */
      applicationDate: string
      /**
       * @description The person who made the request
       * @example Fred Bloggs
       */
      requestedBy: string
      /**
       * @description Any particular comments related to the waiting list request
       * @example The prisoner has specifically requested to attend this activity
       */
      comments?: string
      /**
       * @description The status of the application
       * @example PENDING
       * @enum {string}
       */
      status: 'APPROVED' | 'DECLINED' | 'PENDING'
    }
    /** @description The create request with the new activity details */
    ActivityCreateRequest: {
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession?: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      /**
       * Format: int64
       * @description The category id for this activity, one of the high-level categories
       */
      categoryId: number
      /**
       * Format: int64
       * @description The tier id for this activity, as defined by the Future Prison Regime team
       * @example 1
       */
      tierId?: number
      /**
       * @description A list of eligibility rules ids which apply to this activity.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      eligibilityRuleIds: number[]
      /** @description The list of pay rates that can apply to this activity */
      pay: components['schemas']['ActivityPayCreateRequest'][]
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel: string
      /**
       * Format: date
       * @description The future date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-12-23
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-23
       */
      endDate?: string
      /** @description The list of minimum education levels that apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevelCreateRequest'][]
      /**
       * Format: int64
       * @description The optional NOMIS internal location id for this schedule
       * @example 98877667
       */
      locationId?: number
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity?: number
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks: number
      /** @description The days and times an activity schedule can take place */
      slots: components['schemas']['Slot'][]
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
    }
    /** @description Describes the minimum education levels to be created for an activity */
    ActivityMinimumEducationLevelCreateRequest: {
      /**
       * @description The Education level code
       * @example 1
       */
      educationLevelCode: string
      /**
       * @description The Education level description
       * @example Reading Measure 1.0
       */
      educationLevelDescription: string
      /**
       * @description The study area code
       * @example ENGLA
       */
      studyAreaCode: string
      /**
       * @description The study area description
       * @example English Language
       */
      studyAreaDescription: string
    }
    /** @description Describes the pay rates and bands to be created for an activity */
    ActivityPayCreateRequest: {
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description The id of the prison pay band used
       * @example 1
       */
      payBandId: number
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /**
     * @description
     *     Describes time slot and day (or days) the scheduled activity would run. At least one day must be specified.
     *
     *     e.g. 'AM, Monday, Wednesday and Friday' or 'PM Tuesday, Thursday, Sunday'
     */
    Slot: {
      /**
       * Format: int32
       * @description The week of the schedule this slot relates to
       * @example 1
       */
      weekNumber: number
      /**
       * @description The time slot of the activity schedule, morning afternoon or evening e.g. AM, PM or ED
       * @example AM
       */
      timeSlot: string
      monday: boolean
      tuesday: boolean
      wednesday: boolean
      thursday: boolean
      friday: boolean
      saturday: boolean
      sunday: boolean
      daysOfWeek: ('MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY')[]
    }
    /** @description Describes a top-level activity */
    Activity: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      tier?: components['schemas']['ActivityTier']
      /**
       * @description A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)
       * @example [FEMALE_ONLY,AGED_18-25]
       */
      eligibilityRules: components['schemas']['ActivityEligibility'][]
      /** @description A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity. */
      schedules: components['schemas']['ActivitySchedule'][]
      /** @description A list of prisoners who are waiting for allocation to this activity. This list is held against the activity, though allocation is against particular schedules of the activity */
      waitingList: components['schemas']['PrisonerWaiting'][]
      /** @description The list of pay rates by incentive level and pay band that can apply to this activity */
      pay: components['schemas']['ActivityPay'][]
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-21
       */
      endDate?: string
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel: string
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description The person who created this activity
       * @example Adam Smith
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time when this activity was updated
       */
      updatedTime?: string
      /**
       * @description The person who updated this activity
       * @example Adam Smith
       */
      updatedBy?: string
      /** @description The list of minimum education levels that can apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevel'][]
    }
    /** @description Describes a top-level activity category */
    ActivityCategory: {
      /**
       * Format: int64
       * @description The internally-generated identifier for this activity category
       * @example 1
       */
      id: number
      /**
       * @description The activity category code
       * @example LEISURE_SOCIAL
       */
      code: string
      /**
       * @description The name of the activity category
       * @example Leisure and social
       */
      name: string
      /**
       * @description The description of the activity category
       * @example Such as association, library time and social clubs, like music or art
       */
      description?: string
    }
    /**
     * @description Describes an eligibility rule as applied to an activity
     * @example [FEMALE_ONLY,AGED_18-25]
     */
    ActivityEligibility: {
      /**
       * Format: int64
       * @description The internal ID of the activity that these rules apply to
       * @example 123456
       */
      id: number
      eligibility: components['schemas']['EligibilityRule']
    }
    /** @description Describes a top-level activity */
    ActivityLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel: string
      /** @description The list of minimum education levels that can apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevel'][]
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-21
       */
      endDate?: string
      /**
       * Format: int32
       * @description The capacity of the activity
       */
      capacity: number
      /**
       * Format: int32
       * @description The number of prisoners currently allocated to the activity
       */
      allocated: number
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description Whether the activity is live or archived
       * @example live
       * @enum {string}
       */
      activityState: 'ARCHIVED' | 'LIVE'
    }
    /** @description Describes the minimum education levels which apply to an activity */
    ActivityMinimumEducationLevel: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity minimum education level
       * @example 123456
       */
      id: number
      /**
       * @description The education level code
       * @example Basic
       */
      educationLevelCode: string
      /**
       * @description The education level description
       * @example Basic
       */
      educationLevelDescription: string
      /**
       * @description The study area code
       * @example ENGLA
       */
      studyAreaCode: string
      /**
       * @description The study area description
       * @example English Language
       */
      studyAreaDescription: string
    }
    /** @description Describes the pay rates and bands which apply to an activity */
    ActivityPay: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      prisonPayBand: components['schemas']['PrisonPayBand']
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     */
    ActivitySchedule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /** @description The planned instances associated with this activity schedule */
      instances: components['schemas']['ScheduledInstance'][]
      /** @description The list of allocated prisoners who are allocated to this schedule, at this time and location */
      allocations: components['schemas']['Allocation'][]
      /**
       * @description The description of this activity schedule
       * @example Entry level Maths 1
       */
      description: string
      /** @description Indicates the dates between which the schedule has been suspended */
      suspensions: components['schemas']['Suspension'][]
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks: number
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
      /**
       * Format: date
       * @description The date on which this schedule will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this schedule will end. From this date, any schedules will be created as real, planned instances
       * @example 2022-10-21
       */
      endDate?: string
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
      /**
       * Format: date-time
       * @description The date and time when this activity schedule was updated
       */
      updatedTime?: string
      /**
       * @description The person who updated this activity schedule
       * @example Adam Smith
       */
      updatedBy?: string
    }
    /**
     * @description
     *   Describes a slot for an activity schedule. There can be several of these defined for one activity schedule.
     *   An activity schedule slot describes when, during the week, an activity will be run.
     *   e.g. Tuesday PM on a Monday and Thursday.
     */
    ActivityScheduleSlot: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule slot
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The week of the schedule this slot relates to
       * @example 1
       */
      weekNumber: number
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will start
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will finish
       * @example 11:30
       */
      endTime: string
      /**
       * @description The days of the week on which the schedule slot takes place
       * @example [Mon,Tue,Wed]
       */
      daysOfWeek: string[]
      /**
       * @description Indicates whether the schedule slot takes place on a Monday
       * @example true
       */
      mondayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Tuesday
       * @example true
       */
      tuesdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Wednesday
       * @example true
       */
      wednesdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Thursday
       * @example false
       */
      thursdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Friday
       * @example false
       */
      fridayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Saturday
       * @example false
       */
      saturdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Sunday
       * @example false
       */
      sundayFlag: boolean
    }
    /**
     * @description An activity tier
     * @example Tier 1, Tier 2, Foundation
     */
    ActivityTier: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity tier
       * @example 123456
       */
      id: number
      /**
       * @description The code for this activity tier
       * @example Tier1
       */
      code: string
      /**
       * @description The detailed description for this activity tier
       * @example Work, education and maintenance
       */
      description: string
    }
    /** @description An attendance record for a prisoner, can be marked or unmarked */
    Attendance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The ID for scheduled instance for this attendance
       * @example 123456
       */
      scheduleInstanceId: number
      /**
       * @description The prison number this attendance record is for
       * @example A1234AA
       */
      prisonerNumber: string
      attendanceReason?: components['schemas']['AttendanceReason']
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime?: string
      /**
       * @description The person who updated the attendance
       * @example A.JONES
       */
      recordedBy?: string
      /**
       * @description WAITING or COMPLETED
       * @example WAITING
       */
      status: string
      /**
       * Format: int32
       * @description The amount in pence to pay the prisoner for the activity
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int32
       * @description The bonus amount in pence to pay the prisoner for the activity
       * @example 50
       */
      bonusAmount?: number
      /** Format: int32 */
      pieces?: number
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
      /**
       * @description Free text to allow other reasons for non attendance against the attendance
       * @example Prisoner has a valid reason to miss the activity.
       */
      otherAbsenceReason?: string
      /**
       * @description Free text for any case note entered against the attendance record
       * @example Prisoner has refused to attend the activity without a valid reason to miss the activity.
       */
      caseNoteText?: string
      /** @description The attendance history records for this attendance */
      attendanceHistory: components['schemas']['AttendanceHistory'][]
      /**
       * @description Flag to show whether this attendance is editable
       * @example true
       */
      editable: boolean
    }
    /** @description An attendance record for a prisoner, can be marked or unmarked */
    AttendanceHistory: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      attendanceReason?: components['schemas']['AttendanceReason']
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime: string
      /**
       * @description The person who updated the attendance
       * @example A.JONES
       */
      recordedBy: string
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
      /**
       * @description Free text to allow other reasons for non attendance against the attendance
       * @example Prisoner has a valid reason to miss the activity.
       */
      otherAbsenceReason?: string
      /**
       * @description Free text for any case note entered against the attendance record
       * @example Prisoner has refused to attend the activity without a valid reason to miss the activity.
       */
      caseNoteText?: string
    }
    /** @description The reason for attending or not */
    AttendanceReason: {
      /**
       * Format: int64
       * @description The internally generated identifier for this (non) attendance reason
       * @example 1
       */
      id: number
      /**
       * @description The code for the (non) attendance reason
       * @example SICK
       */
      code: string
      /**
       * @description The description of the (non) attendance reason
       * @example Sick
       */
      description: string
      /**
       * @description A flag to show whether the reason is Attended (true) or Not Attended (false)
       * @example true
       */
      attended: boolean
      /**
       * @description A flag to show whether or not to capture whether the prisoner should still be paid
       * @example true
       */
      capturePay: boolean
      /**
       * @description A flag to show whether or not to capture more detail
       * @example true
       */
      captureMoreDetail: boolean
      /**
       * @description A flag to show whether or not to capture a case note
       * @example true
       */
      captureCaseNote: boolean
      /**
       * @description A flag to show whether or not to capture whether an incentive level warning has been issued due to non attendance
       * @example false
       */
      captureIncentiveLevelWarning: boolean
      /**
       * @description A flag to show whether or not to capture other text
       * @example false
       */
      captureOtherText: boolean
      /**
       * @description A flag to show whether or not the reason should be displayed in the UI as an option for non attendance
       * @example false
       */
      displayInAbsence: boolean
      /**
       * @description The sequence in which the reason should be displayed in the UI
       * @example 1
       */
      displaySequence?: number
      /**
       * @description Any internal notes to explain the use of the reason
       * @example Maps to ACCAB in NOMIS
       */
      notes: string
    }
    /** @description Defines one eligibility rule */
    EligibilityRule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this eligibility rule
       * @example 123456
       */
      id: number
      /**
       * @description The code for this eligibility rule
       * @example OVER_21
       */
      code: string
      /**
       * @description The description for this eligibility rule
       * @example The prisoner must be over 21 to attend
       */
      description: string
    }
    /**
     * @description An internal NOMIS location for an activity to take place
     * @example 98877667
     */
    InternalLocation: {
      /**
       * Format: int32
       * @description The NOMIS internal location id for this schedule
       * @example 98877667
       */
      id: number
      /**
       * @description The NOMIS internal location code for this schedule
       * @example EDU-ROOM-1
       */
      code: string
      /**
       * @description The NOMIS internal location description for this schedule
       * @example Education - R1
       */
      description: string
    }
    /** @description Describes a person who is on a waiting list for an activity */
    PrisonerWaiting: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prisoner waiting
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (NomisId) of the person on the waiting list
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int32
       * @description The priority of this person in the waiting list. The lower the number, the higher the priority
       * @example 1
       */
      priority: number
      /**
       * Format: date-time
       * @description The date and time when this person was added to the waiting list
       */
      createdTime: string
      /**
       * @description The staff members name who added this person to the waiting list
       * @example Adam Smith
       */
      createdBy: string
    }
    /** @description Describes one instance of an activity schedule */
    ScheduledInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /** @description The attendance records for this scheduled instance */
      attendances: components['schemas']['Attendance'][]
    }
    /** @description Describes the period of time an activity schedule has been suspended */
    Suspension: {
      /**
       * Format: date
       * @description The date from which the activity schedule was suspended
       * @example 2022-09-02
       */
      suspendedFrom: string
      /**
       * Format: date
       * @description The date until which the activity schedule was suspended. If null, the schedule is suspended indefinitely
       * @example 2022-09-02
       */
      suspendedUntil?: string
    }
    /** @description The update request with the new appointment occurrence details and how to apply the update */
    AppointmentOccurrenceUpdateRequest: {
      /**
       * @description
       *     The updated NOMIS reference code for the parent appointment. Must exist and be active.
       *     NOTE: updating the category will apply to all appointment occurrences as the category is associated with the
       *     parent appointment only. The value for applyTo will be ignored.
       *
       * @example GYMW
       */
      categoryCode?: string
      /**
       * Format: int64
       * @description
       *     The updated NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *     The internal location id must exist, must be within the prison specified by the prisonCode property on the
       *     parent appointment and be active.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment occurrence is in cell rather than an internal prison location.
       *     Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell?: boolean
      /**
       * Format: date
       * @description
       *     The updated date of the appointment occurrence. NOTE: this property specifies the day or date of all or all future
       *     occurrences when used in conjunction with the applyTo property
       */
      startDate?: string
      /**
       * Format: partial-time
       * @description The updated starting time of the appointment occurrence
       * @example 09:00
       */
      startTime?: string
      /**
       * Format: partial-time
       * @description The updated end time of the appointment occurrence
       * @example 10:30
       */
      endTime?: string
      /**
       * @description Updated notes relating to the appointment occurrence
       * @example This appointment occurrence has been rescheduled due to staff availability
       */
      comment?: string
      /**
       * @description The prisoner or prisoners to deallocate from the appointment occurrence
       * @example [
       *   "A1234BC"
       * ]
       */
      removePrisonerNumbers?: string[]
      /**
       * @description The replacement prisoner or prisoners to allocate to the appointment occurrence
       * @example [
       *   "A1234BC"
       * ]
       */
      addPrisonerNumbers?: string[]
      /**
       * @description
       *     Specifies which appointment occurrence or occurrences this update should apply to.
       *     Defaults to THIS_OCCURRENCE meaning the update will be applied to the appointment occurrence specified by the
       *     supplied id only.
       *
       * @example THIS_OCCURRENCE
       * @enum {string}
       */
      applyTo: 'THIS_OCCURRENCE' | 'THIS_AND_ALL_FUTURE_OCCURRENCES' | 'ALL_FUTURE_OCCURRENCES'
    }
    /** @description The update request with the new allocation details */
    AllocationUpdateRequest: {
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate?: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
      /**
       * @description A flag to indicate that the allocation end date is to be removed
       * @example true
       */
      removeEndDate?: boolean
      /**
       * @description The reason code for the deallocation
       * @example RELEASED
       * @enum {string}
       */
      reasonCode?:
        | 'OTHER'
        | 'PERSONAL'
        | 'PROBLEM'
        | 'REMOVED'
        | 'SECURITY'
        | 'UNACCEPTABLE_ATTENDANCE'
        | 'UNACCEPTABLE_BEHAVIOUR'
        | 'WITHDRAWN'
      /**
       * Format: int64
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band given to this prisoner
       */
      payBandId?: number
    }
    /** @description The update request with the new activity details */
    ActivityUpdateRequest: {
      /**
       * Format: int64
       * @description The category id for this activity, one of the high-level categories
       */
      categoryId?: number
      /**
       * Format: int64
       * @description The tier id for this activity, as defined by the Future Prison Regime team
       * @example 1
       */
      tierId?: number
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary?: string
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-12-23
       */
      startDate?: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-23
       */
      endDate?: string
      /**
       * @description The NOMIS code for the minimum incentive/earned privilege level for this activity
       * @example BAS
       */
      minimumIncentiveNomisCode?: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel?: string
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday?: boolean
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity?: number
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel?: string
      /**
       * Format: int64
       * @description The optional NOMIS internal location id for this schedule
       * @example 98877667
       */
      locationId?: number
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell?: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing?: boolean
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired?: boolean
      /** @description The list of minimum education levels that apply to this activity */
      minimumEducationLevel?: components['schemas']['ActivityMinimumEducationLevelCreateRequest'][]
      /** @description The list of pay rates that can apply to this activity */
      pay?: components['schemas']['ActivityPayCreateRequest'][]
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks?: number
      /** @description The days and times an activity schedule can take place */
      slots?: components['schemas']['Slot'][]
      /**
       * @description A flag to indicate that the end date is to be removed
       * @default false
       * @example true
       */
      removeEndDate: boolean
    }
    /**
     * @description
     *   Represents the key data required to synchronise an attendance with Nomis
     */
    AttendanceSync: {
      /**
       * Format: int64
       * @description The attendance primary key
       * @example 123456
       */
      attendanceId: number
      /**
       * Format: int64
       * @description The scheduled instance primary key
       * @example 123456
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description The activity schedule primary key
       * @example 123456
       */
      activityScheduleId: number
      /**
       * Format: date
       * @description The scheduled instance date
       * @example 2023-03-30
       */
      sessionDate: string
      /**
       * Format: partial-time
       * @description The scheduled instance start time
       * @example 10:00
       */
      sessionStartTime: string
      /**
       * Format: partial-time
       * @description The scheduled instance end time
       * @example 11:00
       */
      sessionEndTime: string
      /**
       * @description The offender's unique identifier
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The offender booking primary key
       * @example 123456
       */
      bookingId: number
      /** @description The reason for attending or not */
      attendanceReasonCode?: string
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      /**
       * @description WAITING, COMPLETED.
       * @example WAITING
       */
      status: string
      /**
       * Format: int32
       * @description The amount in pence to pay the prisoner for the activity
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int32
       * @description The bonus amount in pence to pay the prisoner for the activity
       * @example 50
       */
      bonusAmount?: number
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
    }
    /** @description Describes a pay rate applied to an activity */
    ActivityPayLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description The pay band id for this activity pay
       * @example 123456
       */
      prisonPayBandId: number
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    AddressDto: {
      /**
       * @description Primary Address
       * @example false
       */
      primary: boolean
      /**
       * @description No Fixed Address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * Format: int64
       * @description Address Id
       * @example 543524
       */
      addressId?: number
      /**
       * @description Address Type. Note: Reference domain is ADDR_TYPE
       * @example BUS
       */
      addressType?: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise?: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City. Note: Reference domain is CITY
       * @example Liverpool
       */
      town?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      county?: string
      /**
       * @description Country. Note: Reference domain is COUNTRY
       * @example ENG
       */
      country?: string
      /**
       * @description Comment
       * @example This is a comment text
       */
      comment?: string
      /**
       * Format: date
       * @description Date Added
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       */
      endDate?: string
      /**
       * @description The phone number associated with the address
       * @example null
       */
      phones?: components['schemas']['Telephone'][]
      /**
       * @description The address usages/types
       * @example null
       */
      addressUsages?: components['schemas']['AddressUsageDto'][]
    }
    /**
     * @description The address usages/types
     * @example null
     */
    AddressUsageDto: {
      /**
       * Format: int64
       * @description Address ID of the associated address
       * @example 23422313
       */
      addressId?: number
      /**
       * @description The address usages
       * @example HDC
       */
      addressUsage?: string
      /**
       * @description The address usages description
       * @example HDC Address
       */
      addressUsageDescription?: string
      /**
       * @description Active Flag
       * @example true
       */
      activeFlag?: boolean
    }
    /** @description Allocation details with activity pay rate if applicable */
    AllocationPayRate: {
      payRate?: components['schemas']['ActivityPayLite']
      allocation: components['schemas']['Allocation']
    }
    /** @description Cross references prisoners details with activity requirements */
    AllocationSuitability: {
      workplaceRiskAssessment?: components['schemas']['WRASuitability']
      incentiveLevel?: components['schemas']['IncentiveLevelSuitability']
      education?: components['schemas']['EducationSuitability']
      releaseDate?: components['schemas']['ReleaseDateSuitability']
      nonAssociation?: components['schemas']['NonAssociationSuitability']
      /** @description The prisoner's allocations with pay rates */
      allocations: components['schemas']['AllocationPayRate'][]
    }
    /** @description The prisoner's education levels */
    Education: {
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate: string
      studyArea: string
      educationLevel: string
      /** Format: int32 */
      numberOfYears: number
      graduationYear: string
      comment: string
      school: string
      isSpecialEducation: boolean
      schedule: string
      addresses: components['schemas']['AddressDto'][]
    }
    /** @description Prisoner workplace education suitability */
    EducationSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /** @description The prisoner's education levels */
      education: components['schemas']['Education'][]
    }
    /** @description Prisoner's incentive level suitability */
    IncentiveLevelSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /**
       * @description The prisoner's current incentive level
       * @example standard
       */
      incentiveLevel?: string
    }
    /** @description Prisoner non-association details */
    NonAssociationDetails: {
      /**
       * @description The non-association reason code
       * @example VIC
       */
      reasonCode: string
      /**
       * @description The non-association reason description
       * @example Victim
       */
      reasonDescription: string
      /**
       * @description The non-association type code
       * @example WING
       */
      typeCode: string
      /**
       * @description The non-association type description
       * @example Do Not Locate on Same Wing
       */
      typeDescription: string
      /**
       * Format: date-time
       * @description Date and time the mom-association is effective from. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       */
      effectiveDate: string
      /**
       * Format: date-time
       * @description Date and time the mom-association expires. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       */
      expiryDate?: string
      offenderNonAssociation: components['schemas']['OffenderNonAssociation']
      /**
       * @description The person who authorised the non-association (free text).
       * @example null
       */
      authorisedBy?: string
      /**
       * @description Additional free text comments related to the non-association.
       * @example null
       */
      comments?: string
    }
    /** @description Prisoner workplace risk assessment suitability */
    NonAssociationSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /** @description The prisoner's non-associations */
      nonAssociations: components['schemas']['NonAssociationDetails'][]
    }
    /**
     * @description Offender non-association details
     * @example null
     */
    OffenderNonAssociation: {
      /**
       * @description The offenders number
       * @example G0135GA
       */
      offenderNo: string
      /**
       * @description The offenders first name
       * @example Joseph
       */
      firstName: string
      /**
       * @description The offenders last name
       * @example Bloggs
       */
      lastName: string
      /**
       * @description The non-association reason code
       * @example PER
       */
      reasonCode: string
      /**
       * @description The non-association reason description
       * @example Perpetrator
       */
      reasonDescription: string
      /**
       * @description Description of the agency (e.g. prison) the offender is assigned to.
       * @example Pentonville (PVI)
       */
      agencyDescription: string
      /**
       * @description Description of living unit (e.g. cell) the offender is assigned to.
       * @example PVI-1-2-4
       */
      assignedLivingUnitDescription: string
      /**
       * Format: int64
       * @description Id of living unit (e.g. cell) the offender is assigned to.
       * @example 123
       */
      assignedLivingUnitId: number
    }
    /** @description Prisoner release date suitability */
    ReleaseDateSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /**
       * Format: date
       * @description The prisoner's earliest release date
       */
      earliestReleaseDate?: string
    }
    /**
     * @description The phone number associated with the address
     * @example null
     */
    Telephone: {
      /**
       * @description Telephone number
       * @example 0114 2345678
       */
      number: string
      /**
       * @description Telephone type
       * @example TEL
       */
      type: string
      /**
       * Format: int64
       * @description Phone Id
       * @example 2234232
       */
      phoneId?: number
      /**
       * @description Telephone extension number
       * @example 123
       */
      ext?: string
    }
    /** @description Prisoner workplace risk assessment suitability */
    WRASuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /**
       * @description The prisoner's WRA level
       * @example medium
       */
      riskLevel: string
    }
    /** @description Describes a candidate for allocation to an activity */
    ActivityCandidate: {
      /**
       * @description The candidate's name
       * @example Joe Bloggs
       */
      name: string
      /**
       * @description The candidate's prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /**
       * @description The candidate's cell location
       * @example MDI-1-1-101
       */
      cellLocation?: string
      /** @description Any activities the candidate is currently allocated to */
      otherAllocations: components['schemas']['Allocation'][]
      /**
       * Format: date
       * @description The candidate's earliest release date
       * @example 2027-01-24
       */
      releaseDate?: string
    }
    PageActivityCandidate: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['ActivityCandidate'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      paged?: boolean
      unpaged?: boolean
      /** Format: int32 */
      pageNumber?: number
      /** Format: int32 */
      pageSize?: number
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Describes one instance of an activity schedule */
    ActivityScheduleInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /**
       * @description The reason this scheduled instance was cancelled
       * @example Staff unavailable
       */
      cancelledReason?: string
      /**
       * @description Comment on cancelling
       * @example Teacher unavailable
       */
      comment?: string
      /**
       * Format: int64
       * @description The id for the previous scheduled instance
       * @example 123456
       */
      previousScheduledInstanceId?: number
      /**
       * Format: date
       * @description The date for the previous scheduled instance
       * @example 2022-09-30
       */
      previousScheduledInstanceDate?: string
      /**
       * Format: int64
       * @description The id for the next scheduled instance
       * @example 123456
       */
      nextScheduledInstanceId?: number
      /**
       * Format: date
       * @description The date for the next scheduled instance
       * @example 2022-09-30
       */
      nextScheduledInstanceDate?: string
      /** @description The list of attendees */
      attendances: components['schemas']['Attendance'][]
      activitySchedule: components['schemas']['ActivityScheduleLite']
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     *   this 'lite' version of ActivitySchedule does not have allocated or instances.
     */
    ActivityScheduleLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /**
       * @description The description of this activity schedule
       * @example Monday AM Houseblock 3
       */
      description: string
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks: number
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
      /**
       * Format: date
       * @description The date on which this schedule will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this schedule will end. From this date, any schedules will be created as real, planned instances
       * @example 2022-10-21
       */
      endDate?: string
    }
    /** @description Describes the rollout plan of a prison which may or may not be rolled out */
    RolloutPrisonPlan: {
      /**
       * @description The prison code of the requested prison
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if this prison is presently rolled out for activities
       * @example true
       */
      activitiesRolledOut: boolean
      /**
       * Format: date
       * @description The date activities rolled out. Can be null if the prison is not yet scheduled for rollout.
       * @example 2022-09-30
       */
      activitiesRolloutDate?: string
      /**
       * @description Flag to indicate if this prison is presently rolled out for appointments
       * @example true
       */
      appointmentsRolledOut: boolean
      /**
       * Format: date
       * @description The date appointments rolled out. Can be null if the prison is not yet scheduled for rollout.
       * @example 2022-09-30
       */
      appointmentsRolloutDate?: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Describes a top-level activity */
    PrisonRegime: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison regime
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example MDI
       */
      prisonCode: string
      /**
       * Format: partial-time
       * @description The start time for the am slot
       * @example 09:00
       */
      amStart: string
      /**
       * Format: partial-time
       * @description The end time for the am slot
       * @example 12:00
       */
      amFinish: string
      /**
       * Format: partial-time
       * @description The start time for the pm slot
       * @example 13:00
       */
      pmStart: string
      /**
       * Format: partial-time
       * @description The end time for the pm slot
       * @example 16:30
       */
      pmFinish: string
      /**
       * Format: partial-time
       * @description The start time for the ed slot
       * @example 18:00
       */
      edStart: string
      /**
       * Format: partial-time
       * @description The end time for the ed slot
       * @example 20:00
       */
      edFinish: string
    }
    Location: {
      /**
       * Format: int64
       * @description Location identifier.
       */
      locationId: number
      /**
       * @description Location type.
       * @example null
       */
      locationType: string
      /**
       * @description Location description.
       * @example null
       */
      description: string
      /**
       * @description Identifier of Agency this location is associated with.
       * @example null
       */
      agencyId: string
      /**
       * @description What events this room can be used for.
       * @example null
       */
      locationUsage?: string
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       */
      currentOccupancy?: number
      /**
       * @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.
       * @example null
       */
      locationPrefix?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       */
      operationalCapacity?: number
      /**
       * @description User-friendly location description.
       * @example null
       */
      userDescription?: string
      /** @example null */
      internalLocationCode?: string
    }
    /** @description Location prefix response */
    LocationPrefixDto: {
      /**
       * @description Location prefix translated from group name
       * @example MDI-1-
       */
      locationPrefix: string
    }
    LocationGroup: {
      /**
       * @description The name of the group
       * @example null
       */
      name: string
      /**
       * @description A key for the group
       * @example null
       */
      key: string
      /**
       * @description The child groups of this group
       * @example null
       */
      children: components['schemas']['LocationGroup'][]
    }
    /** @description Describes one event that has occurred to indicate a change of circumstance */
    EventReview: {
      /**
       * Format: int64
       * @description The internally-generated ID for this event
       * @example 123456
       */
      eventReviewId: number
      /**
       * @description Describes the service which generated this event
       * @example prisoner-offender-search
       */
      serviceIdentifier?: string
      /**
       * @description The internal name for the event
       * @example prisoner-offender-events.prisoner.cell-move
       */
      eventType?: string
      /**
       * Format: date-time
       * @description The date and time that this event occurred
       */
      eventTime?: string
      /**
       * @description The prison code where this event took place
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The prisoner number which this event relates to
       * @example G1234FF
       */
      prisonerNumber?: string
      /**
       * Format: int32
       * @description The booking ID related to this prisoner
       * @example 123456
       */
      bookingId?: number
      /**
       * @description The description of the event that occurred
       * @example The prisoner was moved to a different cell.
       */
      eventData?: string
      /**
       * Format: date-time
       * @description The date and time that this event was acknowledged.
       */
      acknowledgedTime?: string
      /**
       * @description The username of the person who acknowledged the event.
       * @example U4588F
       */
      acknowledgedBy?: string
    }
    /** @description The result of an event review search */
    EventReviewSearchResults: {
      /** @description The matching records */
      content: components['schemas']['EventReview'][]
      /**
       * Format: int32
       * @description The current page number
       * @example 1
       */
      pageNumber: number
      /**
       * Format: int64
       * @description The total number of elements
       * @example 20
       */
      totalElements: number
      /**
       * Format: int32
       * @description The total number of pages
       * @example 5
       */
      totalPages: number
    }
    /**
     * @description
     *   Details of a specific appointment occurrence. Will contain copies of the parent appointment's properties unless they
     *   have been changed on this appointment occurrence. Contains only properties needed to make additional API calls
     *   and to display.
     */
    AppointmentOccurrenceDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The internally generated identifier for the parent appointment
       * @example 12345
       */
      appointmentId: number
      bulkAppointment?: components['schemas']['BulkAppointmentSummary']
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * Format: int32
       * @description The sequence number of this appointment occurrence within the recurring appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *     Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *     The appointment name
       */
      appointmentName: string
      /**
       * @description
       *     Summary of the prisoner or prisoners allocated to this appointment occurrence. Prisoners are allocated at the
       *     occurrence level to allow for per occurrence allocation changes.
       */
      prisoners: components['schemas']['PrisonerSummary'][]
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment occurrence is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment occurrence
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment occurrence
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to this appointment occurrence. Can be different to the parent appointment if this occurrence has
       *     been edited.
       *
       * @example This appointment occurrence has been rescheduled due to staff availability
       */
      comment: string
      repeat?: components['schemas']['AppointmentRepeat']
      /**
       * @description
       *     Indicates that this appointment occurrence has been independently changed from the original state it was in when
       *     it was created as part of a recurring series
       *
       * @example false
       */
      isEdited: boolean
      /**
       * @description
       *     Indicates that this appointment occurrence has been cancelled
       *
       * @example false
       */
      isCancelled: boolean
      /**
       * @description
       *     Indicates that this appointment occurrence has expired
       *
       * @example false
       */
      isExpired: boolean
      /**
       * Format: date-time
       * @description The date and time the parent appointment was created. Will not change
       */
      created: string
      createdBy: components['schemas']['UserSummary']
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment occurrence was last edited.
       *     Will be null if the appointment occurrence has not been independently changed from the original state it was in when
       *     it was created as part of a recurring series
       */
      updated?: string
      updatedBy?: components['schemas']['UserSummary']
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment occurrence was cancelled
       */
      cancelled?: string
      cancelledBy?: components['schemas']['UserSummary']
    }
    /** @description Describes a set of appointments created as part of a single bulk operation */
    BulkAppointmentDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this set of appointments
       * @example 12345
       */
      id: number
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *     Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *     The appointment name
       */
      appointmentName: string
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *     Free text description used to create the set of appointments in bulk. This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location used to create the set of appointments in bulk was in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date used to create the set of appointments in bulk
       */
      startDate: string
      /** @description The details of the set of appointment occurrences created in bulk */
      occurrences: components['schemas']['AppointmentOccurrenceDetails'][]
      /**
       * Format: date-time
       * @description The date and time this set of appointments was created in bulk. Will not change
       */
      created: string
      createdBy: components['schemas']['UserSummary']
    }
    /** @description Summarises a set of appointments created as part of a single bulk operation */
    BulkAppointmentSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this set of appointments
       * @example 12345
       */
      id: number
      /**
       * Format: int32
       * @description
       *     The number of appointments in the set created in bulk
       *
       * @example 3
       */
      appointmentCount: number
    }
    /**
     * @description
     *     Summary of the prisoner or prisoners allocated to the first future occurrence (or most recent past occurrence if all
     *     occurrences are in the past) of this appointment. Prisoners are allocated at the occurrence level to allow for per
     *     occurrence allocation changes. The occurrence summary does not contain any information on the allocated prisoners
     *     as the expected usage is to show a summary of the occurrences then a link to display the full occurrence details.
     */
    PrisonerSummary: {
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The prisoner's first name
       * @example Albert
       */
      firstName: string
      /**
       * @description The prisoner's first name
       * @example Abbot
       */
      lastName: string
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *     The prisoner's residential cell location when inside the prison.
       *
       * @example A-1-002
       */
      cellLocation: string
    }
    /**
     * @description
     *     The summary of the last user to edit this appointment occurrence. Will be null if the appointment occurrence has not
     *     been independently changed from the original state it was in when it was created as part of a recurring series
     */
    UserSummary: {
      /**
       * Format: int64
       * @description The NOMIS STAFF_MEMBERS.STAFF_ID value for mapping to NOMIS.
       * @example 36
       */
      id: number
      /**
       * @description The NOMIS STAFF_USER_ACCOUNTS.USERNAME value for mapping to NOMIS
       * @example AAA01U
       */
      username: string
      /**
       * @description The user's first name
       * @example Alice
       */
      firstName: string
      /**
       * @description The user's last name
       * @example Akbar
       */
      lastName: string
    }
    /**
     * @description
     *   Represents the key data required to report on attendance
     */
    AllAttendance: {
      /**
       * Format: int64
       * @description The attendance primary key
       * @example 123456
       */
      attendanceId: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * Format: date
       * @description The date of the session for which attendance may have been marked or a planned absence recorded
       * @example 2023-03-30
       */
      sessionDate: string
      /**
       * @description AM, PM, ED.
       * @example AM
       */
      timeSlot: string
      /**
       * @description WAITING, COMPLETED.
       * @example WAITING
       */
      status: string
      /** @description The reason for attending or not */
      attendanceReasonCode?: string
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description The prisoner number for this attendance record
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The id of the particular session instance for this attendance record
       * @example 1
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description The id of the activity for this attendance record
       * @example 1
       */
      activityId: number
      /**
       * @description The title of the activity for this attendance record
       * @example Math Level 1
       */
      activitySummary: string
      /**
       * @description The name of the activity category for this attendance record
       * @example Education
       */
      categoryName: string
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime?: string
    }
    /**
     * @description
     *   Represents an appointment instance for a specific prisoner to attend at the specified location, date and time.
     *   The fully denormalised representation of the appointment occurrences and allocations.
     */
    AppointmentInstance: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment instance
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The internally generated identifier for the parent appointment
       * @example 1234
       */
      appointmentId: number
      /**
       * Format: int64
       * @description The internally generated identifier for the parent appointment occurrence
       * @example 12345
       */
      appointmentOccurrenceId: number
      /**
       * Format: int64
       * @description The internally generated identifier for the parent appointment occurrence allocation
       * @example 123456
       */
      appointmentOccurrenceAllocationId: number
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      /**
       * Format: int64
       * @description
       *     The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *     Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment instance
       */
      appointmentDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment instance
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to the appointment instance.
       *     Could support adding a note specific to an individual prisoner's attendance of a specific group appointment
       *     occurrence. Something that is supported within existing systems
       *
       * @example This appointment will help prisoner A1234BC adjust to life outside of prison
       */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time this appointment instance was created. Will not change
       */
      created: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that created the appointment instance.
       *     Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment instance was last changed.
       *     Will be null if the appointment instance has not been altered since it was created
       */
      updated?: string
      /**
       * @description
       *     The username of the user authenticated via HMPPS auth that edited the appointment instance.
       *     Will be null if the appointment instance has not been altered since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
    }
    /**
     * @description
     *   The top level appointment details for display purposes. Contains only properties needed to make additional API calls
     *   and to display.
     */
    AppointmentDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 12345
       */
      id: number
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description
       *     The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *     Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *     The appointment name
       */
      appointmentName: string
      /**
       * @description
       *     Summary of the prisoner or prisoners allocated to the first future occurrence (or most recent past occurrence if all
       *     occurrences are in the past) of this appointment. Prisoners are allocated at the occurrence level to allow for per
       *     occurrence allocation changes. The occurrence summary does not contain any information on the allocated prisoners
       *     as the expected usage is to show a summary of the occurrences then a link to display the full occurrence details.
       */
      prisoners: components['schemas']['PrisonerSummary'][]
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *     Free text description for an appointment.  This is used to add more context to the appointment category.
       *
       * @example Meeting with the governor
       */
      appointmentDescription?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment or first appointment occurrence in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or first appointment occurrence in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or first appointment occurrence in the series
       * @example 10:30
       */
      endTime?: string
      repeat?: components['schemas']['AppointmentRepeat']
      /**
       * @description
       *     Notes relating to the appointment
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment: string
      /**
       * Format: date-time
       * @description The date and time this appointment was created. Will not change
       */
      created: string
      createdBy: components['schemas']['UserSummary']
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment was last changed.
       *     Will be null if the appointment has not been edited since it was created
       */
      updated?: string
      updatedBy?: components['schemas']['UserSummary']
      /**
       * @description
       *     Summary of the individual occurrence or occurrences of this appointment. Non recurring appointments will have a single
       *     appointment occurrence containing the same property values as the parent appointment. The same start date, time
       *     and end time. Recurring appointments will have a series of occurrences. The first in the series will also
       *     contain the same property values as the parent appointment and subsequent occurrences will have start dates
       *     following on from the original start date incremented as specified by the appointment's schedule. Each occurrence
       *     can be edited independently of the parent. All properties of an occurrence override those of the parent appointment
       *     with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the
       *     schedule will be created in advance.
       */
      occurrences: components['schemas']['AppointmentOccurrenceSummary'][]
    }
    /**
     * @description
     *   Summarises a specific appointment occurrence. Will contain copies of the parent appointment's properties unless they
     *   have been changed on this appointment occurrence.
     */
    AppointmentOccurrenceSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment occurrence
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The sequence number of this appointment occurrence within the recurring appointment series
       * @example 3
       */
      sequenceNumber: number
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *     Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *     Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment occurrence is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment occurrence
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment occurrence
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *     Notes relating to this appointment occurrence. Can be different to the parent appointment if this occurrence has
       *     been edited.
       *
       * @example This appointment occurrence has been rescheduled due to staff availability
       */
      comment: string
      /**
       * @description
       *     Indicates that this appointment occurrence has been independently changed from the original state it was in when
       *     it was created as part of a recurring series
       *
       * @example false
       */
      isEdited: boolean
      /**
       * @description
       *     Indicates that this appointment occurrence has been cancelled
       *
       * @example false
       */
      isCancelled: boolean
      /**
       * Format: date-time
       * @description
       *     The date and time this appointment occurrence was last edited.
       *     Will be null if the appointment occurrence has not been independently changed from the original state it was in when
       *     it was created as part of a recurring series
       */
      updated?: string
      updatedBy?: components['schemas']['UserSummary']
    }
    /** @description A basic activity, schedule and category for use where limited IDs only are required */
    ActivityBasic: {
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      activityId: number
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule (assumes 1-2-1 with activity)
       * @example 7654321
       */
      activityScheduleId: number
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary?: string
      /**
       * Format: date
       * @description The start date for this activity
       * @example 2023-10-11
       */
      startDate: string
      /**
       * Format: date
       * @description The end date for this activity (can be null)
       * @example 2024-12-01
       */
      endDate?: string
      /**
       * Format: int64
       * @description The internally generated category ID associated with this activity
       * @example 1
       */
      categoryId: number
      /**
       * @description The category code that matches NOMIS program service code for this activity category
       * @example SAA-EDUCATION
       */
      categoryCode: string
      /**
       * @description The category name
       * @example Education
       */
      categoryName: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  /**
   * Deallocate offenders
   * @description Deallocates offenders from an activity schedule on a future date. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  deallocate: {
    parameters: {
      path: {
        scheduleId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDeallocationRequest']
      }
    }
    responses: {
      /** @description One or more prisoners were deallocated from the schedule. */
      204: never
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Un-cancels a scheduled instance.
   * @description Un-cancels a previously cancelled scheduled instance.
   */
  uncancelScheduledInstance: {
    parameters: {
      path: {
        instanceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UncancelScheduledInstanceRequest']
      }
    }
    responses: {
      /** @description The scheduled instance was successfully un cancelled. */
      204: never
      /** @description The scheduled instance is not cancelled or it is in the past */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found, the scheduled instance does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Cancel a scheduled instance
   * @description Cancels scheduled instance and associated attendance records
   */
  cancelScheduledInstance: {
    parameters: {
      path: {
        instanceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScheduleInstanceCancelRequest']
      }
    }
    responses: {
      /** @description Scheduled instance successfully cancelled */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /**
   * Updates attendance records.
   * @description Updates the given attendance records with the supplied update request details. Requires the 'ACTIVITY_ADMIN' role.
   */
  markAttendances: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendanceUpdateRequest'][]
      }
    }
    responses: {
      /** @description The attendance records were updated. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Cancel an appointment occurrence or series of appointment occurrences
   * @description
   *     Cancel an appointment occurrence or series of appointment occurrences based on the applyTo property.
   *     Does not require any specific roles
   */
  cancelAppointmentOccurrence: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentOccurrenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentOccurrenceCancelRequest']
      }
    }
    responses: {
      /** @description The appointment occurrence or series of appointment occurrences was cancelled. */
      202: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment occurrence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of activity schedule allocations
   * @description Returns zero or more activity schedule allocations.
   */
  getAllocationsBy: {
    parameters: {
      query?: {
        /** @description If true will only return active allocations. Defaults to true. */
        activeOnly?: boolean
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description The allocations for an activity schedule */
      200: {
        content: {
          'application/json': components['schemas']['Allocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Allocate offender to schedule
   * @description Allocates the supplied offender allocation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  allocate: {
    parameters: {
      path: {
        scheduleId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAllocationRequest']
      }
    }
    responses: {
      /** @description The allocation was created and added to the schedule. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.
   * @description
   *       Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.
   *       Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).
   *       Activities and appointments come from either NOMIS or the local database depending on whether the prison is
   *       marked as active for appointments and/or activities.
   *       (Intended usage: Prisoner calendar / schedule)
   */
  getScheduledEventsForSinglePrisoner: {
    parameters: {
      query: {
        /** @description Prisoner number (required). Format A9999AA. */
        prisonerNumber: string
        /** @description Start date of query (required). Format YYYY-MM-DD. */
        startDate: string
        /** @description End date of query (required). Format YYYY-MM-DD. The end date must be within 3 months of the start date) */
        endDate: string
        /** @description Time slot for the events (optional). If supplied, one of AM, PM or ED. */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description The 3-digit prison code. */
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot
   * @description
   *       Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.
   *       Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).
   *       Activities and appointments come from either NOMIS or the local database depending on whether the prison is
   *       marked as rolled-out for activities and/or appointments.
   *       (Intended usage: Unlock list)
   */
  getScheduledEventsForMultiplePrisoners: {
    parameters: {
      query: {
        /** @description The exact date to return events for (required) in format YYYY-MM-DD */
        date: string
        /** @description Time slot of the events (optional). If supplied, one of AM, PM or ED. */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description The 3-character prison code. */
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all allocations for prisoners
   * @description Returns zero or more allocations for the supplied list of prisoners.
   */
  prisonerAllocations: {
    parameters: {
      query?: {
        /** @description If true will only return active allocations. Defaults to true. */
        activeOnly?: boolean
      }
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The allocations for the prisoners */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerAllocations'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create an appointment or series of appointment occurrences
   * @description
   *     Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.
   *     Does not require any specific roles
   */
  migrateAppointment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentMigrateRequest']
      }
    }
    responses: {
      /** @description The appointment or series of appointment occurrences was created. */
      201: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Trigger the job to manage attendance records in advance
   * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
   */
  triggerManageAttendanceRecordsJob: {
    parameters: {
      query?: {
        /** @description If true will run the attendance expiry process in addition to other features. Defaults to false. */
        withExpiry?: boolean
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'text/plain': string
        }
      }
    }
  }
  /**
   * Trigger the job to manage allocations
   * @description
   *         One or more operations to trigger for managing allocations.
   *
   *         Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
   */
  triggerManageAllocationsJob: {
    parameters: {
      query?: {
        /** @description If true will run the activate pending allocations process. Defaults to false. */
        withActivate?: boolean
        /** @description If true will run the deallocate allocations process. Defaults to false. */
        withDeallocate?: boolean
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'text/plain': string
        }
      }
    }
  }
  /**
   * Trigger the job to create the scheduled instances in advance for the active schedules on activities
   * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
   */
  triggerCreateScheduledInstancesJob: {
    responses: {
      /** @description Created */
      201: {
        content: {
          'text/plain': string
        }
      }
    }
  }
  /**
   * Acknowledge a list of change of circumstance events in the prison.
   * @description Used to indicate that a subset of change events have been acknowledged.
   */
  acknowledgeEvents: {
    parameters: {
      path: {
        /** @description The prison code e.g. MDI */
        prison: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EventAcknowledgeRequest']
      }
    }
    responses: {
      /** @description The event IDS were acknowledged. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Invalid request body */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Bulk create a set of appointments
   * @description
   *     Create a list of appointments and allocate the supplied prisoner or prisoners to them.
   *     Does not require any specific roles
   */
  bulkCreateAppointment: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkAppointmentsRequest']
      }
    }
    responses: {
      /** @description The appointments were created. */
      201: {
        content: {
          'application/json': components['schemas']['BulkAppointment']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Search for audit records
   * @description Returns all records that match the search criteria.
   */
  getAuditRecords: {
    parameters: {
      query?: {
        page?: number
        size?: number
        sortDirection?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditRecordSearchFilters']
      }
    }
    responses: {
      /** @description Search performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['LocalAuditSearchResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create an appointment or series of appointment occurrences
   * @description
   *     Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.
   *     Does not require any specific roles
   */
  createAppointment: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentCreateRequest']
      }
    }
    responses: {
      /** @description The appointment or series of appointment occurrences was created. */
      201: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Search for appointment occurrences within the specified prison
   * @description
   *     Uses the supplied prison code and search parameters to filter and return appointment occurrence search results.
   *     Does not require any specific roles
   */
  searchAppointmentOccurrences: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentOccurrenceSearchRequest']
      }
    }
    responses: {
      /** @description Prison code and search parameters were accepted and results returned. */
      202: {
        content: {
          'application/json': components['schemas']['AppointmentOccurrenceSearchResult'][]
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add a prisoner to an activity schedule waiting list
   * @description Adds the supplied waiting list creation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  addToWaitingList: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WaitingListApplicationRequest']
      }
    }
    responses: {
      /** @description The waiting list entry was created and added to the schedule. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule in the request for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create an activity
   * @description Create an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  create: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityCreateRequest']
      }
    }
    responses: {
      /** @description The activity was created. */
      201: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update an appointment occurrence or series of appointment occurrences
   * @description
   *     Update an appointment occurrence or series of appointment occurrences based on the applyTo property.
   *     Does not require any specific roles
   */
  updateAppointmentOccurrence: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentOccurrenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentOccurrenceUpdateRequest']
      }
    }
    responses: {
      /** @description The appointment occurrence or series of appointment occurrences was updated. */
      202: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment occurrence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update an allocation
   * @description Update an allocation. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  update: {
    parameters: {
      path: {
        allocationId: number
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AllocationUpdateRequest']
      }
    }
    responses: {
      /** @description The allocation was updated. */
      202: {
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Allocation ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update an activity
   * @description Update an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  update_1: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
        activityId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityUpdateRequest']
      }
    }
    responses: {
      /** @description The activity was updated. */
      202: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieves Nomis synchronisation details
   * @description Retrieves all details required in order to synchronise an attendance with the Nomis database. Requires role NOMIS_ACTIVITIES
   */
  getAttendanceSync: {
    parameters: {
      path: {
        /** @description Attendance id */
        attendanceId: string
      }
    }
    responses: {
      /** @description Attendance retrieved */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceSync']
        }
      }
      /** @description There was an error with the request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Attendance not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an activity schedule by its id
   * @description Returns a single activity schedule by its unique identifier.
   */
  getScheduleId: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the suitability details of a candidate for an activity
   * @description Returns candidate suitability details considering factors such as, workplace risk assessment, incentive level, education levels, earliest release date and non-associations Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  allocationSuitability: {
    parameters: {
      query: {
        /** @description Prisoner number (required). Format A9999AA. */
        prisonerNumber: string
      }
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description Candidate suitability details. */
      200: {
        content: {
          'application/json': components['schemas']['AllocationSuitability']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get the suitable candidates for an activity
   * @description Returns a paginated view of the list of candidates suitable for a given activity schedule. Filterable by employment status, workplace risk assessment, and incentive level. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].
   */
  candidates: {
    parameters: {
      query?: {
        suitableIncentiveLevel?: string[]
        suitableRiskLevel?: string[]
        suitableForEmployed?: boolean
        search?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description A paginated list of candidates was returned. */
      200: {
        content: {
          'application/json': components['schemas']['PageActivityCandidate']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a scheduled instance by ID
   * @description Returns a scheduled instance.
   */
  getScheduledInstanceById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        instanceId: number
      }
    }
    responses: {
      /** @description Scheduled instance found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of attendances for a scheduled instance
   * @description Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.
   */
  getAttendancesByScheduledInstance: {
    parameters: {
      path: {
        instanceId: number
      }
    }
    responses: {
      /** @description Attendance records found */
      200: {
        content: {
          'application/json': components['schemas']['Attendance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a prison's rollout plan by prison code
   * @description Returns a single prison and its activities management service rollout plan by its unique code.
   */
  getPrisonByCode: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison rollout plan found */
      200: {
        content: {
          'application/json': components['schemas']['RolloutPrisonPlan']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  /**
   * Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)
   * @description Returns zero or more scheduled instances for a prison and date range (max 3 months).
   */
  getActivityScheduleInstancesByDateRange: {
    parameters: {
      query: {
        /** @description Start date of query (required). Format YYYY-MM-DD. */
        startDate: string
        /** @description End date of query (required). The end date must be within 3 months of the start date. */
        endDate: string
        /** @description The time slot (optional). If supplied, one of AM, PM or ED. */
        slot?: 'AM' | 'PM' | 'ED'
      }
      path: {
        /** @description The 3-character prison code. */
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled instance records found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of activity schedules at a given prison
   * @description Returns zero or more activity schedules at a given prison.
   */
  getSchedulesByPrisonCode: {
    parameters: {
      query?: {
        /** @description Date of activity, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** @description The internal NOMIS location id of the activity */
        locationId?: number
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Activity schedules found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of pay bands at a given prison
   * @description Returns the pay bands at a given prison or a default list of values if none present.
   */
  getPrisonPayBands: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison pay bands found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonPayBand'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get scheduled prison locations
   * @description Returns a list of zero or more scheduled prison locations for the supplied criteria.
   */
  getScheduledPrisonLocations: {
    parameters: {
      query?: {
        /** @description Date of activity, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Locations found */
      200: {
        content: {
          'application/json': components['schemas']['InternalLocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get list of activities within a category at a specified prison */
  getActivitiesInCategory: {
    parameters: {
      path: {
        prisonCode: string
        categoryId: number
      }
    }
    responses: {
      /** @description Activities within the category */
      200: {
        content: {
          'application/json': components['schemas']['ActivityLite'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get list of activities running at a specified prison. Optionally and by default, only currently LIVE activities are returned */
  getActivities: {
    parameters: {
      query?: {
        excludeArchived?: boolean
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Activities */
      200: {
        content: {
          'application/json': components['schemas']['ActivityLite'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a prison regime by its code
   * @description Returns a single prison regime and its details by its unique prison code.
   */
  getPrisonRegimeByPrisonCode: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison regime found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonRegime']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The prison regime for this prison code was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List of cell locations for a prison group supplied as a query parameter
   * @description List of cell locations for a prison group supplied as a query parameter
   */
  getCellLocationsForGroup: {
    parameters: {
      query: {
        groupName: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more cell locations found */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get the location prefix for a location group supplied as a query parameter
   * @description Get location prefix for a location group name supplied as a query parameter
   */
  getLocationPrefixForGroup: {
    parameters: {
      query: {
        groupName: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - Location prefix found */
      200: {
        content: {
          'application/json': components['schemas']['LocationPrefixDto']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List of all available location groups defined at a prison
   * @description List of all available location groups defined at a prison
   */
  getLocationGroups: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more location groups found */
      200: {
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get events for a prison which may indicate that a change of circumstances affecting allocations had occurred
   * @description Returns events in the prison which match the search criteria provided.
   */
  getEventsForReview: {
    parameters: {
      query: {
        /** @description The date for which to request events, format YYYY-MM-DD, e.g. 2023-10-01 */
        date: string
        /** @description The prisoner number, eg. A9999AA (optional). Default is all prisoner numbers. */
        prisonerNumber?: string
        /** @description Whether to include acknowledged events (optional). Default is false. */
        includeAcknowledged?: boolean
        /** @description The page number to return (optional). Default is page zero. */
        page?: number
        /** @description The maximum number of items to return in each page (optional). Default is 10. */
        size?: number
        /** @description The sort direction based on the time the events occurred. Default is ascending. */
        sortDirection?: string
      }
      path: {
        /** @description The prison code e.g. MDI */
        prisonCode: string
      }
    }
    responses: {
      /** @description Search performed successfully */
      200: {
        content: {
          'application/json': components['schemas']['EventReviewSearchResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the details of a set of appointments created as part of a single bulk operation for display purposes
   * @description Returns the displayable details of a set of appointments created as part of a single bulk operation by its unique identifier.
   */
  getBulkAppointmentDetailsById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        bulkAppointmentId: number
      }
    }
    responses: {
      /** @description Bulk appointment found */
      200: {
        content: {
          'application/json': components['schemas']['BulkAppointmentDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The bulk appointment for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a daily list of attendances
   * @description Returns an attendance list.
   */
  getAttendanceByDate: {
    parameters: {
      path: {
        prisonCode: string
        sessionDate: string
      }
    }
    responses: {
      /** @description Attendance list found */
      200: {
        content: {
          'application/json': components['schemas']['AllAttendance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an attendance by ID
   * @description Returns an attendance.
   */
  getAttendanceById: {
    parameters: {
      path: {
        attendanceId: number
      }
    }
    responses: {
      /** @description Attendance found */
      200: {
        content: {
          'application/json': components['schemas']['Attendance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The attendance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the list of attendance reasons */
  getAttendanceReasons: {
    responses: {
      /** @description Attendance reasons found */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceReason'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an appointment by its id
   * @description Returns an appointment and its details by its unique identifier.
   */
  getAppointmentById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
    }
    responses: {
      /** @description Appointment found */
      200: {
        content: {
          'application/json': components['schemas']['Appointment']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the appointment occurrence details for display purposes identified by the appointment occurrence's id
   * @description Returns the displayable details of an appointment occurrence by its unique identifier.
   */
  getAppointmentOccurrenceDetailsById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentOccurrenceId: number
      }
    }
    responses: {
      /** @description Appointment Occurrence found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentOccurrenceDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment occurrence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the list of appointment locations */
  getAppointmentLocations: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Appointment locations found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentLocationSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an appointment instance by its id
   * @description Returns an appointment instance and its details by its unique identifier.
   */
  getAppointmentInstanceById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentInstanceId: number
      }
    }
    responses: {
      /** @description Appointment instance found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentInstance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment instance for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the top level appointment details for display purposes identified by the appointment's id
   * @description Returns the displayable details of an appointment by its unique identifier.
   */
  getAppointmentDetailsById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
    }
    responses: {
      /** @description Appointment found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the list of appointment categories */
  getAppointmentCategories: {
    responses: {
      /** @description Appointment categories found */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentCategorySummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an allocation by its id
   * @description Returns a single allocation and its details by its unique identifier.
   */
  getAllocationById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        allocationId: number
      }
    }
    responses: {
      /** @description allocation found */
      200: {
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The allocation for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the list of deallocation reasons */
  getDeallocationReasons: {
    responses: {
      /** @description Deallocation reasons found */
      200: {
        content: {
          'application/json': components['schemas']['DeallocationReason'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the list of top-level activity categories */
  getCategories: {
    responses: {
      /** @description Activity categories found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityCategory'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an activity by its id
   * @description Returns a single activity and its details by its unique identifier.
   */
  getActivityById: {
    parameters: {
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the capacity and number of allocated slots in an activity */
  getActivitySchedules: {
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity schedules */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleLite']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an activity by its ID with limited instances (by date)
   * @description Returns a single activity by activity ID with limited instances.
   */
  getActivityByIdWithFilters: {
    parameters: {
      query?: {
        /** @description The date of the earliest scheduled instances to include. Defaults to newer than 1 month ago. */
        earliestSessionDate?: string
      }
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * DO NOT USE:  Get an activity key ids - testing only
   * @description DO NOT USEL: Returns keys ids - testing only
   */
  getActivityKeyIds: {
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityBasic']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
