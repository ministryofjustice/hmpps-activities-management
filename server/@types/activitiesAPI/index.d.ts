/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/attendances': {
    /**
     * Updates attendance records.
     * @description Updates the given attendance records with the supplied update request details.
     */
    put: operations['markAttendances']
  }
  '/schedules/{scheduleId}/allocations': {
    /**
     * Get a list of activity schedule allocations
     * @description Returns zero or more activity schedule allocations.
     */
    get: operations['getAllocationsBy']
    /**
     * Allocate offender to schedule
     * @description Allocates the supplied offender allocation request to the activity schedule.
     */
    post: operations['allocate']
  }
  '/prisons/{prisonCode}/scheduled-events': {
    /**
     * Get a list of scheduled events for a prison, prisoner and date range (max 3 months)
     * @description Returns zero or more scheduled events for a prison, prisoner and date range (max 3 months).
     */
    get: operations['getScheduledEventsByDateRange']
    /**
     * Get a list of scheduled events for a prison, offender list
     * @description Returns zero or more scheduled events for a prison, offender list.
     */
    post: operations['getScheduledEventsForOffenderList']
  }
  '/prisons/{prisonCode}/prisoner-allocations': {
    /**
     * Get all allocations for prisoners
     * @description Returns zero or more allocations for the supplied list of prisoners.
     */
    post: operations['prisonerAllocations']
  }
  '/job/create-attendance-records': {
    /**
     * Trigger the job to create attendance records in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerCreateAttendanceRecordsJob']
  }
  '/job/create-activity-sessions': {
    /**
     * Trigger the job to create activity sessions in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerCreateActivitySessionsJob']
  }
  '/activities': {
    /**
     * Create an activity
     * @description Create an activity.
     */
    post: operations['create']
  }
  '/schedules/{scheduleId}': {
    /**
     * Get an activity schedule by its id
     * @description Returns a single activity schedule by its unique identifier.
     */
    get: operations['getScheduleId']
  }
  '/schedules/{activityScheduleId}/capacity': {
    /** Get the capacity and number of allocated slots in an activity schedule */
    get: operations['getActivityScheduleCapacity']
  }
  '/scheduled-instances/{instanceId}': {
    /**
     * Get a scheduled instance by ID
     * @description Returns a scheduled instance.
     */
    get: operations['getScheduledInstanceById']
  }
  '/scheduled-instances/{instanceId}/attendances': {
    /**
     * Get a list of attendances for a scheduled instance
     * @description Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.
     */
    get: operations['getAttendancesByScheduledInstance']
  }
  '/rollout/{prisonCode}': {
    /**
     * Get a prison by its code
     * @description Returns a single prison and its details by its unique code.
     */
    get: operations['getPrisonByCode']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/prisons/{prisonCode}/scheduled-instances': {
    /**
     * Get a list of scheduled instances for a prison, prisoner (optional), date range (max 3 months) and time slot (AM, PM or ED - optional)
     * @description Returns zero or more scheduled instances for a prison, prisoner (optional) and date range (max 3 months).
     */
    get: operations['getActivityScheduleInstancesByDateRange']
  }
  '/prison/{prisonCode}/schedules': {
    /**
     * Get a list of activity schedules at a given prison
     * @description Returns zero or more activity schedules at a given prison.
     */
    get: operations['getSchedulesByPrisonCode']
  }
  '/prison/{prisonCode}/locations': {
    /**
     * Get scheduled prison locations
     * @description Returns a list of zero or more scheduled prison locations for the supplied criteria.
     */
    get: operations['getScheduledPrisonLocations']
  }
  '/prison/{prisonCode}/activity-categories/{categoryId}/capacity': {
    /** Get the capacity and number of allocated slots in an activity category within a prison */
    get: operations['getActivityCategoryCapacity']
  }
  '/prison/{prisonCode}/activity-categories/{categoryId}/activities': {
    /** Get list of activities within a category at a specified prison */
    get: operations['getActivitiesInCategory']
  }
  '/locations/prison/{prisonCode}': {
    /**
     * List of cell locations for a prison group supplied as a query parameter
     * @description List of cell locations for a prison group supplied as a query parameter
     */
    get: operations['getCellLocationsForGroup']
  }
  '/locations/prison/{prisonCode}/location-prefix': {
    /**
     * Get the location prefix for a location group supplied as a query parameter
     * @description Get location prefix for a location group name supplied as a query parameter
     */
    get: operations['getLocationPrefixForGroup']
  }
  '/locations/prison/{prisonCode}/location-groups': {
    /**
     * List of all available location groups defined at a prison
     * @description List of all available location groups defined at a prison
     */
    get: operations['getLocationGroups']
  }
  '/activity-categories': {
    /** Get the list of top-level activity categories */
    get: operations['getCategories']
  }
  '/activities/{activityId}': {
    /**
     * Get an activity by its id
     * @description Returns a single activity and its details by its unique identifier.
     */
    get: operations['getActivityById']
  }
  '/activities/{activityId}/schedules': {
    /** Get the capacity and number of allocated slots in an activity */
    get: operations['getActivitySchedules']
  }
  '/activities/{activityId}/capacity': {
    /** Get the capacity and number of allocated slots in an activity */
    get: operations['getActivityCapacity']
  }
}

export interface components {
  schemas: {
    Message: {
      messageId?: string
      receiptHandle?: string
      body?: string
      attributes?: {
        [key: string]: string | undefined
      }
      messageAttributes?: {
        [key: string]: components['schemas']['MessageAttributeValue'] | undefined
      }
      md5OfBody?: string
      md5OfMessageAttributes?: string
    }
    MessageAttributeValue: {
      stringValue?: string
      binaryValue?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }
      stringListValues?: string[]
      binaryListValues?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }[]
      dataType?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['Message'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request object for updating an attendance record */
    AttendanceUpdateRequest: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * @description The reason codes- ABS, ACCAB, ATT, CANC, NREQ, SUS, UNACAB, REST
       * @example ATT
       */
      attendanceReason: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The prisoner allocation request details */
    PrisonerAllocationRequest: {
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner
       * @example A
       */
      payBand: string
    }
    /** @description Describes a prisoners scheduled events */
    PrisonerScheduledEvents: {
      /**
       * @description The prison code for these scheduled events
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The set of prisoner numbers for theses scheduled events
       * @example ['GF10101', 'GR123YI']
       */
      prisonerNumbers?: string[]
      /**
       * Format: date
       * @description The start date for this collection of scheduled events
       * @example 2022-11-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date (inclusive) for this collection of scheduled events
       * @example 2022-11-28
       */
      endDate?: string
      /** @description A list of scheduled appointments for this prisoner in this date range */
      appointments?: components['schemas']['ScheduledEvent'][]
      /** @description A list of (active) scheduled court hearings for this prisoner in this date range */
      courtHearings?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled visits for this prisoner in this date range */
      visits?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled activities for this prisoner in this date range */
      activities?: components['schemas']['ScheduledEvent'][]
    }
    /** @description Describes a scheduled event */
    ScheduledEvent: {
      /**
       * @description The prison code for this scheduled event
       * @example MDI
       */
      prisonCode?: string
      /**
       * Format: int64
       * @description The event id for this scheduled event
       * @example 10001
       */
      eventId?: number
      /**
       * Format: int64
       * @description The booking id for this scheduled event
       * @example 10001
       */
      bookingId?: number
      /**
       * @description The location of this scheduled event
       * @example INDUCTION CLASSROOM
       */
      location?: string
      /**
       * Format: int64
       * @description The location id of this scheduled event
       * @example 10001
       */
      locationId?: number
      /**
       * @description Scheduled event class
       * @example INT_MOV
       */
      eventClass?: string
      /**
       * @description Scheduled event status
       * @example SCH
       */
      eventStatus?: string
      /**
       * @description Scheduled event type
       * @example APP
       */
      eventType?: string
      /**
       * @description Scheduled event type description
       * @example Appointment
       */
      eventTypeDesc?: string
      /**
       * @description Scheduled event
       * @example GOVE
       */
      event?: string
      /**
       * @description Scheduled event description
       * @example Governor
       */
      eventDesc?: string
      /**
       * @description Details of this scheduled event
       * @example Dont be late
       */
      details?: string
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber?: string
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date?: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime?: string
      /**
       * Format: int32
       * @description The event priority
       */
      priority?: number
    }
    /** @description A prisoner who is allocated to an activity */
    Allocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this allocation
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      activitySummary: string
      scheduleDescription: string
      /**
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner
       * @example A
       */
      payBand?: string
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       */
      endDate?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was allocated to the activity
       */
      allocatedTime?: string
      /**
       * @description The person who allocated the prisoner to the activity
       * @example Mr Blogs
       */
      allocatedBy?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was deallocated from the activity
       */
      deallocatedTime?: string
      /**
       * @description The person who deallocated the prisoner from the activity
       * @example Mrs Blogs
       */
      deallocatedBy?: string
      /**
       * @description The descriptive reason why this prisoner was deallocated from the activity
       * @example Not attending regularly
       */
      deallocatedReason?: string
    }
    /** @description Describes a prisoners allocations */
    PrisonerAllocations: {
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /** @description The list of allocations for the prisoner */
      allocations: components['schemas']['Allocation'][]
    }
    /** @description The create request with the new activity details */
    ActivityCreateRequest: {
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      /**
       * Format: int64
       * @description The category id for this activity, one of the high-level categories
       */
      categoryId: number
      /**
       * Format: int64
       * @description The tier id for this activity, as defined by the Future Prison Regime team
       * @example 1
       */
      tierId?: number
      /**
       * @description A list of eligibility rules ids which apply to this activity.
       * @example [
       *   1,
       *   2,
       *   3
       * ]
       */
      eligibilityRuleIds: number[]
      /** @description The list of pay rates that can apply to this activity */
      pay: components['schemas']['ActivityPayCreateRequest'][]
      /**
       * @description The most recent risk assessment level for this activity
       * @example High
       */
      riskLevel?: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel?: string
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-12-23
       */
      startDate?: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-23
       */
      endDate?: string
    }
    /** @description Describes the pay rates and bands to be created for an activity */
    ActivityPayCreateRequest: {
      /**
       * @description The incentive/earned privilege level (nullable)
       * @example Basic
       */
      incentiveLevel?: string
      /**
       * @description The pay band (nullable)
       * @example A
       */
      payBand?: string
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /** @description Describes a top-level activity */
    Activity: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      tier?: components['schemas']['ActivityTier']
      /**
       * @description A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)
       * @example [FEMALE_ONLY,AGED_18-25]
       */
      eligibilityRules: components['schemas']['ActivityEligibility'][]
      /** @description A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity. */
      schedules: components['schemas']['ActivitySchedule'][]
      /** @description A list of prisoners who are waiting for allocation to this activity. This list is held against the activity, though allocation is against particular schedules of the activity */
      waitingList: components['schemas']['PrisonerWaiting'][]
      /** @description The list of pay rates by incentive level and pay band that can apply to this activity */
      pay: components['schemas']['ActivityPay'][]
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       */
      endDate?: string
      /**
       * @description The most recent risk assessment level for this activity
       * @example High
       */
      riskLevel?: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel?: string
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description The person who created this activity
       * @example Adam Smith
       */
      createdBy: string
    }
    /** @description Describes a top-level activity category */
    ActivityCategory: {
      /**
       * Format: int64
       * @description The internally-generated identifier for this activity category
       * @example 1
       */
      id: number
      /**
       * @description The activity category code
       * @example LEISURE_SOCIAL
       */
      code: string
      /**
       * @description The name of the activity category
       * @example Leisure and social
       */
      name: string
      /**
       * @description The description of the activity category
       * @example Such as association, library time and social clubs, like music or art
       */
      description?: string
    }
    /**
     * @description Describes an eligibility rule as applied to an activity
     * @example [FEMALE_ONLY,AGED_18-25]
     */
    ActivityEligibility: {
      /**
       * Format: int64
       * @description The internal ID of the activity that these rules apply to
       * @example 123456
       */
      id: number
      eligibility: components['schemas']['EligibilityRule']
    }
    /** @description Describes a top-level activity */
    ActivityLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      /**
       * @description The most recent risk assessment level for this activity
       * @example High
       */
      riskLevel?: string
      /**
       * @description The minimum incentive/earned privilege level for this activity
       * @example Basic
       */
      minimumIncentiveLevel?: string
    }
    /** @description Describes the pay rates and bands which apply to an activity */
    ActivityPay: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /**
       * @description The incentive/earned privilege level (nullable)
       * @example Basic
       */
      incentiveLevel?: string
      /**
       * @description The pay band (nullable)
       * @example A
       */
      payBand?: string
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     */
    ActivitySchedule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /** @description The planned instances associated with this activity schedule */
      instances: components['schemas']['ScheduledInstance'][]
      /** @description The list of allocated prisoners who are allocated to this schedule, at this time and location */
      allocations: components['schemas']['Allocation'][]
      /**
       * @description The description of this activity schedule
       * @example Monday AM Houseblock 3
       */
      description: string
      /** @description Indicates the dates between which the schedule has been suspended */
      suspensions: components['schemas']['Suspension'][]
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
    }
    /**
     * @description
     *   Describes a slot for an activity schedule. There can be several of these defined for one activity schedule.
     *   An activity schedule slot describes when, during the week, an activity will be run.
     *   e.g. Tuesday PM on a Monday and Thursday.
     */
    ActivityScheduleSlot: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule slot
       * @example 123456
       */
      id: number
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will start
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will finish
       * @example 11:30
       */
      endTime: string
      /**
       * @description The days of the week on which the schedule slot takes place
       * @example [Mon,Tue,Wed]
       */
      daysOfWeek: string[]
    }
    /**
     * @description An activity tier
     * @example Tier 1, Tier 2, Foundation
     */
    ActivityTier: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity tier
       * @example 123456
       */
      id: number
      /**
       * @description The code for this activity tier
       * @example Tier1
       */
      code: string
      /**
       * @description The detailed description for this activity tier
       * @example Work, education and maintenance
       */
      description: string
    }
    /** @description An attendance record for a prisoner, can be marked or unmarked */
    Attendance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * @description The prison number this attendance record is for
       * @example A1234AA
       */
      prisonerNumber: string
      attendanceReason?: components['schemas']['AttendanceReason']
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      posted: boolean
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime?: string
      /**
       * @description The person whom updated the attendance
       * @example 10/09/2023
       */
      recordedBy?: string
      /**
       * @description SCHEDULED, COMPLETED, CANCELLED.
       * @example SCHEDULED
       */
      status: string
      /**
       * Format: int32
       * @description The amount in pence to pay the prisoner for the activity
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int32
       * @description The bonus amount in pence to pay the prisoner for the activity
       * @example 50
       */
      bonusAmount?: number
      /** Format: int32 */
      pieces?: number
    }
    /** @description The reason for attending or not */
    AttendanceReason: {
      /**
       * Format: int64
       * @description The internally-generated ID for this absence reason
       * @example 123456
       */
      id: number
      /**
       * @description The reason codes - ABS, ACCAB, ATT, CANC, NREQ, SUS, UNACAB, REST
       * @example ABS
       */
      code: string
      /**
       * @description The detailed description for this attendance reason
       * @example Unacceptable absence
       */
      description: string
    }
    /** @description Defines one eligibility rule */
    EligibilityRule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this eligibility rule
       * @example 123456
       */
      id: number
      /**
       * @description The code for this eligibility rule
       * @example OVER_21
       */
      code: string
      /**
       * @description The description for this eligibility rule
       * @example The prisoner must be over 21 to attend
       */
      description: string
    }
    /**
     * @description An internal NOMIS location for an activity to take place
     * @example 98877667
     */
    InternalLocation: {
      /**
       * Format: int32
       * @description The NOMIS internal location id for this schedule
       * @example 98877667
       */
      id: number
      /**
       * @description The NOMIS internal location code for this schedule
       * @example EDU-ROOM-1
       */
      code: string
      /**
       * @description The NOMIS internal location description for this schedule
       * @example Education - R1
       */
      description: string
    }
    /** @description Describes a person who is on a waiting list for an activity */
    PrisonerWaiting: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prisoner waiting
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (NomisId) of the person on the waiting list
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int32
       * @description The priority of this person in the waiting list. The lower the number, the higher the priority
       * @example 1
       */
      priority: number
      /**
       * Format: date-time
       * @description The date and time when this person was added to the waiting list
       */
      createdTime: string
      /**
       * @description The staff members name who added this person to the waiting list
       * @example Adam Smith
       */
      createdBy: string
    }
    /** @description Describes one instance of an activity schedule */
    ScheduledInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /** @description The attendance records for this scheduled instance */
      attendances: components['schemas']['Attendance'][]
    }
    /** @description Describes the period of time an activity schedule has been suspended */
    Suspension: {
      /**
       * Format: date
       * @description The date from which the activity schedule was suspended
       */
      suspendedFrom: string
      /**
       * Format: date
       * @description The date until which the activity schedule was suspended. If null, the schedule is suspended indefinately
       */
      suspendedUntil?: string
    }
    /** @description Describes the capacity and allocated slots of an activity or category */
    CapacityAndAllocated: {
      /**
       * Format: int32
       * @description The maximum number of people who can attend the category or activity
       * @example 30
       */
      capacity: number
      /**
       * Format: int32
       * @description The number of slots currently filled in the activity or category
       * @example 27
       */
      allocated: number
    }
    /** @description Describes one instance of an activity schedule */
    ActivityScheduleInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /** @description The list of attendees */
      attendances: components['schemas']['Attendance'][]
      activitySchedule: components['schemas']['ActivityScheduleLite']
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     *   this 'lite' version of ActivitySchedule does not have allocated or instances.
     */
    ActivityScheduleLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /**
       * @description The description of this activity schedule
       * @example Monday AM Houseblock 3
       */
      description: string
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
    }
    /** @description Describes one instance of a prison which may or may not be active (rolled out) */
    RolloutPrison: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison
       * @example 123456
       */
      id: number
      /**
       * @description The code for this prison
       * @example PVI
       */
      code: string
      /**
       * @description The description for this prison
       * @example HMP Pentonville
       */
      description: string
      /**
       * @description Flag to indicate if this prison is presently active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date rolled out
       */
      rolloutDate: string
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    Location: {
      /**
       * Format: int64
       * @description Location identifier.
       * @example 721705
       */
      locationId: number
      /**
       * @description Location type.
       * @example CELL
       */
      locationType: string
      /**
       * @description Location description.
       * @example MDI-RES-HB1-ALE
       */
      description: string
      /**
       * @description Identifier of Agency this location is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * @description What events this room can be used for.
       * @example APP
       */
      locationUsage?: string
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       * @example 26960
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       * @example 10
       */
      currentOccupancy?: number
      /**
       * @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.
       * @example RES-HB1-ALE
       */
      locationPrefix?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       * @example 20
       */
      operationalCapacity?: number
      /**
       * @description User-friendly location description.
       * @example RES-HB1-ALE
       */
      userDescription?: string
      /** @description Internal location code */
      internalLocationCode?: string
    }
    /** @description Location prefix response */
    LocationPrefixDto: {
      /**
       * @description Location prefix translated from group name
       * @example MDI-1-
       */
      locationPrefix: string
    }
    LocationGroup: {
      /**
       * @description The name of the group
       * @example Block A
       */
      name: string
      /**
       * @description A key for the group
       * @example A
       */
      key: string
      /**
       * @description The child groups of this group
       * @example [
       *   {
       *     "name": "Landing A/1",
       *     "key": "1"
       *   },
       *   {
       *     "name": "Landing A/2",
       *     "key": "2"
       *   }
       * ]
       */
      children: components['schemas']['LocationGroup'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  markAttendances: {
    /**
     * Updates attendance records.
     * @description Updates the given attendance records with the supplied update request details.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendanceUpdateRequest'][]
      }
    }
    responses: {
      /** @description The attendance records were updated. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationsBy: {
    /**
     * Get a list of activity schedule allocations
     * @description Returns zero or more activity schedule allocations.
     */
    parameters: {
      /** @description If true will only return active allocations. Defaults to true. */
      query?: {
        activeOnly?: boolean
      }
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description The allocations for an activity schedule */
      200: {
        content: {
          'application/json': components['schemas']['Allocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  allocate: {
    /**
     * Allocate offender to schedule
     * @description Allocates the supplied offender allocation request to the activity schedule.
     */
    parameters: {
      path: {
        scheduleId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAllocationRequest']
      }
    }
    responses: {
      /** @description The allocation was created and added to the schedule. */
      204: {
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsByDateRange: {
    /**
     * Get a list of scheduled events for a prison, prisoner and date range (max 3 months)
     * @description Returns zero or more scheduled events for a prison, prisoner and date range (max 3 months).
     */
    parameters: {
      /** @description Prisoner number */
      /** @description Start date of query */
      /** @description End date of query (max 3 months from start date) */
      query: {
        prisonerNumber: string
        startDate: string
        endDate: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsForOffenderList: {
    /**
     * Get a list of scheduled events for a prison, offender list
     * @description Returns zero or more scheduled events for a prison, offender list.
     */
    parameters: {
      /** @description Date of the events */
      /** @description Time slot of the events */
      query?: {
        date?: string
        timeSlot?: string
      }
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  prisonerAllocations: {
    /**
     * Get all allocations for prisoners
     * @description Returns zero or more allocations for the supplied list of prisoners.
     */
    parameters: {
      /** @description If true will only return active allocations. Defaults to true. */
      query?: {
        activeOnly?: boolean
      }
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The allocations for the prisoners */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerAllocations'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  triggerCreateAttendanceRecordsJob: {
    /**
     * Trigger the job to create attendance records in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': string
        }
      }
    }
  }
  triggerCreateActivitySessionsJob: {
    /**
     * Trigger the job to create activity sessions in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': string
        }
      }
    }
  }
  create: {
    /**
     * Create an activity
     * @description Create an activity.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityCreateRequest']
      }
    }
    responses: {
      /** @description The activity was created. */
      201: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduleId: {
    /**
     * Get an activity schedule by its id
     * @description Returns a single activity schedule by its unique identifier.
     */
    parameters: {
      path: {
        scheduleId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityScheduleCapacity: {
    /** Get the capacity and number of allocated slots in an activity schedule */
    parameters: {
      path: {
        activityScheduleId: number
      }
    }
    responses: {
      /** @description Activity schedule capacity */
      200: {
        content: {
          'application/json': components['schemas']['CapacityAndAllocated']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledInstanceById: {
    /**
     * Get a scheduled instance by ID
     * @description Returns a scheduled instance.
     */
    parameters: {
      path: {
        instanceId: number
      }
    }
    responses: {
      /** @description Scheduled instance found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendancesByScheduledInstance: {
    /**
     * Get a list of attendances for a scheduled instance
     * @description Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.
     */
    parameters: {
      path: {
        instanceId: number
      }
    }
    responses: {
      /** @description Attendance records found */
      200: {
        content: {
          'application/json': components['schemas']['Attendance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonByCode: {
    /**
     * Get a prison by its code
     * @description Returns a single prison and its details by its unique code.
     */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Prison found */
      200: {
        content: {
          'application/json': components['schemas']['RolloutPrison']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The prison for this code was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getActivityScheduleInstancesByDateRange: {
    /**
     * Get a list of scheduled instances for a prison, prisoner (optional), date range (max 3 months) and time slot (AM, PM or ED - optional)
     * @description Returns zero or more scheduled instances for a prison, prisoner (optional) and date range (max 3 months).
     */
    parameters: {
      /** @description Prisoner number (optional) */
      /** @description Start date of query */
      /** @description End date of query (max 3 months from start date) */
      /** @description The time slot - AM, PM or ED (optional) */
      query: {
        prisonerNumber?: string
        startDate: string
        endDate: string
        slot?: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled instance records found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSchedulesByPrisonCode: {
    /**
     * Get a list of activity schedules at a given prison
     * @description Returns zero or more activity schedules at a given prison.
     */
    parameters: {
      /** @description Date of activity, default today */
      /** @description AM, PM or ED */
      /** @description The internal NOMIS location id of the activity */
      query?: {
        date?: string
        timeSlot?: string
        locationId?: number
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Activity schedules found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledPrisonLocations: {
    /**
     * Get scheduled prison locations
     * @description Returns a list of zero or more scheduled prison locations for the supplied criteria.
     */
    parameters: {
      /** @description Date of activity, default today */
      /** @description AM, PM or ED */
      query?: {
        date?: string
        timeSlot?: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Locations found */
      200: {
        content: {
          'application/json': components['schemas']['InternalLocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityCategoryCapacity: {
    /** Get the capacity and number of allocated slots in an activity category within a prison */
    parameters: {
      path: {
        prisonCode: string
        categoryId: number
      }
    }
    responses: {
      /** @description Activity category capacity */
      200: {
        content: {
          'application/json': components['schemas']['CapacityAndAllocated']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitiesInCategory: {
    /** Get list of activities within a category at a specified prison */
    parameters: {
      path: {
        prisonCode: string
        categoryId: number
      }
    }
    responses: {
      /** @description Activities within the category */
      200: {
        content: {
          'application/json': components['schemas']['ActivityLite'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Category ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellLocationsForGroup: {
    /**
     * List of cell locations for a prison group supplied as a query parameter
     * @description List of cell locations for a prison group supplied as a query parameter
     */
    parameters: {
      query: {
        groupName: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more cell locations found */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationPrefixForGroup: {
    /**
     * Get the location prefix for a location group supplied as a query parameter
     * @description Get location prefix for a location group name supplied as a query parameter
     */
    parameters: {
      query: {
        groupName: string
      }
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - Location prefix found */
      200: {
        content: {
          'application/json': components['schemas']['LocationPrefixDto']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroups: {
    /**
     * List of all available location groups defined at a prison
     * @description List of all available location groups defined at a prison
     */
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description Successful call - zero or more location groups found */
      200: {
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCategories: {
    /** Get the list of top-level activity categories */
    responses: {
      /** @description Activity categories found */
      200: {
        content: {
          'application/json': components['schemas']['ActivityCategory'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityById: {
    /**
     * Get an activity by its id
     * @description Returns a single activity and its details by its unique identifier.
     */
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity found */
      200: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitySchedules: {
    /** Get the capacity and number of allocated slots in an activity */
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity schedules */
      200: {
        content: {
          'application/json': components['schemas']['ActivityScheduleLite']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityCapacity: {
    /** Get the capacity and number of allocated slots in an activity */
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** @description Activity capacity */
      200: {
        content: {
          'application/json': components['schemas']['CapacityAndAllocated']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
