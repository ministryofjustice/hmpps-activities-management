/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/schedules/{prisonCode}': {
    /** Returns zero or more activity schedules at a given prison. */
    get: operations['getSchedulesByPrisonCode']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/prisons/{prisonCode}': {
    /** Returns a single prison and its details by its unique code. */
    get: operations['getPrisonByCode']
  }
  '/prisons/{prisonCode}/locations': {
    /** Returns a list of zero or more scheduled prison locations for the supplied criteria. */
    get: operations['getScheduledPrisonLocations']
  }
  '/activities/{activityId}': {
    /** Returns a single activity and its details by its unique identifier. */
    get: operations['getActivityById']
  }
}

export interface components {
  schemas: {
    Message: {
      messageId?: string
      receiptHandle?: string
      body?: string
      attributes?: { [key: string]: string }
      messageAttributes?: {
        [key: string]: components['schemas']['MessageAttributeValue']
      }
      md5OfBody?: string
      md5OfMessageAttributes?: string
    }
    MessageAttributeValue: {
      stringValue?: string
      binaryValue?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }
      stringListValues?: string[]
      binaryListValues?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }[]
      dataType?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['Message'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /**
     * @description
     *   Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *   An activity schedule describes when, during the week, an activity will be run and where.
     *   e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *   e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     */
    ActivitySchedule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /** @description The planned instances associated with this activity schedule */
      instances: components['schemas']['ScheduledInstance'][]
      /** @description The list of allocated prisoners who are allocated to this schedule, at this time and location */
      allocations: components['schemas']['Allocation'][]
      /**
       * @description The description of this activity schedule
       * @example Monday AM Houseblock 3
       */
      description: string
      /**
       * Format: date
       * @description If not null, it indicates the date until which this schedule is suspended
       */
      suspendUntil?: string
      startTime: string
      endTime: string
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      /**
       * @description The days of the week on which the schedule takes place
       * @example Mon,Tue,Wed
       */
      daysOfWeek: string
    }
    /** @description A prisoner who is allocated to an activity */
    Allocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this allocation
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description The incentive/earned privilege (level) for this offender allocation
       * @example BAS, STD, ENH
       */
      iepLevel?: string
      /**
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner
       * @example A
       */
      payBand?: string
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       */
      startDate?: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       */
      endDate?: string
      /**
       * @description Flag to indicate if this allocation is presently active
       * @example true
       */
      active: boolean
      /**
       * Format: date-time
       * @description The date and time the prisoner was allocated to the activity
       */
      allocatedTime?: string
      /**
       * @description The person who allocated the prisoner to the activity
       * @example Mr Blogs
       */
      allocatedBy?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was deallocated from the activity
       */
      deallocatedTime?: string
      /**
       * @description The person who deallocated the prisoner from the activity
       * @example Mrs Blogs
       */
      deallocatedBy?: string
      /**
       * @description The descriptive reason why this prisoner was deallocated from the activity
       * @example Not attending regularly
       */
      deallocatedReason?: string
    }
    /**
     * @description An internal NOMIS location for an activity to take place
     * @example 98877667
     */
    InternalLocation: {
      /**
       * Format: int32
       * @description The NOMIS internal location id for this schedule
       * @example 98877667
       */
      id: number
      /**
       * @description The NOMIS internal location code for this schedule
       * @example EDU-ROOM-1
       */
      code: string
      /**
       * @description The NOMIS internal location description for this schedule
       * @example Education - R1
       */
      description: string
    }
    /**
     * @description The time that any instances of this schedule will finish
     * @example 11:30
     */
    LocalTime: {
      /** Format: int32 */
      hour?: number
      /** Format: int32 */
      minute?: number
      /** Format: int32 */
      second?: number
      /** Format: int32 */
      nano?: number
    }
    /** @description Describes one instance of an activity schedule */
    ScheduledInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       */
      date: string
      startTime: string
      endTime: string
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    DlqMessage: {
      body: { [key: string]: { [key: string]: unknown } }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Describes one instance of a prison which may or may not be active (rolled out) */
    RolloutPrison: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison
       * @example 123456
       */
      id: number
      /**
       * @description The code for this prison
       * @example PVI
       */
      code: string
      /**
       * @description The description for this prison
       * @example HMP Pentonville
       */
      description: string
      /**
       * @description Flag to indicate if this prison is presently active
       * @example true
       */
      active: boolean
    }
    /** @description Describes a top-level activity */
    Activity: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description: string
      category: components['schemas']['ActivityCategory']
      tier: components['schemas']['ActivityTier']
      /**
       * @description A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)
       * @example [FEMALE_ONLY,AGED_18-25]
       */
      eligibilityRules: components['schemas']['ActivityEligibility'][]
      /** @description A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity. */
      schedules: components['schemas']['ActivitySchedule'][]
      /** @description A list of prisoners who are waiting for allocation to this activity. This list is held against the activity, though allocation is against particular schedules of the activity */
      waitingList: components['schemas']['PrisonerWaiting'][]
      pay?: components['schemas']['ActivityPay']
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       */
      endDate?: string
      /**
       * @description Flag to indicate if this activity is presently active
       * @example true
       */
      active: boolean
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description The person who created this activity
       * @example Adam Smith
       */
      createdBy: string
    }
    /**
     * @description Describes a category of activity
     * @example Education, Work, Intervention, Health
     */
    ActivityCategory: {
      /**
       * Format: int64
       * @description The internally generated ID for this activity category
       * @example 123456
       */
      id: number
      /**
       * @description The category code - one of a defined set.
       * @example Education, Prison Industry, Maintenance, Intervention
       */
      code: string
      /**
       * @description The description for this activity category
       * @example Education classes
       */
      description: string
    }
    /**
     * @description Describes an eligibility rule as applied to an activity
     * @example [FEMALE_ONLY,AGED_18-25]
     */
    ActivityEligibility: {
      /**
       * Format: int64
       * @description The internal ID of the activity that these rules apply to
       * @example 123456
       */
      id: number
      eligibility: components['schemas']['EligibilityRule']
    }
    /** @description Describes the pay rates and bands which apply to an activity */
    ActivityPay: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /** @description A list of pay bands and rates which apply to this activity pay. Can be empty if pay bands do not apply. */
      bands: components['schemas']['ActivityPayBand'][]
      /**
       * Format: int32
       * @description The incentive/earned privilege basic rate per session for this activity
       * @example 100
       */
      iepBasicRate?: number
      /**
       * Format: int32
       * @description The incentive/earned privilege standard rate per session for this activity
       * @example 125
       */
      iepStandardRate?: number
      /**
       * Format: int32
       * @description The incentive/earned privilege enhanced rate per session for this activity
       * @example 150
       */
      iepEnhancedRate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /** @description Activity pay band - used by some prisons to set a payment rate */
    ActivityPayBand: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay band
       * @example 123456
       */
      id: number
      /**
       * @description The pay band code - usually A-F - to differentiate different pay rates
       * @example A
       */
      payBand?: string
      /**
       * Format: int32
       * @description The rate to be paid for one session of this activity
       * @example 220
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    /**
     * @description An activity tier
     * @example Tier 1, Tier 2, Foundation
     */
    ActivityTier: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity tier
       * @example 123456
       */
      id: number
      /**
       * @description The code for this activity tier
       * @example Tier1
       */
      code: string
      /**
       * @description The detailed description for this activity tier
       * @example Work, education and maintenance
       */
      description: string
    }
    /** @description Defines one eligibility rule */
    EligibilityRule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this eligibility rule
       * @example 123456
       */
      id: number
      /**
       * @description The code for this eligibility rule
       * @example OVER_21
       */
      code: string
      /**
       * @description The description for this eligibility rule
       * @example The prisoner must be over 21 to attend
       */
      description: string
    }
    /** @description Describes a person who is on a waiting list for an activity */
    PrisonerWaiting: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prisoner waiting
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (NomisId) of the person on the waiting list
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int32
       * @description The priority of this person in the waiting list. The lower the number, the higher the priority
       * @example 1
       */
      priority: number
      /**
       * Format: date-time
       * @description The date and time when this person was added to the waiting list
       */
      createdTime: string
      /**
       * @description The staff members name who added this person to the waiting list
       * @example Adam Smith
       */
      createdBy: string
    }
  }
}

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /** Returns zero or more activity schedules at a given prison. */
  getSchedulesByPrisonCode: {
    parameters: {
      path: {
        prisonCode: string
      }
      query: {
        /** Date of activity, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** The internal NOMIS location id of the activity */
        locationId?: number
      }
    }
    responses: {
      /** Activity schedules found */
      200: {
        content: {
          'application/json': components['schemas']['ActivitySchedule'][]
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      path: {
        dlqName: string
      }
      query: {
        maxMessages?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  /** Returns a single prison and its details by its unique code. */
  getPrisonByCode: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** Prison found */
      200: {
        content: {
          'application/json': components['schemas']['RolloutPrison']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The prison for this code was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns a list of zero or more scheduled prison locations for the supplied criteria. */
  getScheduledPrisonLocations: {
    parameters: {
      path: {
        prisonCode: string
      }
      query: {
        /** Date of activity, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
    }
    responses: {
      /** Locations found */
      200: {
        content: {
          'application/json': components['schemas']['InternalLocation'][]
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns a single activity and its details by its unique identifier. */
  getActivityById: {
    parameters: {
      path: {
        activityId: number
      }
    }
    responses: {
      /** Activity found */
      200: {
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The activity for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
