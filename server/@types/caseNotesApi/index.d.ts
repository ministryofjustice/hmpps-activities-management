/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/case-notes/{offenderIdentifier}/{caseNoteIdentifier}': {
    /** Retrieves a case note */
    get: operations['getCaseNote']
    /**
     * Amend Case Note for offender
     * @description Amend a case note information adds and additional entry to the note
     */
    put: operations['amendCaseNote']
  }
  '/case-notes/types/{parentType}': {
    /**
     * Update Case Note Type
     * @description Creates a new case note type
     */
    put: operations['updateCaseNoteType']
    /**
     * Add New Case Note Sub Type
     * @description Creates a new case note sub type
     */
    post: operations['createCaseNoteSubType']
  }
  '/case-notes/types/{parentType}/{subType}': {
    /**
     * Update Case Note Sub Type
     * @description Creates a new case note sub type
     */
    put: operations['updateCaseNoteSubType']
  }
  '/publish-notes': {
    /** Publish sensitive case notes */
    post: operations['publishCaseNotes']
  }
  '/case-notes/{offenderIdentifier}': {
    /** Retrieves a list of case notes */
    get: operations['getCaseNotes']
    /**
     * Add Case Note for offender
     * @description Creates a note for a specific type/subType
     */
    post: operations['createCaseNote']
  }
  '/case-notes/types': {
    /** Retrieves a list of case note types */
    get: operations['getCaseNoteTypes']
    /**
     * Add New Case Note Type
     * @description Creates a new case note type
     */
    post: operations['createCaseNoteType']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/case-notes/types-for-user': {
    /** Retrieves a list of case note types for this user */
    get: operations['getUserCaseNoteTypes']
  }
  '/case-notes/{offenderIdentifier}/{caseNoteId}': {
    /** Deletes a case note */
    delete: operations['softDeleteCaseNote']
  }
  '/case-notes/amendment/{offenderIdentifier}/{caseNoteAmendmentId}': {
    /** Deletes a case note amendment */
    delete: operations['softDeleteCaseNoteAmendment']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Amend a Case Note */
    UpdateCaseNote: {
      /**
       * @description Text of case note
       * @example This is a case note message
       */
      text: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Case Note */
    CaseNote: {
      /**
       * @description Case Note Id (unique)
       * @example 12311312
       */
      caseNoteId: string
      /**
       * @description Offender Unique Identifier
       * @example A1234AA
       */
      offenderIdentifier: string
      /**
       * @description Case Note Type
       * @example KA
       */
      type: string
      /**
       * @description Case Note Type Description
       * @example Key Worker
       */
      typeDescription: string
      /**
       * @description Case Note Sub Type
       * @example KS
       */
      subType: string
      /**
       * @description Case Note Sub Type Description
       * @example Key Worker Session
       */
      subTypeDescription: string
      /**
       * @description Source Type
       * @example INST
       */
      source: string
      /**
       * Format: date-time
       * @description Date and Time of Case Note creation
       */
      creationDateTime: string
      /**
       * Format: date-time
       * @description Date and Time of when case note contact with offender was made
       */
      occurrenceDateTime: string
      /**
       * @description Full name of case note author
       * @example John Smith
       */
      authorName: string
      /**
       * @description User Id of case note author - staffId for nomis users, userId for auth users
       * @example 12345
       */
      authorUserId: string
      /**
       * @description Case Note Text
       * @example This is some text
       */
      text: string
      /**
       * @description Location Id representing where Case Note was made.
       * @example MDI
       */
      locationId?: string
      /**
       * Format: int32
       * @description Delius number representation of the case note id - will be negative for sensitive case note types
       * @example -23
       */
      eventId: number
      /**
       * @description Sensitive Note
       * @example true
       */
      sensitive: boolean
      /** @description Ordered list of amendments to the case note (oldest first) */
      amendments: components['schemas']['CaseNoteAmendment'][]
    }
    /** @description Case Note Amendment */
    CaseNoteAmendment: {
      /**
       * Format: int64
       * @description Amendment Case Note Id (unique)
       * @example 123232
       */
      caseNoteAmendmentId: number
      /**
       * Format: date-time
       * @description Date and Time of Case Note creation
       */
      creationDateTime: string
      /**
       * @description Username of the user amending the case note
       * @example USER1
       */
      authorUserName: string
      /**
       * @description Name of the user amending the case note
       * @example Mickey Mouse
       */
      authorName: string
      /**
       * @description User Id of the user amending the case note - staffId for nomis users, userId for auth users
       * @example 12345
       */
      authorUserId: string
      /**
       * @description Additional Case Note Information
       * @example Some Additional Text
       */
      additionalNoteText: string
    }
    /** @description Update a Case Note Type */
    UpdateCaseNoteType: {
      /**
       * @description Type Description
       * @example General Note Type
       */
      description: string
      /**
       * @description Active Type
       * @example true
       */
      active?: boolean
      /**
       * @description Sensitive Case Note Type, default true
       * @example true
       */
      sensitive?: boolean
      /**
       * @description Restricted Use, default true
       * @example true
       */
      restrictedUse?: boolean
    }
    /** @description Case Note Type */
    CaseNoteTypeDto: {
      /**
       * @description Case Note Code
       * @example OBSERVE
       */
      code: string
      /**
       * @description Case Note description.
       * @example Observations
       */
      description: string
      /**
       * @description Active indicator flag.
       * @example Y
       * @enum {string}
       */
      activeFlag: 'Y,N'
      /** @description List of case note sub types */
      subCodes?: components['schemas']['CaseNoteTypeDto'][] | null
      /**
       * @description Source of Case Note Type, legacy case note are null
       * @example OCNS
       */
      source?: string
      /**
       * @description Indicates the type of note is sensitive
       * @example true
       */
      sensitive?: boolean
      /**
       * @description Indicates the type of note can only be created by a sub-set of users (e.g. POMs)
       * @example true
       */
      restrictedUse?: boolean
    }
    /** @description Create a Case Note */
    NewCaseNote: {
      /**
       * @description Location where case note was made, if blank it will be looked up in Nomis
       * @example MDI
       */
      locationId: string
      /**
       * @description Type of case note
       * @example GEN
       */
      type: string
      /**
       * @description Sub Type of case note
       * @example OBS
       */
      subType: string
      /**
       * Format: date-time
       * @description Occurrence time of case note
       */
      occurrenceDateTime: string
      /**
       * @description Text of case note
       * @example This is a case note message
       */
      text: string
    }
    /** @description Create a New Case Note Type */
    NewCaseNoteType: {
      /**
       * @description Type of case note
       * @example GEN
       */
      type: string
      /**
       * @description Type Description
       * @example General Note Type
       */
      description: string
      /**
       * @description Active Type, default true
       * @example true
       */
      active?: boolean
      /**
       * @description Sensitive Case Note Type, default true
       * @example true
       */
      sensitive?: boolean
      /**
       * @description Restricted Use, default true
       * @example true
       */
      restrictedUse?: boolean
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Case Note Filter */
    CaseNoteFilter: {
      /**
       * @description Filter by Case Note Type. Cannot be used in conjunction with typeSubTypes.
       * @example KA
       */
      type?: string
      /**
       * @description Filter by Case Note Sub Type. Must used in conjunction with type, and cannot be used in conjunction with typeSubTypes.
       * @example KS
       */
      subType?: string
      /**
       * Format: date-time
       * @description Filter case notes from this date
       */
      startDate?: string
      /**
       * Format: date-time
       * @description Filter case notes up to this date
       */
      endDate?: string
      /**
       * @description Filter by the location
       * @example MDI
       */
      locationId?: string
      /**
       * @description Filter by username
       * @example USER1
       */
      authorUsername?: string
      /**
       * @description Filter by a list of case note types and optional case not sub types separated by plus. Cannot be used in conjunction with type or subType.
       * @example KA+KE,OBS,POM+GEN
       */
      typeSubTypes?: string[]
      typesAndSubTypes: string[]
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    PageCaseNote: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CaseNote'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /** Retrieves a case note */
  getCaseNote: {
    parameters: {
      path: {
        /**
         * @description Offender Identifier
         * @example A1234AA
         */
        offenderIdentifier: string
        /**
         * @description Case Note Id
         * @example 518b2200-6489-4c77-8514-10cf80ccd488
         */
        caseNoteIdentifier: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNote']
        }
      }
      /** @description Offender or case note not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Amend Case Note for offender
   * @description Amend a case note information adds and additional entry to the note
   */
  amendCaseNote: {
    parameters: {
      path: {
        /**
         * @description Offender Identifier
         * @example A1234AA
         */
        offenderIdentifier: string
        /**
         * @description Case Note Id
         * @example 518b2200-6489-4c77-8514-10cf80ccd488
         */
        caseNoteIdentifier: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCaseNote']
      }
    }
    responses: {
      /** @description The Case Note has been recorded. The updated object is returned including the status. */
      201: {
        content: {
          'application/json': components['schemas']['CaseNote']
        }
      }
      /** @description No case notes where found for this offender and case note id */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update Case Note Type
   * @description Creates a new case note type
   */
  updateCaseNoteType: {
    parameters: {
      path: {
        /**
         * @description Parent Case Note Type
         * @example OBS
         */
        parentType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCaseNoteType']
      }
    }
    responses: {
      /** @description The case note type has been updated. The updated object is returned. */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteTypeDto']
        }
      }
      /** @description The case note type is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add New Case Note Sub Type
   * @description Creates a new case note sub type
   */
  createCaseNoteSubType: {
    parameters: {
      path: {
        /**
         * @description Parent Case Note Type
         * @example GEN
         */
        parentType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewCaseNoteType']
      }
    }
    responses: {
      /** @description The Case Note Sub Type has been recorded. The updated object is returned including the status. */
      201: {
        content: {
          'application/json': components['schemas']['CaseNoteTypeDto']
        }
      }
      /** @description The case note sub type has already been recorded. The current unmodified object (including status) is returned. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update Case Note Sub Type
   * @description Creates a new case note sub type
   */
  updateCaseNoteSubType: {
    parameters: {
      path: {
        /**
         * @description Parent Case Note Type
         * @example OBS
         */
        parentType: string
        /**
         * @description Sub Case Note Type
         * @example GEN
         */
        subType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCaseNoteType']
      }
    }
    responses: {
      /** @description The case note sub type update has been updated. The updated object is returned. */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteTypeDto']
        }
      }
      /** @description The case note sub type is not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Publish sensitive case notes */
  publishCaseNotes: {
    parameters: {
      query: {
        /** @description A timestamp that indicates the earliest record required */
        fromDateTime?: string
        /** @description A timestamp that indicates the latest record required */
        toDateTime: string
      }
    }
    responses: {
      /** @description Number of notes to be published (asynchronously) */
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Retrieves a list of case notes */
  getCaseNotes: {
    parameters: {
      query: {
        /** @description Optionally specify a case note filter */
        filter: components['schemas']['CaseNoteFilter']
        pageable: components['schemas']['Pageable']
      }
      path: {
        /**
         * @description Offender Identifier
         * @example A1234AA
         */
        offenderIdentifier: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PageCaseNote']
        }
      }
      /** @description Offender not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add Case Note for offender
   * @description Creates a note for a specific type/subType
   */
  createCaseNote: {
    parameters: {
      path: {
        /**
         * @description Offender Identifier
         * @example A1234AA
         */
        offenderIdentifier: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewCaseNote']
      }
    }
    responses: {
      /** @description The Case Note has been recorded. The updated object is returned including the status. */
      201: {
        content: {
          'application/json': components['schemas']['CaseNote']
        }
      }
      /** @description The case note has already been recorded under the booking. The current unmodified object (including status) is returned. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a list of case note types */
  getCaseNoteTypes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteTypeDto'][]
        }
      }
      /** @description Case notes types not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add New Case Note Type
   * @description Creates a new case note type
   */
  createCaseNoteType: {
    requestBody: {
      content: {
        'application/json': components['schemas']['NewCaseNoteType']
      }
    }
    responses: {
      /** @description The Case Note Type has been recorded. The updated object is returned including the status. */
      201: {
        content: {
          'application/json': components['schemas']['CaseNoteTypeDto']
        }
      }
      /** @description The case note type has already been recorded. The current unmodified object (including status) is returned. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  /** Retrieves a list of case note types for this user */
  getUserCaseNoteTypes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteTypeDto'][]
        }
      }
      /** @description Case notes types not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Deletes a case note */
  softDeleteCaseNote: {
    parameters: {
      path: {
        /**
         * @description Offender Identifier
         * @example A1234AA
         */
        offenderIdentifier: string
        /**
         * @description Case Note Id
         * @example 518b2200-6489-4c77-8514-10cf80ccd488
         */
        caseNoteId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Offender or case note not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Deletes a case note amendment */
  softDeleteCaseNoteAmendment: {
    parameters: {
      path: {
        /**
         * @description Offender Identifier
         * @example A1234AA
         */
        offenderIdentifier: string
        /**
         * @description Case Note Amendment Id
         * @example 1
         */
        caseNoteAmendmentId: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
      /** @description Offender or case note not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
