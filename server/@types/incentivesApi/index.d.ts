/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/iep/sync/booking/{bookingId}': {
    /**
     * Synchronise (NOMIS -> Incentives) an IEP Review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    post: operations['syncPostIepReview']
  }
  '/iep/reviews/prisoner/{prisonerNumber}': {
    /**
     * Returns a history of IEP reviews for a prisoner
     * @description Prisoner Number is an unique reference for a prisoner in NOMIS
     */
    get: operations['getPrisonerIepLevelHistory']
    /**
     * Adds a new IEP Review for this specific prisoner by prisoner number
     * @description Prisoner Number is an unique reference for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    post: operations['addIepReview']
  }
  '/iep/reviews/bookings': {
    /** Returns a history of IEP reviews for a list of prisoners */
    post: operations['getCurrentIEPLevelForPrisoner']
  }
  '/iep/reviews/booking/{bookingId}': {
    /**
     * Returns a history of IEP reviews for a prisoner
     * @description Booking ID is an internal ID for a prisoner in NOMIS
     */
    get: operations['getPrisonerIepLevelHistory_1']
    /**
     * Adds a new IEP Review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    post: operations['addIepReview_1']
  }
  '/iep/migration/booking/{bookingId}': {
    /**
     * Migrates an IEP Review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    post: operations['migrateIepReview']
  }
  '/iep/sync/booking/{bookingId}/id/{id}': {
    /**
     * Deletes an existing IEP review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, ID is the ID of the IEP review. Requires MAINTAIN_IEP role and write scope
     */
    delete: operations['syncDeleteIepReview']
    /**
     * Update an existing IEP review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, ID is the ID of the IEP review. Requires MAINTAIN_IEP role and write scope
     */
    patch: operations['syncPatchIepReview']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/incentives-summary/prison/{prisonId}/location/{locationId}': {
    /**
     * Summaries IEP Incentive information at a specific location within a prison
     * @description location should be a Wing, Landing or Cell
     */
    get: operations['getIncentiveSummary']
  }
  '/incentives-reviews/prison/{prisonId}/location/{cellLocationPrefix}/level/{levelCode}': {
    /**
     * List of incentive review information for a given location within a prison and on a given level
     * @description location should be a cell ID prefix like `MDI-1`
     */
    get: operations['getReviews']
  }
  '/iep/reviews/id/{id}': {
    /** Returns a specified IEP Review */
    get: operations['getReviewById']
  }
  '/iep/levels/{prisonId}': {
    /**
     * Returns the valid IEP levels for specified prison
     * @description prison ID should be a 3 character string e.g. MDI = Moorland
     */
    get: operations['getPrisonIepLevels']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Message: {
      messageId?: string
      receiptHandle?: string
      body?: string
      attributes?: {
        [key: string]: string | undefined
      }
      messageAttributes?: {
        [key: string]: components['schemas']['MessageAttributeValue'] | undefined
      }
      md5OfBody?: string
      md5OfMessageAttributes?: string
    }
    MessageAttributeValue: {
      stringValue?: string
      binaryValue?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }
      stringListValues?: string[]
      binaryListValues?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }[]
      dataType?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['Message'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Error Response */
    ErrorResponse: {
      /**
       * Format: int32
       * @description Status of Error
       * @example 500
       */
      status: number
      /**
       * Format: int32
       * @description Error Code
       * @example 500
       */
      errorCode?: number
      /**
       * @description User Message of error
       * @example Bad Data
       */
      userMessage?: string
      /**
       * @description More detailed error message
       * @example This is a stack trace
       */
      developerMessage?: string
      /**
       * @description More information about the error
       * @example More info
       */
      moreInfo?: string
    }
    /** @description IEP Review */
    SyncPostRequest: {
      /**
       * @description Date and time when the review took place
       * @example 2021-07-05T10:35:17
       */
      iepTime: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description IEP Level
       * @example STD
       * @enum {string}
       */
      iepLevel: 'BAS' | 'STD' | 'ENH' | 'EN2' | 'EN3'
      /**
       * @description Comment about review
       * @example A review took place
       */
      comment?: string
      /**
       * @description NOMIS User Id who performed the review
       * @example USER_1_GEN
       */
      userId?: string
      /**
       * @description Review Type
       * @example REVIEW
       * @enum {string}
       */
      reviewType: 'INITIAL' | 'REVIEW' | 'TRANSFER' | 'MIGRATED' | 'READMISSION'
      /**
       * @description Flag to indicate this is the current review for the prisoner
       * @example true
       */
      current: boolean
    }
    /** @description Detail IEP review details */
    IepDetail: {
      /**
       * Format: int64
       * @description Unique ID for this review (new Incentives data model only)
       * @example 12345
       */
      id?: number
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
      /**
       * @description IEP Code
       * @example STD
       */
      iepCode?: string
      /**
       * @description Review comments
       * @example A review took place
       */
      comments?: string
      /**
       * @description Prisoner number (NOMS)
       * @example A1234BC
       */
      prisonerNumber?: string
      /**
       * Format: int64
       * @description Booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Date when last review took place
       * @example 2021-12-31
       */
      iepDate: string
      /**
       * @description Date and time when last review took place
       * @example 2021-07-05T10:35:17
       */
      iepTime: string
      /**
       * @description Prison ID
       * @example MDI
       */
      agencyId: string
      /**
       * @description Location  of prisoner when review took place within prison (i.e. their cell)
       * @example 1-2-003
       */
      locationId?: string
      /**
       * @description Username of the reviewer
       * @example USER_1_GEN
       */
      userId: string
      /**
       * @description Type of IEP Level change
       * @example REVIEW
       * @enum {string}
       */
      reviewType: 'INITIAL' | 'REVIEW' | 'TRANSFER' | 'MIGRATED' | 'READMISSION'
      /**
       * @description Internal audit field holding which system/screen recorded the review
       * @example INCENTIVES_API
       */
      auditModuleName: string
      realReview: boolean
    }
    /** @description IEP Review */
    IepReview: {
      /**
       * @description IEP Level
       * @example STD
       * @enum {string}
       */
      iepLevel: 'BAS' | 'STD' | 'ENH' | 'EN2' | 'EN3'
      /**
       * @description Comment about review
       * @example A review took place
       */
      comment: string
      /**
       * @description Review Type
       * @default REVIEW
       * @example REVIEW
       * @enum {string}
       */
      reviewType?: 'INITIAL' | 'REVIEW' | 'TRANSFER' | 'MIGRATED' | 'READMISSION'
    }
    /** @description Current IEP Level */
    CurrentIepLevel: {
      /**
       * Format: int64
       * @description Booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
    }
    /** @description IEP Review changes */
    SyncPatchRequest: {
      /**
       * @description Date and time when the review took place
       * @example 2021-07-05T10:35:17
       */
      iepTime?: string
      /**
       * @description Comment about review
       * @example A review took place
       */
      comment?: string
      /**
       * @description Flag to indicate this is the current review for the prisoner
       * @example true
       */
      current?: boolean
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    BehaviourSummary: {
      /**
       * @description Prison Id
       * @example MDI
       */
      prisonId: string
      /**
       * @description Location within the prison
       * @example 1
       */
      locationId: string
      /**
       * @description Location within the prison description
       * @example Houseblock 1
       */
      locationDescription: string
      /** @description Breakdown of behaviours at this location by IEP level */
      incentiveLevelSummary: components['schemas']['IncentiveLevelSummary'][]
      /**
       * Format: int32
       * @description Total count of just the negative case note behaviour entries recorded of the sub type  <em>Incentive Warning</em> for this location
       * @example 14
       */
      totalIncentiveWarnings: number
      /**
       * Format: int32
       * @description Average number of days a prisoner at this location has been on their current level
       * @example 234
       */
      averageDaysOnLevel: number
      /**
       * Format: int32
       * @description Total count of all the positive case note behaviour entries recorded for this location
       * @example 20
       */
      totalPositiveBehaviours: number
      /**
       * Format: int32
       * @description Average number time in days a prisoner at this location had their last review
       * @example 50
       */
      averageDaysSinceLastReview: number
      /**
       * Format: int32
       * @description Total count of all the negative case note behaviour entries recorded for this location
       * @example 35
       */
      totalNegativeBehaviours: number
      /**
       * Format: int32
       * @description Total count of just the positive case note behaviour entries recorded of the sub type <em>Incentive Encouragements</em> for this location
       * @example 6
       */
      totalIncentiveEncouragements: number
      /**
       * Format: int32
       * @description Total number of prisoners at this location
       * @example 150
       */
      totalNumberOfPrisoners: number
    }
    /** @description Breakdown of behaviours at this location by IEP level */
    IncentiveLevelSummary: {
      /**
       * @description IEP Level Code
       * @example STD
       */
      level: string
      /**
       * @description IEP level description
       * @example Standard
       */
      levelDescription: string
      /** @description List of all prisoners at this location at this IEP level */
      prisonerBehaviours: components['schemas']['PrisonerIncentiveSummary'][]
      /**
       * Format: int32
       * @description Number of prisoners at this IEP level
       * @example 70
       */
      numberAtThisLevel: number
    }
    /** @description List of all prisoners at this location at this IEP level */
    PrisonerIncentiveSummary: {
      /**
       * @description Prisoner Number - Often called NOMS Number/ID
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description Internal reference for a period in prison (Not to be confused with the BOOK or Book Number)
       * @example 1234567
       */
      bookingId: number
      /**
       * @description Prisoners First Name
       * @example John
       */
      firstName: string
      /**
       * @description Prisoners Last Name
       * @example Smith
       */
      lastName: string
      /**
       * Format: int32
       * @description Calculated attribute that determines the number of days the prisoner has been on their current IEP level for their current offender booking. Historical data for a prisoner IEP reviews is only available via the prison API on a per prisoner, prison or prison location (i.e Wing) basis.
       * @example 10
       */
      daysOnLevel: number
      /**
       * Format: int32
       * @description A simple calculation using the current date and calculating the number of elapsed days since the date of the prisoners last IEP review. <br/>Note: Assumption that if an IEP record exist in NOMIS then an IEP review has taken place
       * @example 50
       */
      daysSinceLastReview: number
      /**
       * Format: int32
       * @description Count of all the positive case note behaviour entries recorded
       * @example 7
       */
      positiveBehaviours: number
      /**
       * Format: int32
       * @description Count of just the positive case note behaviour entries recorded of the sub type <em>Incentive Encouragements</em
       * @example 1
       */
      incentiveEncouragements: number
      /**
       * Format: int32
       * @description Count of all the negative case note behaviour entries recorded
       * @example 5
       */
      negativeBehaviours: number
      /**
       * Format: int32
       * @description Count of just the negative case note behaviour entries recorded of the sub type  <em>Incentive Warning</em>
       * @example 2
       */
      incentiveWarnings: number
      /**
       * Format: int32
       * @description A count of the proven adjudications for the offender at the current prison where the hearing result is <em>PROVEN</em>
       * @example 14
       */
      provenAdjudications: number
    }
    /** @description Incentive review information for a prisoner */
    IncentiveReview: {
      /**
       * @description Prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description Internal reference for a period in prison
       * @example 1234567
       */
      bookingId: number
      /**
       * @description Prisoner’s first name
       * @example John
       */
      firstName: string
      /**
       * @description Prisoner’s last name
       * @example Smith
       */
      lastName: string
      /**
       * @description Prisoner’s incentive level code
       * @example STD
       */
      levelCode: string
      /**
       * Format: int32
       * @description Count of all the positive case note behaviour entries recorded in the last 3 months
       * @example 7
       */
      positiveBehaviours: number
      /**
       * Format: int32
       * @description Count of all the negative case note behaviour entries recorded in the last 3 months
       * @example 7
       */
      negativeBehaviours: number
      /**
       * @description Whether the prisoner has an ACCT open alert
       * @example true
       */
      hasAcctOpen: boolean
      /**
       * Format: date
       * @description Date of next review
       * @example 2022-12-31
       */
      nextReviewDate: string
    }
    /** @description Incentive reviews list for prisoners at a given location */
    IncentiveReviewResponse: {
      /** @description Prisoner incentive reviews */
      reviews: components['schemas']['IncentiveReview'][]
      /**
       * Format: int32
       * @description Total number of reviews at given location
       * @example 102
       */
      reviewCount: number
      /**
       * Format: int32
       * @description Total number of overdue prisoner reviews at given location
       * @example 102
       */
      overdueCount: number
      /**
       * @description Description of given location
       * @example Houseblock 1
       */
      locationDescription: string
    }
    /** @description IEP Review Summary for Prisoner */
    IepSummary: {
      /**
       * Format: int64
       * @description Unique ID for this review (new Incentives data model only)
       * @example 12345
       */
      id?: number
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
      /**
       * @description Prisoner number (NOMS)
       * @example A1234BC
       */
      prisonerNumber?: string
      /**
       * Format: int64
       * @description Booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Date when last review took place
       * @example 2021-12-31
       */
      iepDate: string
      /**
       * @description Date and time when last review took place
       * @example 2021-07-05T10:35:17
       */
      iepTime: string
      /**
       * @description Location  of prisoner when review took place within prison (i.e. their cell)
       * @example 1-2-003
       */
      locationId?: string
      /** @description IEP Review History (descending in time) */
      iepDetails: components['schemas']['IepDetail'][]
      /**
       * Format: date
       * @description Date of next review
       * @example 2022-12-31
       */
      nextReviewDate?: string
      /**
       * Format: int32
       * @description Days since last review
       * @example 23
       */
      daysSinceReview: number
    }
    IepLevel: {
      /**
       * @description IEP Code for an IEP level
       * @example STD
       */
      iepLevel: string
      /**
       * @description Description of the IEP Level
       * @example Standard
       */
      iepDescription: string
      /**
       * Format: int32
       * @description Sequence to display the IEP Levels for this prison in LOV or other tables
       * @example 1
       */
      sequence?: number
      /**
       * @description Indicates that this IEP level is the default for this prison
       * @example true
       */
      default: boolean
      /**
       * @description Indicates that this IEP level is the active
       * @example true
       */
      active: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  syncPostIepReview: {
    /**
     * Synchronise (NOMIS -> Incentives) an IEP Review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    parameters: {
      /**
       * @description Booking Id
       * @example 3000002
       */
      path: {
        bookingId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncPostRequest']
      }
    }
    responses: {
      /** @description IEP Review Synchronised */
      201: {
        content: {
          'application/json': components['schemas']['IepDetail']
        }
      }
      /** @description Incorrect data specified to add new IEP review */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerIepLevelHistory: {
    /**
     * Returns a history of IEP reviews for a prisoner
     * @description Prisoner Number is an unique reference for a prisoner in NOMIS
     */
    parameters: {
      /**
       * @description Prisoner Number
       * @example A1234AB
       */
      path: {
        prisonerNumber: string
      }
    }
    responses: {
      /** @description IEP Level History Information returned */
      200: {
        content: {
          'application/json': components['schemas']['IepSummary']
        }
      }
      /** @description Incorrect data specified to return IEP Level History */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addIepReview: {
    /**
     * Adds a new IEP Review for this specific prisoner by prisoner number
     * @description Prisoner Number is an unique reference for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    parameters: {
      /**
       * @description Prisoner Number
       * @example A1234AB
       */
      path: {
        prisonerNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IepReview']
      }
    }
    responses: {
      /** @description IEP Review Added */
      201: {
        content: {
          'application/json': components['schemas']['IepDetail']
        }
      }
      /** @description Incorrect data specified to add new IEP review */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCurrentIEPLevelForPrisoner: {
    /** Returns a history of IEP reviews for a list of prisoners */
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description IEP Level Information returned per prisoner */
      200: {
        content: {
          'application/json': components['schemas']['CurrentIepLevel'][]
        }
      }
      /** @description Incorrect data specified to return IEP Level History */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerIepLevelHistory_1: {
    /**
     * Returns a history of IEP reviews for a prisoner
     * @description Booking ID is an internal ID for a prisoner in NOMIS
     */
    parameters: {
      /**
       * @description Toggle to return IEP detail entries in response (or not)
       * @example true
       */
      query?: {
        'with-details'?: boolean
      }
      /**
       * @description Booking Id
       * @example 3000002
       */
      path: {
        bookingId: number
      }
    }
    responses: {
      /** @description IEP Level History Information returned */
      200: {
        content: {
          'application/json': components['schemas']['IepSummary']
        }
      }
      /** @description Incorrect data specified to return IEP Level History */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addIepReview_1: {
    /**
     * Adds a new IEP Review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    parameters: {
      /**
       * @description Booking Id
       * @example 3000002
       */
      path: {
        bookingId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IepReview']
      }
    }
    responses: {
      /** @description IEP Review Added */
      201: {
        content: {
          'application/json': components['schemas']['IepDetail']
        }
      }
      /** @description Incorrect data specified to add new IEP review */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateIepReview: {
    /**
     * Migrates an IEP Review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, requires MAINTAIN_IEP role and write scope
     */
    parameters: {
      /**
       * @description Booking Id
       * @example 3000002
       */
      path: {
        bookingId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncPostRequest']
      }
    }
    responses: {
      /** @description IEP Review Migrated */
      201: {
        content: {
          'application/json': components['schemas']['IepDetail']
        }
      }
      /** @description Incorrect data specified to add new IEP review */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncDeleteIepReview: {
    /**
     * Deletes an existing IEP review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, ID is the ID of the IEP review. Requires MAINTAIN_IEP role and write scope
     */
    parameters: {
      /**
       * @description Booking Id
       * @example 1234567
       */
      /**
       * @description ID
       * @example 12345
       */
      path: {
        bookingId: number
        id: number
      }
    }
    responses: {
      /** @description IEP Review deleted */
      204: never
      /** @description Incorrect data specified to delete the IEP review */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncPatchIepReview: {
    /**
     * Update an existing IEP review for this specific prisoner by booking Id
     * @description Booking ID is an internal ID for a prisoner in NOMIS, ID is the ID of the IEP review. Requires MAINTAIN_IEP role and write scope
     */
    parameters: {
      /**
       * @description Booking Id
       * @example 1234567
       */
      /**
       * @description ID
       * @example 12345
       */
      path: {
        bookingId: number
        id: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncPatchRequest']
      }
    }
    responses: {
      /** @description IEP Review updated */
      200: {
        content: {
          'application/json': components['schemas']['IepDetail']
        }
      }
      /** @description Incorrect data specified to update the IEP review */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getIncentiveSummary: {
    /**
     * Summaries IEP Incentive information at a specific location within a prison
     * @description location should be a Wing, Landing or Cell
     */
    parameters: {
      /**
       * @description Sort By
       * @example NAME
       */
      /**
       * @description Sort Direction
       * @example ASC
       */
      query?: {
        sortBy?:
          | 'NUMBER'
          | 'NAME'
          | 'DAYS_ON_LEVEL'
          | 'POS_BEHAVIOURS'
          | 'NEG_BEHAVIOURS'
          | 'DAYS_SINCE_LAST_REVIEW'
          | 'INCENTIVE_WARNINGS'
          | 'INCENTIVE_ENCOURAGEMENTS'
          | 'PROVEN_ADJUDICATIONS'
        sortDirection?: string
      }
      /**
       * @description Prison Id
       * @example MDI
       */
      /**
       * @description Location Id
       * @example MDI-1
       */
      path: {
        prisonId: string
        locationId: string
      }
    }
    responses: {
      /** @description Incentive Information returned */
      200: {
        content: {
          'application/json': components['schemas']['BehaviourSummary']
        }
      }
      /** @description Incorrect data specified to return incentive data */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReviews: {
    /**
     * List of incentive review information for a given location within a prison and on a given level
     * @description location should be a cell ID prefix like `MDI-1`
     */
    parameters: {
      /**
       * @description Sort reviews by
       * @example PRISONER_NUMBER
       */
      /**
       * @description Sort direction
       * @example ASC
       */
      /**
       * @description Page (starts at 0)
       * @example 2
       */
      /**
       * @description Page size
       * @example 20
       */
      query?: {
        sort?:
          | 'NEXT_REVIEW_DATE'
          | 'FIRST_NAME'
          | 'LAST_NAME'
          | 'PRISONER_NUMBER'
          | 'POSITIVE_BEHAVIOURS'
          | 'NEGATIVE_BEHAVIOURS'
          | 'HAS_ACCT_OPEN'
        order?: 'ASC' | 'DESC'
        page?: number
        pageSize?: number
      }
      /**
       * @description Prison ID
       * @example MDI
       */
      /**
       * @description Cell location ID prefix
       * @example MDI-1
       */
      /**
       * @description Incentive level code
       * @example STD
       */
      path: {
        prisonId: string
        cellLocationPrefix: string
        levelCode: string
      }
    }
    responses: {
      /** @description Reviews information returned */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveReviewResponse']
        }
      }
      /** @description Invalid request parameters */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised request */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Request does not have necessary permissions */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReviewById: {
    /** Returns a specified IEP Review */
    parameters: {
      /**
       * @description Review ID (internal)
       * @example 1000
       */
      path: {
        id: number
      }
    }
    responses: {
      /** @description IEP Level Information returned */
      200: {
        content: {
          'application/json': components['schemas']['IepDetail']
        }
      }
      /** @description Incorrect data specified to return IEP Level History */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonIepLevels: {
    /**
     * Returns the valid IEP levels for specified prison
     * @description prison ID should be a 3 character string e.g. MDI = Moorland
     */
    parameters: {
      /**
       * @description Prison Id
       * @example MDI
       */
      path: {
        prisonId: string
      }
    }
    responses: {
      /** @description IEP Level Information returned */
      200: {
        content: {
          'application/json': components['schemas']['IepLevel'][]
        }
      }
      /** @description Incorrect data specified to return IEP Level data */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to use this endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
