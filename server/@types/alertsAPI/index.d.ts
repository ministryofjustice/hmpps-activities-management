/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/alerts/{alertUuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an alert by its unique identifier
     * @description Returns the alert with the matching identifier.
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    get: operations['retrieveAlert']
    /**
     * Update an alert
     * @description
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RW
     */
    put: operations['updateAlert']
    post?: never
    /**
     * Delete an alert
     * @description This endpoint fully removes the alert from the system. It is used when an alert has been created in error or should otherwise be removed from this service. This endpoint will return 200 OK if the alert was not found or already deleted. This is to prevent low value warnings being logged.
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RW
     */
    delete: operations['deleteAlert']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/search/alerts/prison-numbers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Gets all the alerts for prisoners by their prison numbers
     * @description Returns all the alerts for the supplied prison numbers.
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    post: operations['retrievePrisonerAlerts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/resync/{prisonNumber}/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resync all alerts for a prisoner from NOMIS
     * @description
     *
     *     Requires one of the following roles:
     *     * ROLE_NOMIS_ALERTS
     */
    post: operations['resyncPrisonerAlerts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{prisonNumber}/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all the alerts for a prisoner by their prison number
     * @description
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    get: operations['retrievePrisonerAlerts_1']
    put?: never
    /**
     * Create an alert
     * @description
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RW
     */
    post: operations['createPrisonerAlert']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bulk-alerts/plan': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create the plan for bulk alerts
     * @description
     *
     *
     */
    post: operations['createPlan']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bulk-alerts/plan/{id}/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start the plan for bulk alerts
     * @description
     *
     *
     */
    post: operations['startPlan']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alert-types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all alert types
     * @description Returns the full list of alert types and the alert codes within those types. By default this endpoint only returns active alert types and codes. The include inactive parameter can be used to return all alert types and codes.
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    get: operations['retrieveAlertTypes']
    put?: never
    /**
     * Create an alert type
     * @description Create a new alert type, typically from the Alerts UI
     *
     *
     */
    post: operations['createAlertType']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alert-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve all alert codes
     * @description Retrieve all alert codes, typically from the Alerts UI
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    get: operations['retrieveAlertCodes']
    put?: never
    /**
     * Create an alert code
     * @description Create a new alert code, typically from the Alerts UI
     *
     *
     */
    post: operations['createAlertCode']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bulk-alerts/plan/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update the plan for bulk alerts
     * @description
     *
     *
     */
    patch: operations['updatePlan']
    trace?: never
  }
  '/alert-types/{alertType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update alert type
     * @description Set the properties of an alert type to the submitted value.
     *
     *
     */
    patch: operations['updateAlertType']
    trace?: never
  }
  '/alert-types/{alertType}/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Reactivate an alert type
     * @description Reactivate an alert type, typically from the Alerts UI
     *
     *
     */
    patch: operations['reactivateAlertType']
    trace?: never
  }
  '/alert-types/{alertType}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Deactivate an alert type
     * @description Deactivate an alert type, typically from the Alerts UI
     *
     *
     */
    patch: operations['deactivateAlertType']
    trace?: never
  }
  '/alert-codes/{alertCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve an alert code
     * @description Retrieve an alert code, typically from the Alerts UI
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    get: operations['retrieveAlertCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update alert code
     * @description Set the properties of an alert code to the submitted value.
     *
     *
     */
    patch: operations['updateAlertCode']
    trace?: never
  }
  '/alert-codes/{alertCode}/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Reactivate an alert code
     * @description Reactivate an alert code, typically from the Alerts UI
     *
     *
     */
    patch: operations['reactivateAlertCode']
    trace?: never
  }
  '/alert-codes/{alertCode}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Deactivate an alert code
     * @description Deactivate an alert code, typically from the Alerts UI
     *
     *
     */
    patch: operations['deactivateAlertCode']
    trace?: never
  }
  '/bulk-alerts/plan/{id}/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the status of a plan
     * @description
     *
     *
     */
    get: operations['getPlanStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bulk-alerts/plan/{id}/prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get prisoners associated with a plan
     * @description
     *
     *
     */
    get: operations['getPlanPrisoners']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bulk-alerts/plan/{id}/affects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get counts associated with a plan
     * @description
     *
     *
     */
    get: operations['getPlanAffect']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alert-types/{alertTypeCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an alert type
     * @description Returns the specified alert type.
     *
     *     Requires one of the following roles:
     *     * ROLE_PRISONER_ALERTS__RO
     *     * ROLE_PRISONER_ALERTS__RW
     */
    get: operations['retrieveAlertType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description The alert data to use to update an alert in the service */
    UpdateAlert: {
      /**
       * @description The updated description of the alert. Will be ignored if null and will clear the description if empty. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The updated user, staff member, approving person or organisation that authorised the alert to be added. Will be ignored if null and will clear the authorised by value if empty. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If set to null the field will be ignoredThe active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom?: string
      /**
       * Format: date
       * @description The date the alert should be active until. If set to null i.e. cleared, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      errorCode?: string
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description An alert associated with a person */
    Alert: {
      /**
       * Format: uuid
       * @description The unique identifier assigned to the alert
       * @example 8cdadcf3-b003-4116-9956-c99bd8df6a00
       */
      alertUuid: string
      /**
       * @description The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.
       * @example A1234AA
       */
      prisonNumber: string
      /** @description The alert code for the alert. A person will only have one alert using each code active at any one time. */
      alertCode: components['schemas']['AlertCodeSummary']
      /**
       * @description The description of the alert. It is a free text field and is used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. It is a free text field and is used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
      /**
       * @description Indicates that the alert is active for the person. Alerts are active if their active from date is in the past and their active to date is either null or in the future. Note that this field is read only and cannot be set directly using the API.
       * @example true
       */
      isActive: boolean
      /**
       * Format: date-time
       * @description The date and time the alert was created
       * @example 2021-09-27T14:19:25
       */
      createdAt: string
      /**
       * @description The username of the user who created the alert
       * @example USER1234
       */
      createdBy: string
      /**
       * @description The displayable name of the user who created the alert
       * @example Firstname Lastname
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description The date and time the alert was last modified
       * @example 2022-07-15T15:24:56
       */
      lastModifiedAt?: string
      /**
       * @description The username of the user who last modified the alert
       * @example USER1234
       */
      lastModifiedBy?: string
      /**
       * @description The displayable name of the user who last modified the alert
       * @example Firstname Lastname
       */
      lastModifiedByDisplayName?: string
      /**
       * Format: date-time
       * @description The date and time the alert was last set to expire.
       * @example 2022-07-15T15:24:56
       */
      activeToLastSetAt?: string
      /**
       * @description The username of the user who last set the alert to expire.
       * @example USER1234
       */
      activeToLastSetBy?: string
      /**
       * @description The displayable name of the user who last set the alert to expire.
       * @example Firstname Lastname
       */
      activeToLastSetByDisplayName?: string
    }
    /** @description The summary information of an alert code used to categorise alerts */
    AlertCodeSummary: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      alertTypeCode: string
      /**
       * @description The description of the alert type
       * @example Alert type description
       */
      alertTypeDescription: string
      /**
       * @description The short code for the alert code. Usually starts with the alert type code
       * @example ABC
       */
      code: string
      /**
       * @description The description of the alert code
       * @example Alert code description
       */
      description: string
    }
    AlertsResponse: {
      content: components['schemas']['Alert'][]
    }
    ResyncAlert: {
      /**
       * Format: int64
       * @description The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 12345
       */
      offenderBookId: number
      /**
       * Format: int32
       * @description The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.
       * @example 2
       */
      alertSeq: number
      /**
       * @description The alert code for the alert. A person should only have one alert using each code active at any one time however this is not enforced during migration. The alert code must exist but can be inactive.
       * @example ABC
       */
      alertCode: string
      /**
       * @description The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters when migrating an alert.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. The active from date can be in the past or the future, but should be on or before the active to date
       * @example 2021-09-27
       */
      activeFrom: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but should be on or after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
      /**
       * Format: date-time
       * @description The date and time the alert was created.
       * @example 2022-07-15'H'23:03:01.123456
       */
      createdAt: string
      /**
       * @description The user id of the person who created the alert.
       * @example AB11DZ
       */
      createdBy: string
      /**
       * @description The display name of the person who created the alert.
       * @example A Jones
       */
      createdByDisplayName: string
      /**
       * Format: date-time
       * @description The date and time the alert was last modified. Only provided if the alert has been modified since creation.
       * @example 2022-07-15'H'23:03:01.123456
       */
      lastModifiedAt?: string
      /**
       * @description The user id of the person who last modified the alert. Required if lastModifiedAt has been supplied.
       * @example AB11DZ
       */
      lastModifiedBy?: string
      /**
       * @description The displayable name of the person who last modified the alert. Required if lastModifiedAt has been supplied.
       * @example U Dated
       */
      lastModifiedByDisplayName?: string
      isActive: boolean
    }
    ResyncedAlert: {
      /**
       * Format: int64
       * @description The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the resync alert response for mapping between NOMIS and DPS.
       * @example 12345
       */
      offenderBookId: number
      /**
       * Format: int32
       * @description The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the resync alert response for mapping between NOMIS and DPS.
       * @example 2
       */
      alertSeq: number
      /**
       * Format: uuid
       * @description The unique identifier assigned to the alert
       * @example 8cdadcf3-b003-4116-9956-c99bd8df6a00
       */
      alertUuid: string
    }
    /** @description The alert data to use to create an alert in the service */
    CreateAlert: {
      /**
       * @description The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist and be active.
       * @example ABC
       */
      alertCode: string
      /**
       * @description The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.
       * @example Alert description
       */
      description?: string
      /**
       * @description The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.
       * @example A. Nurse, An Agency
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date
       * @example 2021-09-27
       */
      activeFrom?: string
      /**
       * Format: date
       * @description The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date
       * @example 2022-07-15
       */
      activeTo?: string
    }
    BulkPlan: {
      /** Format: uuid */
      id: string
    }
    /** @description The request body for creating a new alert type */
    CreateAlertTypeRequest: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      code: string
      /**
       * @description The description of the alert type
       * @example Alert type description
       */
      description: string
    }
    /** @description An alert code used to categorise alerts */
    AlertCode: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      alertTypeCode: string
      /**
       * @description The short code for the alert code. Usually starts with the alert type code
       * @example ABC
       */
      code: string
      /**
       * @description The description of the alert code
       * @example Alert code description
       */
      description: string
      /**
       * Format: int32
       * @description The sequence number of the alert code within the alert type. Used for ordering alert codes correctly in lists and drop downs. A value of 0 indicates this is the default alert code for the alert type
       * @example 3
       */
      listSequence: number
      /**
       * @description Indicates that the alert code is active and can be used. Inactive alert codes are not returned by default in the API
       * @example true
       */
      isActive: boolean
      /**
       * Format: date-time
       * @description The date and time the alert code was created
       * @example 2021-09-27T14:19:25
       */
      createdAt: string
      /**
       * @description The username of the user who created the alert code
       * @example USER1234
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the alert code was last modified
       * @example 2022-07-15T15:24:56
       */
      modifiedAt?: string
      /**
       * @description The username of the user who last modified the alert code
       * @example USER1234
       */
      modifiedBy?: string
      /**
       * Format: date-time
       * @description The date and time the alert code was deactivated
       * @example 2023-11-08T09:53:34
       */
      deactivatedAt?: string
      /**
       * @description The username of the user who deactivated the alert code
       * @example USER1234
       */
      deactivatedBy?: string
    }
    /** @description An alert type used to categorise alerts */
    AlertType: {
      /**
       * @description The short code for the alert type
       * @example A
       */
      code: string
      /**
       * @description The description of the alert type
       * @example Alert type description
       */
      description: string
      /**
       * Format: int32
       * @description The sequence number of the alert type. Used for ordering alert types correctly in lists and drop downs. A value of 0 indicates this is the default alert type
       * @example 3
       */
      listSequence: number
      /**
       * @description Indicates that the alert type is active and can be used. Inactive alert types are not returned by default in the API
       * @example true
       */
      isActive: boolean
      /**
       * Format: date-time
       * @description The date and time the alert type was created
       * @example 2021-09-27T14:19:25
       */
      createdAt: string
      /**
       * @description The username of the user who created the alert type
       * @example USER1234
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the alert type was last modified
       * @example 2022-07-15T15:24:56
       */
      modifiedAt?: string
      /**
       * @description The username of the user who last modified the alert type
       * @example USER1234
       */
      modifiedBy?: string
      /**
       * Format: date-time
       * @description The date and time the alert type was deactivated
       * @example 2023-11-08T09:53:34
       */
      deactivatedAt?: string
      /**
       * @description The username of the user who deactivated the alert type
       * @example USER1234
       */
      deactivatedBy?: string
      /** @description The alert codes associated with this alert type */
      alertCodes: components['schemas']['AlertCode'][]
    }
    /** @description The request body for creating a new alert code */
    CreateAlertCodeRequest: {
      /**
       * @description The short code for the alert code
       * @example A
       */
      code: string
      /**
       * @description The description of the alert code
       * @example Alert code description
       */
      description: string
      /**
       * @description The short code for the parent type
       * @example A
       */
      parent: string
    }
    /** @description The request body for updating the properties of an alert type */
    UpdateAlertTypeRequest: {
      /**
       * @description The new property value(s) to be updated onto an alert type
       * @example New description value for an alert type
       */
      description: string
    }
    /** @description The request body for updating the properties of an alert code */
    UpdateAlertCodeRequest: {
      /**
       * @description The new property value(s) to be updated onto an alert code
       * @example New description value for an alert code
       */
      description: string
    }
    PageAlert: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Alert'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['Sortnull']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['Pageablenull']
      empty?: boolean
    }
    Pageablenull: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['Sortnull']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    Sortnull: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    BulkPlanCounts: {
      /** Format: int32 */
      existingAlerts: number
      /** Format: int32 */
      created: number
      /** Format: int32 */
      updated: number
      /** Format: int32 */
      expired: number
    }
    BulkPlanStatus: {
      /** Format: date-time */
      createdAt?: string
      createdBy?: string
      createdByDisplayName?: string
      /** Format: date-time */
      startedAt?: string
      startedBy?: string
      startedByDisplayName?: string
      /** Format: date-time */
      completedAt?: string
      counts?: components['schemas']['BulkPlanCounts']
    }
    BulkPlanPrisoners: {
      prisoners: components['schemas']['PrisonerSummary'][]
    }
    PrisonerSummary: {
      prisonNumber: string
      firstName: string
      lastName: string
      prisonCode?: string
      cellLocation?: string
    }
    BulkPlanAffect: {
      counts: components['schemas']['BulkPlanCounts']
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  retrieveAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The alert associated with this identifier was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlert: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlert']
      }
    }
    responses: {
      /** @description Alert updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAlert: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        /** @description Alert unique identifier */
        alertUuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert was not found or already deleted */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retrievePrisonerAlerts: {
    parameters: {
      query?: {
        includeInactive?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Alerts found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['AlertsResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  resyncPrisonerAlerts: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Unique identifier of the prisoner. Aliases: offender number, prisoner number, offender id or NOMS id
         * @example A1234AA
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResyncAlert'][]
      }
    }
    responses: {
      /** @description Resync of alerts successful */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResyncedAlert'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retrievePrisonerAlerts_1: {
    parameters: {
      query?: {
        /**
         * @description Return only active (true) or inactive (false) alerts. If not provided or a null value is supplied, all alerts are returned
         * @example true
         */
        isActive?: boolean
        /**
         * @description Filter by alert type code or codes. Supply a comma separated list of alert type codes to filter by more than one code
         * @example M
         */
        alertType?: string
        /**
         * @description Filter by alert code or codes. Supply a comma separated list of alert codes to filter by more than one code
         * @example AS
         */
        alertCode?: string
        /**
         * @description Filter alerts that have an active on date or after the supplied date
         * @example 2023-09-27
         */
        activeFromStart?: string
        /**
         * @description Filter alerts that have an active on date up to or before the supplied date
         * @example 2021-11-15
         */
        activeFromEnd?: string
        /**
         * @description Filter alerts that contain the search text in their description or authorised by. The search is case insensitive and will match any part of the description or authorised by text
         * @example Search text
         */
        search?: string
        /** @description Zero-based page index (0..N) */
        page?: unknown
        /** @description The size of the page to be returned */
        size?: unknown
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: unknown[]
      }
      header?: never
      path: {
        /**
         * @description Prison number of the prisoner. Also referred to as the offender number, offender id or NOMS id
         * @example A1234AA
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alerts found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAlert']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPrisonerAlert: {
    parameters: {
      query?: {
        /** @description Allows the creation of an alert using an inactive code. Intended only for use by the Alerts UI when the user has the ‘Manage Alerts in Bulk for Prison Estate’ role. Defaults to false */
        allowInactiveCode?: boolean
      }
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        /**
         * @description Prison number of the prisoner. Also referred to as the offender number, offender id or NOMS id
         * @example A1234AA
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlert']
      }
    }
    responses: {
      /** @description Alert created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the person already has an active alert using the supplied alert code */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPlan: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alerts creation plan generated successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BulkPlan']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  startPlan: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Start plan accepted - will run asynchronously */
      202: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retrieveAlertTypes: {
    parameters: {
      query?: {
        /** @description Include inactive alert types and codes. Defaults to false */
        includeInactive?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert types and codes found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAlertType: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertTypeRequest']
      }
    }
    responses: {
      /** @description Alert type created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the alert type code already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retrieveAlertCodes: {
    parameters: {
      query?: {
        /** @description Include inactive alert types and codes. Defaults to false */
        includeInactive?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code retrieved */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertCode'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAlertCode: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertCodeRequest']
      }
    }
    responses: {
      /** @description Alert code created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the parent alert type has not been found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, the alert code already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePlan: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
        /** @description The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties. */
        Source?: string
      }
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      /** @description Alerts creation plan generated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BulkPlan']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlertType: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertType: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertTypeRequest']
      }
    }
    responses: {
      /** @description Alert type updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertType']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reactivateAlertType: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertType: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert type reactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertType']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deactivateAlertType: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertType: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert type deactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertType']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retrieveAlertCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        alertCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code retrieved */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlertCode: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertCodeRequest']
      }
    }
    responses: {
      /** @description Alert code updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reactivateAlertCode: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code reactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deactivateAlertCode: {
    parameters: {
      query?: never
      header?: {
        /** @description The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present. */
        Username?: string
      }
      path: {
        alertCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code deactivated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertCode']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert code was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPlanStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully retrieved the status of a plan */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BulkPlanStatus']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No plan found with the provided identifier */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPlanPrisoners: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully retrieved prisoners associated with a plan */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BulkPlanPrisoners']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No plan found with the provided identifier */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPlanAffect: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully retrieved counts of affect of plan */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BulkPlanAffect']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No plan found with the provided identifier */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retrieveAlertType: {
    parameters: {
      query?: never
      header?: never
      path: {
        alertTypeCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert type found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertType'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the alert type was is not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
